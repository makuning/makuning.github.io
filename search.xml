<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>平时在用的网址</title>
      <link href="/2023/06/09/practical/website/"/>
      <url>/2023/06/09/practical/website/</url>
      
        <content type="html"><![CDATA[<h1 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h1>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
            <tag> 网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/03/17/knowledge/data-structure/"/>
      <url>/2023/03/17/knowledge/data-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>对于程序员来说，数据结构是一门非常重要的科目，但是也是一门比较难以掌握的科目，这里记录了自己在大学课程中的一些实践代码，方便以后回来看看自己写的数据结构有多烂……</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>线性表的顺序存储，C++代码实现如下</p><p><strong>SeqlList.h</strong>，如果一个类使用了模板的话，不能将实现与定义拆分成两个文件，这个问题我卡了很久很久~</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">200</span>;<span class="comment">// 设置顺序表最多能存储的元素的数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;<span class="comment">// 相当于Java的泛型，在C++叫模板</span></span><br><span class="line"><span class="keyword">class</span> SeqList</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SeqList</span>();<span class="comment">// 无参构造，建立空的顺序表</span></span><br><span class="line"><span class="built_in">SeqList</span>(DataType a[], <span class="type">int</span> n);<span class="comment">// 有参构造，建立长度为n的顺序表</span></span><br><span class="line">~<span class="built_in">SeqList</span>();<span class="comment">// 析构函数，就是在对象销毁时会被执行</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">()</span></span>;<span class="comment">// 获取线性表的长度</span></span><br><span class="line"><span class="function">DataType <span class="title">Get</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">// 按位查找，查找第i个元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Locate</span><span class="params">(DataType x)</span></span>;<span class="comment">// 按值查找，查找值为x的元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> i, DataType x)</span></span>;<span class="comment">// 插入操作，在第i个位置插入值为x的元素</span></span><br><span class="line"><span class="function">DataType <span class="title">Delete</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">// 删除操作，删除第i个元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;<span class="comment">// 判断线性表是否为空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;<span class="comment">// 遍历操作，按序号依次输出各元素</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DataType data[MaxSize];<span class="comment">// 存放数据元素的数组</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">// 线性表的长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造，建立空的顺序表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqList&lt;DataType&gt;::<span class="built_in">SeqList</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造，建立长度为n的顺序表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqList&lt;DataType&gt;::<span class="built_in">SeqList</span>(DataType a[], <span class="type">int</span> n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; MaxSize) <span class="keyword">throw</span> <span class="string">&quot;参数非法&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;data[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数，就是在对象销毁时会被执行</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqList&lt;DataType&gt;::~<span class="built_in">SeqList</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;被销毁了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线性表的长度</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> SeqList&lt;DataType&gt;::<span class="built_in">Length</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位查找，查找第i个元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqList&lt;DataType&gt;::<span class="built_in">Get</span>(<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; <span class="keyword">this</span>-&gt;length) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;位置不存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找，查找值为x的元素</span></span><br><span class="line"><span class="comment">// 0：没找到</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> SeqList&lt;DataType&gt;::<span class="built_in">Locate</span>(DataType x) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;data[i] == x) &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入操作，在第i个位置插入值为x的元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> SeqList&lt;DataType&gt;::<span class="built_in">Insert</span>(<span class="type">int</span> i, DataType x) &#123;</span><br><span class="line"><span class="keyword">if</span> (length &gt;= MaxSize) <span class="keyword">throw</span> <span class="string">&quot;已满&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; length + <span class="number">1</span>) <span class="keyword">throw</span> <span class="string">&quot;位置错误&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = length; j &gt;= i - <span class="number">1</span>; j--) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;data[j + <span class="number">1</span>] = <span class="keyword">this</span>-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;data[i - <span class="number">1</span>] = x;</span><br><span class="line"><span class="keyword">this</span>-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除操作，删除第i个元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqList&lt;DataType&gt;::<span class="built_in">Delete</span>(<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; length) <span class="keyword">throw</span> <span class="string">&quot;位置错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">DataType del = <span class="keyword">this</span>-&gt;<span class="built_in">Get</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">-1</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;data[j] = <span class="keyword">this</span>-&gt;data[j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;length--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> del;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断线性表是否为空</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> SeqList&lt;DataType&gt;::<span class="built_in">Empty</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;length ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历操作，按序号依次输出各元素</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> SeqList&lt;DataType&gt;::<span class="built_in">PrintList</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">Empty</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;data[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;data[i] &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Main.cpp</strong>，做了个菜单，自我感觉良好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;</span><br><span class="line"><span class="type">void</span> <span class="built_in">Menu</span>(<span class="type">int</span> choose, SeqList&lt;&gt;* list);</span><br><span class="line"><span class="comment">// 清除控制台（未使用）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SeqList&lt;&gt; list;</span><br><span class="line"><span class="type">int</span> choose = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (choose) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;元素[&quot;</span> &lt;&lt; list.<span class="built_in">Length</span>() &lt;&lt; <span class="string">&quot;]个|最大容量[&quot;</span> &lt;&lt; MaxSize &lt;&lt; <span class="string">&quot;]个|顺序表状态&quot;</span>;</span><br><span class="line">list.<span class="built_in">PrintList</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、插入一个数字&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、指定位置插入一个数字&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、获取某个数的具体位置&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、获取一个具体位置的数&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5、删除一个指定位置的数&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0、退出演示&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入对应服务编号：&quot;</span>;</span><br><span class="line">cin &gt;&gt; choose;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">Menu</span>(choose, &amp;list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span> * e) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;出错啦，错误消息：&quot;</span> &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;--------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;</span><br><span class="line"><span class="type">void</span> <span class="built_in">Menu</span>(<span class="type">int</span> choose, SeqList&lt;&gt;* list) &#123;</span><br><span class="line"><span class="type">int</span> in_1 = <span class="number">0</span>, in_2 = <span class="number">0</span>, temp_1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (choose) &#123;</span><br><span class="line"><span class="comment">// 插入一个数字</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要插入的数字：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">list-&gt;<span class="built_in">Insert</span>(list-&gt;<span class="built_in">Length</span>() + <span class="number">1</span>, in_1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 指定位置插入一个数字</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入指定位置与要插入的数字：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1 &gt;&gt; in_2;</span><br><span class="line">list-&gt;<span class="built_in">Insert</span>(in_1, in_2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 获取某个数的具体位置</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要查询的数：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">temp_1 = list-&gt;<span class="built_in">Locate</span>(in_1);</span><br><span class="line"><span class="keyword">if</span> (temp_1) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所查数第一次出现的位置是：&quot;</span> &lt;&lt; temp_1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有查到哦~&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 获取一个具体位置的数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要查找的位置：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">temp_1 = list-&gt;<span class="built_in">Get</span>(in_1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所在位置的数是：&quot;</span> &lt;&lt; temp_1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 删除一个指定位置的数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要删除的位置：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">list-&gt;<span class="built_in">Delete</span>(in_1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;感谢体验，再见~&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除屏幕（未使用）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\x1B[2J\x1B[H&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230317232746299.png" alt="image-20230317232746299"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230317232856469.png" alt="image-20230317232856469"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230317232916272.png" alt="image-20230317232916272"></p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表有头插法和尾插法的说法，案例代码具体体现在链表的有参初始工作中</p><p><strong>LinkList.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义单链表的结点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> Node &#123;</span><br><span class="line">DataType data;</span><br><span class="line">Node&lt;DataType&gt;* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;<span class="comment">// 相当于Java的泛型，在C++叫模板</span></span><br><span class="line"><span class="keyword">class</span> LinkList</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">LinkList</span>();<span class="comment">// 无参构造，建立空的顺序表</span></span><br><span class="line"><span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n);<span class="comment">// 有参构造，建立长度为n的顺序表</span></span><br><span class="line">~<span class="built_in">LinkList</span>();<span class="comment">// 析构函数，就是在对象销毁时会被执行</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">()</span></span>;<span class="comment">// 获取线性表的长度</span></span><br><span class="line"><span class="function">DataType <span class="title">Get</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">// 按位查找，查找第i个结点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Locate</span><span class="params">(DataType x)</span></span>;<span class="comment">// 按值查找，查找值为x的结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> i, DataType x)</span></span>;<span class="comment">// 插入操作，在第i个位置插入值为x的结点</span></span><br><span class="line"><span class="function">DataType <span class="title">Delete</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">// 删除操作，删除第i个结点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;<span class="comment">// 判断线性表是否为空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;<span class="comment">// 遍历操作，按序号依次输出各结点</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node&lt;DataType&gt;* header;<span class="comment">// 单链表的头结点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造，建立只有头节点的单链表</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt;::<span class="built_in">LinkList</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;header = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line"><span class="keyword">this</span>-&gt;header-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造，建立长度为n的顺序表，头插法</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt;::<span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;header = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line"><span class="keyword">this</span>-&gt;header-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">Node&lt;DataType&gt;* temp = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">temp = <span class="keyword">this</span>-&gt;header-&gt;next;</span><br><span class="line"><span class="keyword">this</span>-&gt;header-&gt;next = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line"><span class="keyword">this</span>-&gt;header-&gt;next-&gt;data = a[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;header-&gt;next-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 有参构造，建立长度为n的顺序表，尾插法</span></span><br><span class="line"><span class="comment">//template &lt;typename DataType&gt;</span></span><br><span class="line"><span class="comment">//LinkList&lt;DataType&gt;::LinkList(DataType a[], int n) &#123;</span></span><br><span class="line"><span class="comment">//this-&gt;header = new Node&lt;DataType&gt;;</span></span><br><span class="line"><span class="comment">//Node&lt;DataType&gt;* temp = this-&gt;header;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">//temp-&gt;next = new Node&lt;DataType&gt;;</span></span><br><span class="line"><span class="comment">//temp-&gt;next-&gt;data = a[i];</span></span><br><span class="line"><span class="comment">//temp = temp-&gt;next;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//temp-&gt;next = nullptr;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数，就是在对象销毁时会被执行</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt;::~<span class="built_in">LinkList</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;被销毁了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线性表的长度</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList&lt;DataType&gt;::<span class="built_in">Length</span>() &#123;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">Node&lt;DataType&gt;* temp = <span class="keyword">this</span>-&gt;header;</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位查找，查找第i个结点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkList&lt;DataType&gt;::<span class="built_in">Get</span>(<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; <span class="keyword">this</span>-&gt;<span class="built_in">Length</span>()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;位置不存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;DataType&gt;* temp = <span class="keyword">this</span>-&gt;header;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找，查找值为x的结点</span></span><br><span class="line"><span class="comment">// 0：没找到</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList&lt;DataType&gt;::<span class="built_in">Locate</span>(DataType x) &#123;</span><br><span class="line">Node&lt;DataType&gt;* temp = header;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">Length</span>(); i++) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (temp-&gt;data == x) &#123;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入操作，在第i个位置插入值为x的结点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt;::<span class="built_in">Insert</span>(<span class="type">int</span> i, DataType x) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; <span class="keyword">this</span>-&gt;<span class="built_in">Length</span>() + <span class="number">1</span>) <span class="keyword">throw</span> <span class="string">&quot;位置错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">Node&lt;DataType&gt;* temp = header, *new_node = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">new_node-&gt;data = x;</span><br><span class="line">new_node-&gt;next = temp-&gt;next;</span><br><span class="line">temp-&gt;next = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除操作，删除第i个结点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkList&lt;DataType&gt;::<span class="built_in">Delete</span>(<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; <span class="keyword">this</span>-&gt;<span class="built_in">Length</span>()) <span class="keyword">throw</span> <span class="string">&quot;位置错误&quot;</span>;</span><br><span class="line"></span><br><span class="line">DataType del = <span class="keyword">this</span>-&gt;<span class="built_in">Get</span>(i);</span><br><span class="line"></span><br><span class="line">Node&lt;DataType&gt;* node = header, *temp = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp = node-&gt;next;</span><br><span class="line">node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">delete</span>(temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> del;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断线性表是否为空</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList&lt;DataType&gt;::<span class="built_in">Empty</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;header-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历操作，按序号依次输出各结点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt;::<span class="built_in">PrintList</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">Empty</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;DataType&gt;* temp = header-&gt;next;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&quot;</span> &lt;&lt; temp-&gt;data;</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; temp-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt;  <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Main.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;</span><br><span class="line"><span class="type">void</span> <span class="built_in">Menu</span>(<span class="type">int</span> choose, LinkList&lt;&gt;* list);</span><br><span class="line"><span class="comment">// 清除控制台（未使用）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> init[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</span><br><span class="line">LinkList&lt;&gt; <span class="built_in">list</span>(init, <span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> choose = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (choose) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;元素[&quot;</span> &lt;&lt; list.<span class="built_in">Length</span>() &lt;&lt; <span class="string">&quot;]个|单链表状态&quot;</span>;</span><br><span class="line">list.<span class="built_in">PrintList</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、插入一个数字&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、指定位置插入一个数字&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、获取某个数的具体位置&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4、获取一个具体位置的数&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5、删除一个指定位置的数&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0、退出演示&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入对应服务编号：&quot;</span>;</span><br><span class="line">cin &gt;&gt; choose;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">Menu</span>(choose, &amp;list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* e) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;出错啦，错误消息：&quot;</span> &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;--------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;</span><br><span class="line"><span class="type">void</span> <span class="built_in">Menu</span>(<span class="type">int</span> choose, LinkList&lt;&gt;* list) &#123;</span><br><span class="line"><span class="type">int</span> in_1 = <span class="number">0</span>, in_2 = <span class="number">0</span>, temp_1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (choose) &#123;</span><br><span class="line"><span class="comment">// 插入一个数字</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要插入的数字：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">list-&gt;<span class="built_in">Insert</span>(list-&gt;<span class="built_in">Length</span>() + <span class="number">1</span>, in_1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 指定位置插入一个数字</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入指定位置与要插入的数字：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1 &gt;&gt; in_2;</span><br><span class="line">list-&gt;<span class="built_in">Insert</span>(in_1, in_2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 获取某个数的具体位置</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要查询的数：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">temp_1 = list-&gt;<span class="built_in">Locate</span>(in_1);</span><br><span class="line"><span class="keyword">if</span> (temp_1) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所查数第一次出现的位置是：&quot;</span> &lt;&lt; temp_1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有查到哦~&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 获取一个具体位置的数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要查找的位置：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">temp_1 = list-&gt;<span class="built_in">Get</span>(in_1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所在位置的数是：&quot;</span> &lt;&lt; temp_1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 删除一个指定位置的数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要删除的位置：&quot;</span>;</span><br><span class="line">cin &gt;&gt; in_1;</span><br><span class="line">list-&gt;<span class="built_in">Delete</span>(in_1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;感谢体验，再见~&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除屏幕（未使用）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\x1B[2J\x1B[H&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果和顺序表差不多，就不过多展示了</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230318123337905.png" alt="image-20230318123337905"></p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>栈结构就是先入后出，后入先出，使用顺序栈实现四则运算</p><p><strong>MyMath.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断运算符优先级</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Precedence</span><span class="params">(<span class="type">char</span> op)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据二元运算符运算</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Operate</span><span class="params">(<span class="type">float</span> left, <span class="type">float</span> right, <span class="type">char</span> op)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>SeqStack.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> StackSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> SeqStack &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SeqStack</span>();<span class="comment">// 构造函数</span></span><br><span class="line">~<span class="built_in">SeqStack</span>();<span class="comment">// 析构函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(DataType x)</span></span>;<span class="comment">// 入栈操作</span></span><br><span class="line"><span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;<span class="comment">// 出栈操作</span></span><br><span class="line"><span class="function">DataType <span class="title">GetTop</span><span class="params">()</span></span>;<span class="comment">// 去栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;<span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DataType data[StackSize];<span class="comment">// 存放栈元素的数组</span></span><br><span class="line"><span class="type">int</span> top;<span class="comment">// 栈顶元素在数组中的下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::<span class="built_in">SeqStack</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;top = <span class="number">-1</span>;<span class="comment">// 初始化栈顶元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::~<span class="built_in">SeqStack</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> SeqStack&lt;DataType&gt;::<span class="built_in">Push</span>(DataType x) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;top == StackSize - <span class="number">1</span>) <span class="keyword">throw</span> <span class="string">&quot;栈溢出&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;data[++top] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">Pop</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;data[<span class="keyword">this</span>-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">GetTop</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;data[<span class="keyword">this</span>-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> SeqStack&lt;DataType&gt;::<span class="built_in">Empty</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>-&gt;top == <span class="number">-1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyMath.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyMath.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断运算符优先级</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Precedence</span><span class="params">(<span class="type">char</span> op)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (op) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;不支持的运算符&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据二元运算符运算</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Operate</span><span class="params">(<span class="type">float</span> left, <span class="type">float</span> right, <span class="type">char</span> op)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (op) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> left - right;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> left * right;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> left / right;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;不支持的运算符&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SeqStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string allOps = <span class="string">&quot;#+-*/=()&quot;</span>, userIn = <span class="string">&quot;&quot;</span>;<span class="comment">// 定义所有支持的运算符与用户输入</span></span><br><span class="line">SeqStack&lt;<span class="type">float</span>&gt; nums;<span class="comment">// 用于存储运算数</span></span><br><span class="line">SeqStack&lt;<span class="type">char</span>&gt; ops;<span class="comment">// 用于存储运算符</span></span><br><span class="line"><span class="type">char</span> op = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="type">float</span> num = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;<span class="comment">// 用于存储程序会产生的数字</span></span><br><span class="line">ops.<span class="built_in">Push</span>(<span class="string">&#x27;#&#x27;</span>);<span class="comment">// 将结束符号压入栈中，方便优先级比较</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的表达式\n每次输入[运算数]or[运算符]&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (userIn != <span class="string">&quot;=&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;你的输入：&quot;</span>;</span><br><span class="line">cin &gt;&gt; userIn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断左括号</span></span><br><span class="line"><span class="keyword">if</span> (userIn == <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">ops.<span class="built_in">Push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为运算符</span></span><br><span class="line"><span class="keyword">if</span> (allOps.<span class="built_in">find</span>(userIn) == string::npos) &#123;</span><br><span class="line"><span class="comment">// 不是运算符则为数字，转为数字并压入数字栈</span></span><br><span class="line">num = <span class="built_in">stof</span>(userIn);<span class="comment">// 转为数字</span></span><br><span class="line">nums.<span class="built_in">Push</span>(num);<span class="comment">// 将数字压入数字栈中</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断右括号</span></span><br><span class="line"><span class="keyword">if</span> (userIn == <span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> ((op = ops.<span class="built_in">Pop</span>()) != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">right = nums.<span class="built_in">Pop</span>();</span><br><span class="line">left = nums.<span class="built_in">Pop</span>();</span><br><span class="line">nums.<span class="built_in">Push</span>(<span class="built_in">Operate</span>(left, right, op));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断运算符优先级</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Precedence</span>(ops.<span class="built_in">GetTop</span>()) &gt;= <span class="built_in">Precedence</span>(userIn[<span class="number">0</span>])) &#123;</span><br><span class="line"><span class="comment">// 如果新运算的优先级比栈中低则先弹栈进行运算</span></span><br><span class="line">right = nums.<span class="built_in">Pop</span>();</span><br><span class="line">left = nums.<span class="built_in">Pop</span>();</span><br><span class="line">nums.<span class="built_in">Push</span>(<span class="built_in">Operate</span>(left, right, ops.<span class="built_in">Pop</span>()));<span class="comment">// 将运算结果压入数字栈中</span></span><br><span class="line"><span class="comment">// 将用户输入的运算符压入运算符栈中</span></span><br><span class="line"><span class="keyword">if</span> (userIn != <span class="string">&quot;=&quot;</span>) &#123;</span><br><span class="line">ops.<span class="built_in">Push</span>(userIn[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果新运算的优先级比栈中高则直接压入运算符栈</span></span><br><span class="line"><span class="keyword">if</span> (userIn != <span class="string">&quot;=&quot;</span>) &#123;</span><br><span class="line">ops.<span class="built_in">Push</span>(userIn[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (userIn != <span class="string">&quot;=&quot;</span> || ops.<span class="built_in">GetTop</span>() != <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;计算结果：&quot;</span> &lt;&lt; nums.<span class="built_in">GetTop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230406202708597.png" alt="image-20230406202708597"></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>先入先出，后入后出，这里使用循环队列完成了一个门诊看病的案例</p><p><strong>CirQueue.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> QueueSize = <span class="number">50</span>;<span class="comment">// 设置循环队列的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CirQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CirQueue</span>();<span class="comment">// 构造函数</span></span><br><span class="line">~<span class="built_in">CirQueue</span>();<span class="comment">// 析构函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(DataType x)</span></span>;<span class="comment">// 入队操作，将元素x入队</span></span><br><span class="line"><span class="function">DataType <span class="title">DeQueue</span><span class="params">()</span></span>;<span class="comment">// 出队操作</span></span><br><span class="line"><span class="function">DataType <span class="title">GetHead</span><span class="params">()</span></span>;<span class="comment">// 取队头元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;<span class="comment">// 判空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Size</span><span class="params">()</span></span>;<span class="comment">// 长度</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DataType data[QueueSize];<span class="comment">// 数据</span></span><br><span class="line"><span class="type">int</span> start, end, length;<span class="comment">// 队头和队尾以及长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> CirQueue&lt;DataType&gt;::<span class="built_in">Size</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">CirQueue&lt;DataType&gt;::<span class="built_in">CirQueue</span>() &#123;</span><br><span class="line"><span class="comment">// 将头尾都指向最后一个位置</span></span><br><span class="line"><span class="keyword">this</span>-&gt;start = QueueSize - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;end = QueueSize - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = <span class="number">0</span>;<span class="comment">// 长度为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">CirQueue&lt;DataType&gt;::~<span class="built_in">CirQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> CirQueue&lt;DataType&gt;::<span class="built_in">EnQueue</span>(DataType x) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>-&gt;end + <span class="number">1</span>) % QueueSize == <span class="keyword">this</span>-&gt;start) <span class="keyword">throw</span> <span class="string">&quot;满&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;data[<span class="keyword">this</span>-&gt;end = ((<span class="keyword">this</span>-&gt;end + <span class="number">1</span>) % QueueSize)] = x;</span><br><span class="line"><span class="keyword">this</span>-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType CirQueue&lt;DataType&gt;::<span class="built_in">DeQueue</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length--;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;start == <span class="keyword">this</span>-&gt;end) <span class="keyword">throw</span> <span class="string">&quot;空队&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;data[<span class="keyword">this</span>-&gt;start = (<span class="keyword">this</span>-&gt;start + <span class="number">1</span>) % QueueSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取队头</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType CirQueue&lt;DataType&gt;::<span class="built_in">GetHead</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;start == <span class="keyword">this</span>-&gt;end) <span class="keyword">throw</span> <span class="string">&quot;空队&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;data[(<span class="keyword">this</span>-&gt;start + <span class="number">1</span>) % QueueSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判空</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> CirQueue&lt;DataType&gt;::<span class="built_in">Empty</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> length ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CirQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于存储病人信息的结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sick</span> &#123;</span><br><span class="line">string id;<span class="comment">// 编号</span></span><br><span class="line">string name;<span class="comment">// 姓名</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理菜单选项，并返回进入门诊的人</span></span><br><span class="line"><span class="comment">choice：选项</span></span><br><span class="line"><span class="comment">sicks：排队的病人</span></span><br><span class="line"><span class="comment">current：当前正在门诊的病人</span></span><br><span class="line"><span class="comment">return：返回处理后正在门诊的病人</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function">Sick* <span class="title">choiceHandle</span><span class="params">(<span class="type">int</span> choice, CirQueue&lt;Sick*&gt;* sicks, Sick* current)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> userIn = <span class="number">0</span>;</span><br><span class="line">CirQueue&lt;Sick*&gt;* sicks = <span class="keyword">new</span> CirQueue&lt;Sick*&gt;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sick</span>* sick = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------输入数字选择对应功能----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (sick == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------诊室空闲----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---编号[&quot;</span> + sick-&gt;id + <span class="string">&quot;]|姓名[&quot;</span> + sick-&gt;name + <span class="string">&quot;]正在门诊-----&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sicks-&gt;<span class="built_in">Size</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---请编号[&quot;</span> + sicks-&gt;<span class="built_in">GetHead</span>()-&gt;id + <span class="string">&quot;]|姓名[&quot;</span> + sicks-&gt;<span class="built_in">GetHead</span>()-&gt;name + <span class="string">&quot;]做好准备-----&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------当前还有[&quot;</span> &lt;&lt; sicks-&gt;<span class="built_in">Size</span>() &lt;&lt; <span class="string">&quot;]人正在排队----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------1、录入病人---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------2、呼叫病人---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------0、退出系统---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择：&quot;</span>;</span><br><span class="line">cin &gt;&gt; userIn;</span><br><span class="line">sick = <span class="built_in">choiceHandle</span>(userIn, sicks, sick);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* ex) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;错误的操作&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (userIn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理菜单选项，并返回进入门诊的人</span></span><br><span class="line"><span class="comment">choice：选项</span></span><br><span class="line"><span class="comment">sicks：排队的病人</span></span><br><span class="line"><span class="comment">current：当前正在门诊的病人</span></span><br><span class="line"><span class="comment">return：返回处理后正在门诊的病人</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Sick* <span class="title">choiceHandle</span><span class="params">(<span class="type">int</span> choice, CirQueue&lt;Sick*&gt;* sicks, Sick* current)</span> </span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sick</span>* sick;</span><br><span class="line"><span class="keyword">switch</span> (choice) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;再见&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入编号及姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">sick = <span class="keyword">new</span> Sick;</span><br><span class="line">cin &gt;&gt; sick-&gt;id &gt;&gt; sick-&gt;name;</span><br><span class="line">sicks-&gt;<span class="built_in">EnQueue</span>(sick);</span><br><span class="line"><span class="keyword">return</span> current;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> (sicks-&gt;<span class="built_in">Size</span>()) &#123;</span><br><span class="line">sick = sicks-&gt;<span class="built_in">DeQueue</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无人等待&quot;</span> &lt;&lt; endl;</span><br><span class="line">sick = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sick;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不支持的选项&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230406203204850.png" alt="image-20230406203204850"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230406203226150.png" alt="image-20230406203226150"></p><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p>字符串特有的功能</p><h4 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h4><p>暴力算法</p><p><strong>Main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取子串在主串中第一次出现的起始位置，不存在则返回0</span></span><br><span class="line"><span class="comment">* param s 主串</span></span><br><span class="line"><span class="comment">* param t 子串</span></span><br><span class="line"><span class="comment">* return 返回子串在主串中第一次出现的下标（从1起标），不存在则返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BF</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;                              <span class="comment">// 设置主串每次匹配的起始位置</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;                           <span class="comment">// i记录主串某次匹配的位置变动，j记录子串匹配的位置变动</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        当主串下标不为空时说明主串还没匹配完，</span></span><br><span class="line"><span class="comment">        当子串下标不为空时说明子串还没被匹配完过</span></span><br><span class="line"><span class="comment">        当上面两个条件同时满足才执行循环</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span> ((s[i] != <span class="string">&#x27;\0&#x27;</span>) &amp;&amp; (t[j] != <span class="string">&#x27;\0&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果在某次匹配中，子串能与主串匹配上就一直往下匹配，</span></span><br><span class="line"><span class="comment">            直到主串到底，或者子串到底</span></span><br><span class="line"><span class="comment">            主串到底说明已经没法匹配了</span></span><br><span class="line"><span class="comment">            子串到底说明找到了子串在主串中的位置</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果某次匹配没有匹配上，就说明主串的这个位置匹配不上，</span></span><br><span class="line"><span class="comment">            匹配的主串起始位置就往下走一位，</span></span><br><span class="line"><span class="comment">            并将记录主串某次匹配的位置更新为主串新的匹配起始位置，</span></span><br><span class="line"><span class="comment">            记录子串匹配的位置初始化为子串的第一个字符位置</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            start++; </span><br><span class="line">            i = start; </span><br><span class="line">            j = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        当匹配完成后如果子串的下标匹配记录为\0，</span></span><br><span class="line"><span class="comment">        则说明子串匹配成功了，就返回最后这次匹配的主串起始位置+1（方法返回从1起标）。</span></span><br><span class="line"><span class="comment">        如果子串下标匹配记录不为\0，说明是主串的下标匹配记录为\0，</span></span><br><span class="line"><span class="comment">        表明主串已经匹配到最后一个字符了，也没有匹配到子串，就返回0，表示没有找到子串</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (t[j] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> start + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 给两个字符指针分配内存，方便存字符串</span></span><br><span class="line">    <span class="type">char</span> *s = (<span class="type">char</span>*) <span class="built_in">malloc</span>(<span class="number">1024</span>), * t = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入主串：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入子串：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">int</span> index = <span class="built_in">BF</span>(s,t)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子串第一次在主串中出现的下标是：&quot;</span> &lt;&lt; index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;没有匹配到子串&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存释放</span></span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230406203523753.png" alt="image-20230406203523753"></p><h4 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h4><p>对我来说很烧脑，我这里的实现有问题，但是能力只能先这样了</p><p><strong>Main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于装载数组</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line"><span class="type">int</span>* data;<span class="comment">// 数组指针</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">// 数组长度</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取子串的next数组</span></span><br><span class="line"><span class="comment">param t 子串的首地址</span></span><br><span class="line"><span class="comment">return 返回next数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Arr* <span class="title">getNext</span><span class="params">(<span class="type">char</span>* t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过KMP算法获取子串在主串中第一次出现的下标（从0起标），未找到返回-1</span></span><br><span class="line"><span class="comment">param s 主串</span></span><br><span class="line"><span class="comment">param t 子串</span></span><br><span class="line"><span class="comment">return 子串在主串中第一次出现的下标（从0起标），未找到返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建字符串接收变量</span></span><br><span class="line"><span class="type">char</span>* s = (<span class="type">char</span>*) <span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line"><span class="type">char</span>* t = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端输入</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入主串：&quot;</span>;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入子串：&quot;</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="type">int</span> index = <span class="built_in">KMP</span>(s, t);</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有在主串中找到子串&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子串在主串中第一次出现的下标为：&quot;</span> &lt;&lt; index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取子串的next数组</span></span><br><span class="line"><span class="comment">param t 子串的首地址</span></span><br><span class="line"><span class="comment">return 返回next数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Arr* <span class="title">getNext</span><span class="params">(<span class="type">char</span>* t)</span> </span>&#123;</span><br><span class="line">Arr* next = <span class="keyword">new</span> Arr&#123; <span class="literal">nullptr</span>,<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算数组长度</span></span><br><span class="line"><span class="keyword">while</span> (t[next-&gt;length] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">next-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给next数组分配空间</span></span><br><span class="line">next-&gt;data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * (next-&gt;length));</span><br><span class="line"></span><br><span class="line">next-&gt;data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">next-&gt;data[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环对应子串的每个字符下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; next-&gt;length; i++) &#123;</span><br><span class="line"><span class="type">int</span> max = i - <span class="number">1</span>;<span class="comment">// 当前子串字符下标需要比对的前后缀的最长长度</span></span><br><span class="line">next-&gt;data[i] = <span class="number">0</span>;<span class="comment">// 假想没有前后缀</span></span><br><span class="line"><span class="comment">// 根据前后缀最大长度，从最大前后缀一直比较到最小前后缀，找到下次对比子串的起始指针</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = max; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 比较前后缀</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; j; k++) &#123;</span><br><span class="line"><span class="comment">// 依次比较前后缀，如果没配对就表示本次循环的前后缀长度不是最长的</span></span><br><span class="line"><span class="keyword">if</span> (t[k] != t[max - j + k + <span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果flag为真，则写入偏移量，并结束找最大前后缀</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="comment">// 将最大前后缀长度赋值给next数组并退出</span></span><br><span class="line">next-&gt;data[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过KMP算法获取子串在主串中第一次出现的下标（从0起标），未找到返回-1</span></span><br><span class="line"><span class="comment">param s 主串</span></span><br><span class="line"><span class="comment">param t 子串</span></span><br><span class="line"><span class="comment">return 子串在主串中第一次出现的下标（从0起标），未找到返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* t)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取子串的next数组</span></span><br><span class="line">Arr* next = <span class="built_in">getNext</span>(t);</span><br><span class="line"><span class="comment">// 分别为主串的比较下标记录与子串的比较下标记录</span></span><br><span class="line"><span class="type">int</span> start = <span class="number">0</span>, t_i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当主串比较到完，或者子串比较完就终止循环</span></span><br><span class="line"><span class="comment">// 子串比较完说明找到了子串的下标，主串比较完说明没有找到</span></span><br><span class="line"><span class="keyword">while</span> (s[start] != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; t[t_i] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[start] == t[t_i]) &#123;</span><br><span class="line">t_i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t_i = next-&gt;data[t_i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子串比较完说明找到了子串的下标</span></span><br><span class="line"><span class="keyword">if</span> (t[t_i] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 返回子串第一次出现的下标</span></span><br><span class="line"><span class="comment">// 由于主串下标在比较时会往后走，所以返回时要减去子串的长度</span></span><br><span class="line"><span class="keyword">return</span> start - next-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子串没有比较完说明没有在主串中找到子串，返回-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行截图</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/knowledge/data-structure/image-20230406203822526.png" alt="image-20230406203822526"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>双向链表：一个结点包含前驱与后继的结点指针</li><li>循环链表：<ul><li>单链表：尾结点的后继结点指针指向头结点</li><li>双向链表：头结点的前驱结点指针指向尾结点，尾结点的后继结点指针指向头结点</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三上软件构造期末复习提纲</title>
      <link href="/2023/02/27/review/software-construction/"/>
      <url>/2023/02/27/review/software-construction/</url>
      
        <content type="html"><![CDATA[<h1 id="大三上软件构造期末复习提纲"><a href="#大三上软件构造期末复习提纲" class="headerlink" title="大三上软件构造期末复习提纲"></a>大三上软件构造期末复习提纲</h1><p>软件开发的最佳实践的机制指的是有机体的构造</p><p>软件 &#x3D; 程序 + 数据 + 文档</p><h2 id="集成化开发环境的特点有哪些"><a href="#集成化开发环境的特点有哪些" class="headerlink" title="集成化开发环境的特点有哪些"></a>集成化开发环境的特点有哪些</h2><p>P19</p><p>IDE的特点是集成化、可视化和自动化。</p><p>在一个软件系统中支持软件实现的多个基本活动，具有操作方便、界面一致、自动化程度高、集成工具及时更新、有助于提高生产率等特点。同时，IDE体积比较大，内部的编译、运行、调试、连接等过程对开发者是透明的，不利于理解和掌握软件构造基本原理。</p><h2 id="敏捷开发的定义"><a href="#敏捷开发的定义" class="headerlink" title="敏捷开发的定义"></a>敏捷开发的定义</h2><p>P10</p><p>是应对快速变化的需求的一种软件开发能力。它以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个互相联系、但也可以独立运行的小项目，分别完成，在此过程中，软件一直处于可使用状态。</p><h2 id="软件的模块化理论、模块之间的关系、模块内部的关系"><a href="#软件的模块化理论、模块之间的关系、模块内部的关系" class="headerlink" title="软件的模块化理论、模块之间的关系、模块内部的关系"></a>软件的模块化理论、模块之间的关系、模块内部的关系</h2><p>？</p><h2 id="个体软件过程（Personal-Software-Process，PSP）的作用"><a href="#个体软件过程（Personal-Software-Process，PSP）的作用" class="headerlink" title="个体软件过程（Personal Software Process，PSP）的作用"></a>个体软件过程（Personal Software Process，PSP）的作用</h2><p>P9</p><p>PSP能够说明个体软件过程的原则；</p><p>帮助软件工程师做出准确的计划；</p><p>确定软件工程师为改善产品质量要采取的步骤；</p><p>建立度量个体软件过程改善的基准；</p><p>确定过程的改变对软件工程师能力的影响。</p><h2 id="简述敏捷开发的4个核心价值观"><a href="#简述敏捷开发的4个核心价值观" class="headerlink" title="简述敏捷开发的4个核心价值观"></a>简述敏捷开发的4个核心价值观</h2><p>P10</p><ol><li>个体和互动胜过流程和工具。</li><li>工作的软件胜过详尽的文档。</li><li>客户合作胜过合同谈判。</li><li>响应变化胜过遵循计划。</li></ol><h2 id="模块化的五个原则"><a href="#模块化的五个原则" class="headerlink" title="模块化的五个原则"></a>模块化的五个原则</h2><p>P35</p><ol><li><p>模块可分解性</p><p>如果一种设计方法提供了把问题分解为子问题的系统化机制，它就能降低整个问题的复杂性，从而可以实现一种有效的模块化解决方案。</p></li><li><p>模块可组装性</p><p>如果一种设计方法能把现有的（可重用的）设计构建组装称新系统，它就能提供一种并非一切都从头开始做的模块化解决方案。</p></li><li><p>模块可理解性</p><p>如果可以把一个模块作为一种独立单元（无需参考其他模块）来理解，那么，这样的模块是易于构造和易于修改的。</p></li><li><p>模块连续性</p><p>如果对系统需求的微笑修改只导致对个别模块，而不是对整个系统的修改，则修改所引起的副作用将最小。</p></li><li><p>模块保护性</p><p>如果当一个模块内出现异常情况时，它的影响局限在该模块内部，则由错误引起的副作用将最小。</p></li></ol><h2 id="IEEE对软件工程标准术语中给出的软件测试的定义"><a href="#IEEE对软件工程标准术语中给出的软件测试的定义" class="headerlink" title="IEEE对软件工程标准术语中给出的软件测试的定义"></a>IEEE对软件工程标准术语中给出的软件测试的定义</h2><p>P38</p><p>使用人工或自动手段来运行或测定某个系统的过程，其目的在于检测它是否满足规定的需求或者是否弄清预期结果与实际结果之间的差别。测试是对程序或系统能否完成特定任务建立信心的过程。</p><h2 id="面向对象的五个设计原则"><a href="#面向对象的五个设计原则" class="headerlink" title="面向对象的五个设计原则"></a>面向对象的五个设计原则</h2><p>P92</p><ol><li><p>单一职责原则</p><p>就一个类而言，应该仅有一个引起它变化的原因。指一个类只有一种单一的功能，不要实现过多的功能。该原则可以视为面向对象程序对低耦合、高内聚原则的实践。</p></li><li><p>开放封闭原则</p><p>软件实体（模块、函数、类）应该可以扩展，但是不可修改。对扩展开放，对修改封闭。他是面向对象所有原则的核心。</p></li><li><p>依赖倒转原则</p><p>抽象不应该依赖细节，细节应该依赖抽象。该原则与传统的结构化分析与设计方法对立。</p></li><li><p>里氏代换原则</p><p>子类型必须能够替换它们的基类型。这一思想体现了对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期间内识别子类，这是保证继承服用的基础。违反了里氏代换原则必然导致违反开放封闭原则。</p></li><li><p>接口隔离原则</p><p>不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次结构。</p></li></ol><h2 id="CSV格式的文件的特征"><a href="#CSV格式的文件的特征" class="headerlink" title="CSV格式的文件的特征"></a>CSV格式的文件的特征</h2><p>P103</p><ol><li>纯文本，使用某个字符集，如 <strong>ASCII,Unicode,EBCDIC或GB2312</strong></li><li>由记录组成（典型的时每行一条记录）</li><li>每条记录被分隔符分隔为字段（典型分隔符有<code>,</code>、<code>;</code>和<code>TAB</code>，有时分隔符可以包括可选的空格）</li><li>每条记录都有相同的字段序列</li></ol><h2 id="什么是表驱动编程？它主要技术有哪些？（重要）"><a href="#什么是表驱动编程？它主要技术有哪些？（重要）" class="headerlink" title="什么是表驱动编程？它主要技术有哪些？（重要）"></a>什么是表驱动编程？它主要技术有哪些？（重要）</h2><p>P112-113</p><p>使程序在表中通过选择条件而不使用逻辑语句（if或case）得到算式及运算结果。</p><ol><li><p>直接访问</p><p>通过数组下标直接访问表，例如用下标1~12的数组元素存放对应月份的天数，则用月份访问数组就能直接得到当月天数</p></li><li><p>阶梯访问</p><p>表中项表示一个范围，而不是一个单独的数。</p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>90~100分</td><td>优秀</td></tr><tr><td>80~89分</td><td>良好</td></tr><tr><td>70~79分</td><td>中等</td></tr><tr><td>60~69分</td><td>及格</td></tr><tr><td>&lt;60分</td><td>不及格</td></tr></tbody></table><p>使用表驱动编程，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starAccess</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">    String[] grades = &#123;<span class="string">&quot;不及格&quot;</span>,<span class="string">&quot;不及格&quot;</span>,<span class="string">&quot;不及格&quot;</span>,<span class="string">&quot;不及格&quot;</span>,<span class="string">&quot;不及格&quot;</span>,<span class="string">&quot;不及格&quot;</span>,<span class="string">&quot;及格&quot;</span>,<span class="string">&quot;中等&quot;</span>,<span class="string">&quot;良好&quot;</span>,<span class="string">&quot;优秀&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> score / <span class="number">10</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">    grade = grades[index];</span><br><span class="line">    </span><br><span class="line">    System.out.println(score + <span class="string">&quot;分别对应的成绩是&quot;</span> + grade);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>索引访问</p></li></ol><h2 id="调试的基本技术有哪些"><a href="#调试的基本技术有哪些" class="headerlink" title="调试的基本技术有哪些"></a>调试的基本技术有哪些</h2><p>P80-P82</p><ol><li><p>单步调试源程序</p><p>设置断点，单步调试</p><p>单步调试又有四种：遇到方法时进入方法内部；遇到方法时直接执行到下一步；从当前方法跳出，直接执行到方法的最后一行；跳到下一个断点；</p></li><li><p>检查&#x2F;更改变量的值</p></li><li><p>设置监视点观察变量</p></li><li><p>上下移动调用栈</p></li></ol><h2 id="简述交互设计的三个基本原则"><a href="#简述交互设计的三个基本原则" class="headerlink" title="简述交互设计的三个基本原则"></a>简述交互设计的三个基本原则</h2><p>P145</p><ol><li><p>学习性</p><p>指的是新的用户能用它进行有效的交互并获得最大的性能。</p></li><li><p>灵活性</p><p>是指用户和系统能以多种方式交换信息。</p></li><li><p>健壮性</p><p>是指在决定成就和目标评估方面对用户提供的支持程度。</p></li></ol><h2 id="简述交互设计过程模型的四项基本活动"><a href="#简述交互设计过程模型的四项基本活动" class="headerlink" title="简述交互设计过程模型的四项基本活动"></a>简述交互设计过程模型的四项基本活动</h2><p>P146</p><ol><li>交互设计以标识和建立用户需要开始。</li><li>提出满足需求的候选设计方案。</li><li>构建交互式版本。</li><li>设计评估。</li></ol><h2 id="圈复杂度的计算"><a href="#圈复杂度的计算" class="headerlink" title="圈复杂度的计算"></a>圈复杂度的计算</h2><p>V(G) &#x3D; e - n + 2 &#x3D; 边数 - 结点数 + 2</p><p>​e表示控制流图中边的数量，n表示控制流图中结点的数量</p><p>V(G) &#x3D; 区域数 &#x3D; 判定结点数 + 1</p><h2 id="表驱动编程"><a href="#表驱动编程" class="headerlink" title="表驱动编程"></a>表驱动编程</h2>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末复习 </tag>
            
            <tag> 成都工业学院 </tag>
            
            <tag> 软件构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nick大爷英语中级班作业</title>
      <link href="/2023/02/23/homework/english-nickcen-middle/"/>
      <url>/2023/02/23/homework/english-nickcen-middle/</url>
      
        <content type="html"><![CDATA[<h1 id="Nick大爷英语中级班课后作业"><a href="#Nick大爷英语中级班课后作业" class="headerlink" title="Nick大爷英语中级班课后作业"></a>Nick大爷英语中级班课后作业</h1><h2 id="复习介词短语1"><a href="#复习介词短语1" class="headerlink" title="复习介词短语1"></a>复习介词短语1</h2><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p><strong>用固定介词短语造句，每个造两句话</strong></p><ol><li><p>at first</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I trusted him at first.</span><br><span class="line">I didn&#x27;t matter the problem at first.</span><br></pre></td></tr></table></figure></li><li><p>at breakfast</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">He is at breakfast.</span><br><span class="line">She always read news at breakfast.</span><br></pre></td></tr></table></figure></li><li><p>at home and abroad</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The book is famous at home and abroad.</span><br><span class="line">My father work at home and abroad.</span><br></pre></td></tr></table></figure></li><li><p>at last</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My English homework was finished at last.</span><br><span class="line">Her best friend played the computer game with her at last.</span><br></pre></td></tr></table></figure></li><li><p>at once</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The old man saved the child at once.</span><br><span class="line">My mother bought it at once when I told her that I want the book.</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三上离散数学期末复习提纲</title>
      <link href="/2023/02/20/review/discrete-mathematics/"/>
      <url>/2023/02/20/review/discrete-mathematics/</url>
      
        <content type="html"><![CDATA[<h1 id="大三上离散数学期末复习提纲"><a href="#大三上离散数学期末复习提纲" class="headerlink" title="大三上离散数学期末复习提纲"></a>大三上离散数学期末复习提纲</h1><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><h3 id="命题及其表示"><a href="#命题及其表示" class="headerlink" title="命题及其表示"></a>命题及其表示</h3><p><strong>具有唯一真值的陈述句称为命题</strong></p><p>原子命题：没有联结词的命题</p><p>复合命题：有联结词的命题</p><p>命题通常使用大写字母<strong>P,Q,R</strong>等表示</p><p>命题变元，命题常元</p><p>命题常元如：<code>P:今天下雨</code></p><h3 id="逻辑联结词"><a href="#逻辑联结词" class="headerlink" title="逻辑联结词"></a>逻辑联结词</h3><ol><li><p>否定</p><table><thead><tr><th align="center">P</th><th align="center">非P</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td></tr></tbody></table></li><li><p>合取</p><table><thead><tr><th>P</th><th>Q</th><th>P ^ Q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></li><li><p>析取</p><table><thead><tr><th>P</th><th>Q</th><th>P v Q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></li><li><p>条件</p><table><thead><tr><th>P</th><th>Q</th><th>P -&gt; Q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></li><li><p>双条件</p><table><thead><tr><th>P</th><th>Q</th><th>P ^ Q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table></li></ol><h3 id="命题公式与符号化"><a href="#命题公式与符号化" class="headerlink" title="命题公式与符号化"></a>命题公式与符号化</h3><p>单个的命题变元也是命题公式</p><p>命题符号化案例</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">张三和李四都是班干部</span><br><span class="line"></span><br><span class="line">设 P：张三是班干部，  Q：李四是班干部。</span><br><span class="line">则命题符号化为： P <span class="built_in">^</span> Q</span><br></pre></td></tr></table></figure><h3 id="真值表与等价公式"><a href="#真值表与等价公式" class="headerlink" title="真值表与等价公式"></a>真值表与等价公式</h3><p>一般，在含有n个命题变元的命题公式中，共有<code>2^n</code>种指派</p><h3 id="蕴含式"><a href="#蕴含式" class="headerlink" title="蕴含式"></a>蕴含式</h3><h3 id="最小联结词组"><a href="#最小联结词组" class="headerlink" title="最小联结词组"></a>最小联结词组</h3><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><h3 id="推理理论"><a href="#推理理论" class="headerlink" title="推理理论"></a>推理理论</h3><h2 id="谓词逻辑"><a href="#谓词逻辑" class="headerlink" title="谓词逻辑"></a>谓词逻辑</h2><h3 id="谓词的基本概念"><a href="#谓词的基本概念" class="headerlink" title="谓词的基本概念"></a>谓词的基本概念</h3><h3 id="谓词公式与翻译"><a href="#谓词公式与翻译" class="headerlink" title="谓词公式与翻译"></a>谓词公式与翻译</h3><h3 id="变元的约束"><a href="#变元的约束" class="headerlink" title="变元的约束"></a>变元的约束</h3><h3 id="谓词演算的等价式与蕴含式"><a href="#谓词演算的等价式与蕴含式" class="headerlink" title="谓词演算的等价式与蕴含式"></a>谓词演算的等价式与蕴含式</h3><h3 id="谓词公式的范式"><a href="#谓词公式的范式" class="headerlink" title="谓词公式的范式"></a>谓词公式的范式</h3><h3 id="谓词演算的推理理论"><a href="#谓词演算的推理理论" class="headerlink" title="谓词演算的推理理论"></a>谓词演算的推理理论</h3><h2 id="集合与关系"><a href="#集合与关系" class="headerlink" title="集合与关系"></a>集合与关系</h2><h3 id="集合的基本概念"><a href="#集合的基本概念" class="headerlink" title="集合的基本概念"></a>集合的基本概念</h3><h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3><h3 id="序偶与笛卡尔积"><a href="#序偶与笛卡尔积" class="headerlink" title="序偶与笛卡尔积"></a>序偶与笛卡尔积</h3><h3 id="关系及其表示"><a href="#关系及其表示" class="headerlink" title="关系及其表示"></a>关系及其表示</h3><h3 id="关系的性质及其判定方法"><a href="#关系的性质及其判定方法" class="headerlink" title="关系的性质及其判定方法"></a>关系的性质及其判定方法</h3><h3 id="复合关系和逆运算"><a href="#复合关系和逆运算" class="headerlink" title="复合关系和逆运算"></a>复合关系和逆运算</h3><h3 id="关系的闭包运算"><a href="#关系的闭包运算" class="headerlink" title="关系的闭包运算"></a>关系的闭包运算</h3><h3 id="等价关系与相融关系"><a href="#等价关系与相融关系" class="headerlink" title="等价关系与相融关系"></a>等价关系与相融关系</h3><h3 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h3><h2 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h2><h3 id="代数系统的概念"><a href="#代数系统的概念" class="headerlink" title="代数系统的概念"></a>代数系统的概念</h3><h3 id="半群与含幺半群"><a href="#半群与含幺半群" class="headerlink" title="半群与含幺半群"></a>半群与含幺半群</h3><ul><li>半群<ul><li>运算是封闭的</li><li>运算是可结合的</li></ul></li><li>含幺半群<ul><li>运算是可封闭的</li><li>运算时可结合的</li><li>含有幺元<code>e</code></li></ul></li></ul><h3 id="群与子群"><a href="#群与子群" class="headerlink" title="群与子群"></a>群与子群</h3><h4 id="群"><a href="#群" class="headerlink" title="群"></a>群</h4><p><strong>定义（四个条件）</strong></p><ol><li><p>运算是封闭的</p></li><li><p>运算是可结合的</p></li><li><p>含有幺元<code>e</code></p></li><li><p>每个成员都含有逆元（成员与逆元运算后的结果为幺元<code>e</code>）</p></li></ol><h4 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h4><h3 id="几类特殊的群"><a href="#几类特殊的群" class="headerlink" title="几类特殊的群"></a>几类特殊的群</h3><ol><li><p>交换群</p><p>运算满足交换律</p></li><li><p>循环群</p><p>群中存在一个元素a，使得群中任意元素都是a的幂</p><p>任何一个循环群都是交换群</p></li></ol><h3 id="代数系统的同态与同构"><a href="#代数系统的同态与同构" class="headerlink" title="代数系统的同态与同构"></a>代数系统的同态与同构</h3><h3 id="环与域"><a href="#环与域" class="headerlink" title="环与域"></a>环与域</h3><p>设X是非空集合，&lt;X,Δ，<code>*</code>&gt;是代数系统，Δ和<code>*</code>都是二元运算。如果：</p><ol><li><p>&lt;X,Δ&gt;是交换群</p></li><li><p>&lt;X,*&gt;是半群</p></li><li><p>运算*对于运算Δ是可分配的</p><p>即<code>任意a,b,c ∈ Z，有 a * (b Δ c) = (a * b) Δ (a * c) 和 (b Δ c) * a = (a * b) Δ (c * a)</code></p><p>则称<code>&lt;X,Δ,*&gt;</code>是环。在环<code>&lt;X,Δ,*&gt;</code>中，若运算<code>*</code>是可交换的，则称环<code>&lt;X,Δ,*&gt;</code>为交换环，否则称为非交换环。</p></li></ol><h2 id="格与布尔代数"><a href="#格与布尔代数" class="headerlink" title="格与布尔代数"></a>格与布尔代数</h2><h3 id="格"><a href="#格" class="headerlink" title="格"></a>格</h3><p><strong>任意两个元素都有上、下确界，把具体这种性质的偏序集称为格</strong></p><h2 id="图论初步"><a href="#图论初步" class="headerlink" title="图论初步"></a>图论初步</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><p>定义：一个图G是一个二元组<code>&lt;V,E&gt;</code>，简记<code>G = &lt;V,E&gt;</code>，其中V是一个<strong>非空</strong>的结点集合，E是边的集合</p><p>有向边的关系序偶用<code>&lt;x,y&gt;</code>表示，无向边的关系序偶用<code>(x,y)</code>表示</p><h5 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h5><ul><li>孤立点：不与任何结点邻接的结点称为孤立点（就是只有一个点，没边）</li><li>零图：全由孤立点构成的图（就是这个图就只有点，没有边）</li><li>平凡图：一阶零图（即零图的一种特殊情况，只有一个点）</li><li>有向图：每一条边都是有向边的图</li><li>无向图：每一条边都是无向边的图</li><li>混合图：既有有向边，又有无向边的图</li><li>基础图：将有向图中的有向边的方向去掉，就得到一个无向图，则称得到的无向图为这个有向图的基础图</li><li>度：结点所关联的边数称为度d(v)<ul><li>如果无向图中有自回路则一个回路算2度</li><li>出度：d+(v)，<code>+</code>是上标，有向图中分为出度和入度，有多少边出去则有多少出度</li><li>入度：d-(v)，<code>-</code>是上标，有多少边进来则有多少入度</li></ul></li><li>奇结点：度数为基数的结点</li><li>偶结点：度数为偶数的结点</li><li>子图：结点集合包含于原图结点集合，边的集合包含于原图边的集合</li><li>生成子图：（支撑子图）结点集合等于原图结点集合，边的集合包含与原图边的集合</li><li>导出子图：以图G的顶点集V的非空子集V1为顶点集，以两端点均在V1中的全体边为边集的G的子图，称为V1导出的导出子图</li><li>完全图：（无向完全图）任意两个不同结点都是相邻接的，具有n个结点的完全图记作Kn（n为下标）</li></ul><h5 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h5><ol><li>如果无向图有<strong>m</strong>条边，那么它的总度数为<strong>2m</strong>度</li><li>无向图中奇结点的个数必须为<strong>偶数</strong>个</li><li>有向图的<strong>总出度 &#x3D; 总入度 &#x3D; 边数</strong></li><li><strong>最大度数 &lt;&#x3D; 结点数-1</strong></li></ol><h3 id="图的连通性"><a href="#图的连通性" class="headerlink" title="图的连通性"></a>图的连通性</h3><h5 id="路与回路"><a href="#路与回路" class="headerlink" title="路与回路"></a>路与回路</h5><p>路中边的数目n称为该路的长度</p><p>若路的始点与终点相同，则称为回路</p><p>如果路中所有边互不相同，则称为<strong>迹（或简单路）</strong>，若回路中的所有边互不相同，则称为<strong>简单回路</strong></p><p>如果路中所有结点互不相同（当然所有边也互不相同），则称为<strong>初级路（或基本路）</strong>，如果为回路的话，则为<strong>初级回路（或圈或基本回路）</strong></p><h3 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">设图D＝&lt;V，E&gt;，其中V＝｛v1,v2,v3,v4｝，E＝｛&lt;v¬1,v2&gt;, &lt;v¬2,v3&gt;, &lt;v¬2,v4&gt;, &lt;v3,v2&gt;, &lt;v¬3,v4&gt;, &lt;v¬3,v1&gt;, &lt;v4,v1&gt;｝</span><br><span class="line">邻接矩阵如下，表示结点到结点有多少条长度为1的路径，则可以使用邻接矩阵求出度序列与入度序列</span><br><span class="line"><span class="built_in">_</span><span class="built_in">_</span>            <span class="built_in">_</span><span class="built_in">_</span></span><br><span class="line">|  0  1  0  0  |</span><br><span class="line">|  0  0  1  1  |</span><br><span class="line">|  1  1  0  1  |</span><br><span class="line">|  1  0  0  0  |</span><br><span class="line"><span class="built_in">_</span><span class="built_in">_</span>            <span class="built_in">_</span><span class="built_in">_</span></span><br><span class="line">出度序列：1,2,3,1</span><br><span class="line">入度序列：2,2,1,2</span><br><span class="line">度序列：3,4,4,3</span><br></pre></td></tr></table></figure><h4 id="可达性矩阵"><a href="#可达性矩阵" class="headerlink" title="可达性矩阵"></a>可达性矩阵</h4><p>首先求出n阶图的邻接矩阵，然后再求邻接矩阵的次方，如是m次方则代表结点到结点有多少条长度为m的路径，最多求到n次方就会循环</p><p>此时将各个邻接矩阵的次方相加，如果元素不为0则变为1，得到的元素只有0,1的矩阵就是可达性矩阵，1表示可达，0表示不可达</p><h3 id="欧拉图和哈密顿图"><a href="#欧拉图和哈密顿图" class="headerlink" title="欧拉图和哈密顿图"></a>欧拉图和哈密顿图</h3><h4 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h4><h5 id="名词概念-1"><a href="#名词概念-1" class="headerlink" title="名词概念"></a>名词概念</h5><ul><li><p>欧拉路：每条边走一次的路</p></li><li><p>欧拉回路：每条边走一次并且回到原点的路</p></li></ul><p>定义：<strong>具有欧拉回路的图称为欧拉图</strong></p><h5 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a><strong>定理</strong></h5><ol><li>无向图G具有一条欧拉路当且仅当G是连通的并且有零个或2个奇结点</li><li>一个无向图是欧拉图的充要条件是该图是<strong>连通的</strong>并且它的<strong>结点全是偶结点</strong></li></ol><h4 id="哈密顿图"><a href="#哈密顿图" class="headerlink" title="哈密顿图"></a>哈密顿图</h4><p>哈密顿路：把图中每个结点走一次且仅走一次的路</p><p>哈密顿回路：把图中每个结点走一次且仅走一次能够回到出发结点的路</p><p><strong>具有哈密顿回路的图称为哈密顿图</strong></p><p><strong>n阶图（n&gt;&#x3D;3）中每一对不相邻的结点的度的和都&gt;&#x3D;n，则为哈密顿图</strong></p><p><strong>n阶图（n&gt;&#x3D;3）中每一对结点的度的和都&gt;&#x3D;n-1，则存在一条哈密顿路，如果每一对结点的度的和&gt;&#x3D;n，则存在一条哈密顿回路</strong></p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p><strong>一个连通无回路的无向图称为无向树，简称树，记为T</strong></p><p><strong>树中度数为1的结点称为树叶；度数大于1的结点称为分支点（内部结点）</strong></p><p><code>m = n - 1</code>，树的 边数 等于 节点数-1</p><h3 id="平面图与欧拉公式"><a href="#平面图与欧拉公式" class="headerlink" title="平面图与欧拉公式"></a>平面图与欧拉公式</h3><h4 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h4><p><strong>设G是一个连通平面图，则有</strong><code>n - m + r = 2</code>，其中<code>n,m,r</code>分别是图G的<strong>结点数、边数、面数</strong></p><h3 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h3>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型语言模型ChatGPT使用教程</title>
      <link href="/2023/02/10/register/chatgpt/"/>
      <url>/2023/02/10/register/chatgpt/</url>
      
        <content type="html"><![CDATA[<h1 id="ChatGPT注册与使用"><a href="#ChatGPT注册与使用" class="headerlink" title="ChatGPT注册与使用"></a>ChatGPT注册与使用</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近国外的一个大型语言模型<a href="https://openai.com/blog/chatgpt/">ChatGPT</a>非常火，但是却不对中国用户开放。</p><p>那么它能能干吗呢，来看看它自己的回答：</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211162527685.png" alt="image-20230211162527685"></p><p>如果你想体验这个强大的AI聊天机器人，那么需要以下技能：</p><ol><li>会使用<em>魔法</em></li><li>拥有国外手机号</li></ol><p>如果都没有，那么也没有关系，咱们现学。</p><h2 id="内容在这儿"><a href="#内容在这儿" class="headerlink" title="内容在这儿"></a>内容在这儿</h2><p>步骤原理都是一样的，只是不同的平台实际操作起来有些不一样，这里以Windows为例：</p><h3 id="学习魔法"><a href="#学习魔法" class="headerlink" title="学习魔法"></a>学习<em>魔法</em></h3><p>这个不敢说太详细，可以自己<a href="https://cn.bing.com/">bing一下</a></p><p><a href="https://clashforwindows.org/">Clash for Windows 教程</a></p><h3 id="接码平台"><a href="#接码平台" class="headerlink" title="接码平台"></a>接码平台</h3><p>使用接码平台代替<strong>拥有国外手机号</strong>的技能，虽然能够让我们的账号绑定手机号，但是这个手机号并不属于我们，如果介意可以换其他的方法。</p><p>我这里使用的是<a href="https://sms-activate.org/#">sms-activate国外接码平台</a>，最近的服务好像在涨价，所以要注册就快一点。</p><h4 id="充值"><a href="#充值" class="headerlink" title="充值"></a>充值</h4><p>此网站目前不需要<em>魔法</em>，进入网站后进行注册，完成登录后依次点击<strong>余额下的数字-&gt;充值-&gt;支付宝-&gt;应付金额</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211180609210.png" alt="image-20230211180609210"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211180814034.png" alt="下拉找到支付宝"></p><p>目前最低充值金额为1美元，大概7块的样子，就充1美元就行了，点击支付，然后用支付宝扫码支付，余额没变就刷新一下网页，或者等待一下</p><h4 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h4><p>我们需要注册OpenAI的账号，在主页搜索OpenAI服务</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211181413853.png" alt="image-20230211181413853"></p><p>点击搜索出来的OpenAI服务，然后根据你想绑定哪个国家的手机号选择国家，这里我选的目前最便宜的国家<em>印度尼西亚</em>，直接点击它旁边的购物车图标就能购买了</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211181832036.png" alt="image-20230211181832036"></p><p>购买后会出现在<em>激活</em>里面，有20分钟的有效时间，所以我们需要快一点注册，如果注册中号码有问题可以点击<code>x</code>按钮删除，然后重新购买，不会产生费用</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211182257151.png" alt="image-20230211182257151"></p><h3 id="官网注册"><a href="#官网注册" class="headerlink" title="官网注册"></a>官网注册</h3><p>万事具备，接下来我们就能安心注册了</p><p>首先将代理软件关闭，然后进入这个链接地址<a href="https://chat.openai.com/">TRY CHATGPT</a>，会出现以下画面，如果不是这个画面就多刷新一下</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211182652109.png" alt="image-20230211182652109"></p><p>点击<em>Sign up</em>进行注册，输入你的邮箱地址，然后点击<em>Continue</em></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211182831810.png" alt="image-20230211182831810"></p><p>然后输入你的自定义密码，再次点击<em>Continue</em>，成功之后会出现以下界面，然后让你验证你的邮箱，点击邮件里的验证链接</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211183233560.png" alt="image-20230211183233560"></p><p>然后刷新页面，会提示不支持你的国家，内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Not available</span><br><span class="line">OpenAI&#x27;s services are not available in your country.</span><br></pre></td></tr></table></figure><p>这个时候就需要用到<em>魔法</em>了，打开代理软件，开启全局代理，选择国外节点，我这里选择的是日本</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211184856949.png" alt="image-20230211184856949"></p><p>然后到浏览器页面按<code>F12</code>打开开发者控制台，输入<code>window.localStorage.removeItem(Object.keys(window.localStorage).find(i=&gt;i.startsWith(&#39;@@auth0spajs&#39;)))</code>这串神秘代码，回车</p><p>如果是手机浏览器，那么改为在地址栏输入<code>javascript:window.localStorage.removeItem(Object.keys(window.localStorage).find(i=&gt;i.startsWith(&#39;@@auth0spajs&#39;)))</code>，注意这里的<code>javascript:</code>不能复制，只能手动输入</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211185250990.png" alt="image-20230211185250990"></p><p>刷新网页后出现一个填名字的页面，随便填好后点击<code>Continue</code>，出现以下画面</p><p>选择在接码平台购买服务对应的国家，然后填入复制好的手机号，点击<code>Send code</code> via SMS发送验证码</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211185843163.png" alt="image-20230211185843163"></p><p>如果出现爆红，或者是收不到验证码，那么估计是手机号的问题，按照上小节的说法，删除重新购买就行了，然后重新填入新的手机号，再次验证</p><p>这个还是得看运气，我重新购买了很多次才成功，将收到的验证码填入到注册页面中就行了</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211190545806.png" alt="image-20230211190545806"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211190617797.png" alt="image-20230211190617797"></p><p>这个时候会发现我们的网页一直在加载，关掉网页，并且关掉代理软件，重新进入<a href="https://chat.openai.com/auth/login">登录页面</a></p><p>点击<em>Log in</em>，输入邮箱后点击<em>Continue</em>，输入密码后点击<em>Continue</em>，然后就会出现一个警号，内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Oops!</span><br><span class="line">OpenAI&#x27;s services are not available in your country. (error=unsupported<span class="built_in">_</span>country)</span><br><span class="line">Go back</span><br></pre></td></tr></table></figure><p>打开代理软件，需要全局模式，我这里用的是日本节点</p><p>在此网页再次使用神秘代码<code>window.localStorage.removeItem(Object.keys(window.localStorage).find(i=&gt;i.startsWith(&#39;@@auth0spajs&#39;)))</code>，操作与上一次一样</p><p>然后在此网页回退到登录的页面（有<em>Log in</em>按钮的那个页面）重新登录一下，然后就登录成功了！</p><p>这时候我们就可以将代理软件关闭，并且之后也不用使用了，除非需要重新登录。</p><p>开始有ChatGPT介绍弹窗，点击<em>Next</em>，最后点击<em>Done</em>就行了。</p><p>PS: 关闭代理后刷新一下网页</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211192138267.png" alt="image-20230211192138267"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/register/chatgpt/image-20230211192521358.png" alt="image-20230211192521358"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本片博文参考的博文有：</p><ul><li><a href="https://www.cnblogs.com/chatgpt/p/how-to-register-chatgpt-in-china.html">如何注册 ChatGPT ：最新手把手亲测可用教程 - chatgpt - 博客园</a></li><li><a href="https://cloud.tencent.com/developer/article/2190198#:~:text=%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%20%E5%87%BA%E7%8E%B0OpenAI%E2%80%99s%20services%20are%20not%20available%20in,your%20country%20%E9%94%99%E8%AF%AF%E4%B8%BB%E8%A6%81%E6%98%AF%E5%9C%B0%E5%8C%BA%E4%B8%8D%E5%85%81%E8%AE%B8%E5%AF%BC%E8%87%B4%EF%BC%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%A6%82%E4%B8%8B%201.%E9%9C%80%E8%A6%81%E4%BD%A0%E5%BC%80%E5%90%AF%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BB%A5%E6%98%AF%E9%A6%99%E6%B8%AF%E7%9A%84%E4%BB%A3%E7%90%86%EF%BC%8C%E9%A6%99%E6%B8%AF%E7%9A%84%E4%BB%A3%E7%90%86%E6%98%AF%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%202.%E5%BB%BA%E8%AE%AE%E5%88%87%E6%8D%A2%E5%88%B0%E9%9F%A9%E5%9B%BD%EF%BC%8C%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%203.%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%20%E5%A4%8D%E5%88%B6%E4%B8%8B%E9%9D%A2%E8%BF%99%E8%A1%8C%E4%BB%A3%E7%A0%81">OpenAI‘s services are not available in your country 完美解决方案 - 腾讯云开发者社区-腾讯云</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 注册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL绿色版下载与配置</title>
      <link href="/2023/01/23/configure-software/mysql5-7/"/>
      <url>/2023/01/23/configure-software/mysql5-7/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL5-7绿色版下载与配置"><a href="#MySQL5-7绿色版下载与配置" class="headerlink" title="MySQL5.7绿色版下载与配置"></a>MySQL5.7绿色版下载与配置</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/mysql-5.7.36-winx64.zip">MySQL5.7 Windows64位解压版下载链接</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Windows11"><a href="#Windows11" class="headerlink" title="Windows11"></a>Windows11</h3><p>将下载好的压缩包解压到你想安装的路径下</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建<code>my.ini</code>配置文件，可以按照我给的例子，需修改路径为你MySQL解压的路径，<strong>路径分割一定要用双斜线，否则可能会出错</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span> <span class="comment"># MySQL端口号</span></span><br><span class="line"><span class="attr">basedir</span>=E:\\software-for-support\\mysql-<span class="number">5.7</span>.<span class="number">36</span>-winx64 <span class="comment"># MySQL的安装目录</span></span><br><span class="line"><span class="attr">datadir</span>=E:\\software-for-support\\mysql-<span class="number">5.7</span>.<span class="number">36</span>-winx64\\data <span class="comment"># 数据存放目录</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span> <span class="comment"># 允许的最大连接数</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span> <span class="comment"># 允许连接失败的次数</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4 <span class="comment"># 服务端使用的默认字符集</span></span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mbr <span class="comment"># 客户端使用的默认字符集</span></span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span> <span class="comment"># 客户端默认端口号</span></span><br><span class="line"><span class="attr">default-character-set</span> = utf8mb4</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>使用<strong>管理员</strong>打开<code>cmd</code>命令窗口，并进入到MySQL根目录下的<code>bin</code>目录，键入<code>mysqld --initialize </code>，根据配置文件初始化数据库</p><p>如果提示<strong>xxx.dll文件缺失</strong>，请使用<strong>DirectX</strong>程序修复一下，一般都能够解决</p><p>如果没有这个程序，可以<a href="https://pan.baidu.com/s/1_FrBFET1I40MlDM4NS_kIA">点击此链接</a>进行下载，提取码<strong>8888</strong>，解压后运行<code>.exe</code>的那个文件点击修复就行了</p><p>然后重新键入<code>mysqld --initialize</code>，运行成功后不会出现任何提示</p><h5 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h5><p>依旧使用<strong>管理员</strong>打开<code>cmd</code>命令窗口，并进入到MySQL根目录下的<code>bin</code>目录，键入<code>mysqld --install</code>命令安装mysql服务</p><p>安装成功会提示：<strong>Service successfully installed</strong></p><h5 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h5><p>使用<strong>管理员</strong><code>cmd</code>窗口开关<strong>mysql服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ net start mysql <span class="comment"># 开启mysql服务</span></span><br><span class="line">$ net stop mysql <span class="comment"># 关闭mysql服务</span></span><br></pre></td></tr></table></figure><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><p>要想在所有目录都能使用mysql命令，那么需要将mysql命令添加到<code>Path</code>中</p><p><strong>此电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量-&gt;系统变量-&gt;新建</strong>，增加<code>MYSQL_HOME</code>环境变量，值为你MySQL的根目录</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/mysql5-7/image-20230123210627037.png" alt="image-20230123210627037"></p><p>再修改<code>Path</code>环境变量，添加新值<code>%MYSQL_HOME%/bin</code>，如果编辑时不是列表形式则在值的行尾添加<code>;%MYSQL_HOME%/bin</code></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/mysql5-7/image-20230123210914192.png" alt="image-20230123210914192"></p><p>依次点击确定，直到退出编辑</p><h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><p>在初始化MySQL时会为root生成一个默认的密码，存放在<code>my.ini</code>中设置的<code>data</code>文件夹下的后缀为<code>.err</code>的文件中</p><p>文件名称为你的计算机名（不知道你的是不是，反正我的是），后缀为<code>.err</code>（应该就一个文件的后缀是这个）</p><p>进入文件搜索关键字：<strong>A temporary password is generated for root@localhost</strong>，应该就能找到了，我的格式如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-01-23T12:48:17.108409Z 1 [Note] A temporary password is generated for root@localhost: H<span class="comment">%NHtLwNs6mi</span></span><br></pre></td></tr></table></figure><p>密码就是最后那串莫名其妙的字符<strong>H%NHtLwNs6mi</strong></p><p>打开一个<code>cmd</code>命令窗口，键入<code>mysql -uroot -p</code>回车，再输入你的随机密码，就能进入MySQL数据库系统了</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/mysql5-7/image-20230123211737735.png" alt="image-20230123211737735"></p><p>通过<code> ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;xxxxxx&#39;;</code>语句来修改root的密码，其中<strong>xxxxxx</strong>为你需要修改的密码</p><p>提示**Query OK, 0 rows affected (0.00 sec)**，则表示修改成功，键入<code>\quit</code>退出系统，重新键入<code>mysql -uroot -p</code>，再加上你修改的密码，就能进入系统啦</p><h5 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h5><p>使用<strong>root</strong>账户，执行<code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</code>命令以创建新用户</p><p>例：<code>CREATE USER &#39;manager&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</code></p><h5 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h5><p>创建数据库并指定字符集（其实不用指定，因为在<code>my.ini</code>中就已经指定了默认字符集）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE test DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>其中<strong>test</strong>表示数据库名称</p><p>将<strong>test</strong>数据库中所有表的所有权限都授权给<strong>manager</strong>用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON test.* TO &#x27;manager&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><p>以<strong>manager</strong>身份登录MySQL就能看到<strong>test</strong>数据库以及它下面的所有表了</p>]]></content>
      
      
      <categories>
          
          <category> 软件配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL5.7 </tag>
            
            <tag> 绿色解压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven3.6绿色解压版下载与配置</title>
      <link href="/2023/01/22/configure-software/maven/"/>
      <url>/2023/01/22/configure-software/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven3-6绿色解压版下载与配置"><a href="#Maven3-6绿色解压版下载与配置" class="headerlink" title="Maven3.6绿色解压版下载与配置"></a>Maven3.6绿色解压版下载与配置</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在安装前应安装好JDK（1.7及以上版本）并配置好环境变量，可以看博主之前写的文章<a href="/2023/01/22/configure-software/jdk8/" title="JDK1.8绿色解压版安装教程">JDK1.8绿色版下载及配置</a></p><p>到<a href="https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/">官网历史版本库</a>下载<strong>maven</strong>，这里是<code>3.6.3</code>的版本</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Windows11"><a href="#Windows11" class="headerlink" title="Windows11"></a>Windows11</h3><p>将下载好的zip文件解压后，里面还有一个文件夹，将此文件夹剪切到你想安装maven的路径下</p><p>如图，我粘贴在了<code>E:\software-for-support</code>这个目录下</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/maven/image-20230122205902234.png" alt="image-20230122205902234"></p><p>将maven命令放到<code>Path</code>环境变量下</p><p>新建<code>MAVEN_HOME</code>系统环境变量，变量值为<code>E:\software-for-support\apache-maven-3.6.3</code></p><p><strong>此电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量-&gt;系统变量-&gt;新建</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/maven/image-20230122210252337.png" alt="image-20230122210252337"></p><p>修改<code>Path</code>环境变量，增加一行值为<code>%MAVEN_HOME%\bin</code>，如果编辑时不是列表形式，则在值的行尾添加<code>;%MAVEN_HOME%\bin</code></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/maven/image-20230122210548032.png" alt="image-20230122210548032"></p><p>设置好后依次点击确定，直到退出编辑</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><code>win+r</code>键入<code>cmd</code>打开命令行窗口，输入<code>mvn -v</code>，看是否打印版本信息</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/maven/image-20230122210746985.png" alt="image-20230122210746985"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><p>由于maven默认是从中央仓库下载第三方jar包的，所以会有些慢，可以配置第三方的maven镜像仓库</p><p>编辑maven配置文件<code>maven安装目录\conf\settings.xml</code>，建议在编辑前备份一份儿，方便后期重置，然后进行修改</p><p>在xml配置文件中找到<code>mirrors</code>节点，添加以下子节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里镜像源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><p>找到<code>settings</code>节点，在其下添加<code>localRepository</code>子节点，并键入你想要存放远程仓库下载的第三方包的位置</p><p>我的位置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:/software-for-support/appdata/maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK1.8绿色解压版安装教程</title>
      <link href="/2023/01/22/configure-software/jdk8/"/>
      <url>/2023/01/22/configure-software/jdk8/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK1-8绿色版下载及配置"><a href="#JDK1-8绿色版下载及配置" class="headerlink" title="JDK1.8绿色版下载及配置"></a>JDK1.8绿色版下载及配置</h1><h2 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h2><h3 id="Windows64位"><a href="#Windows64位" class="headerlink" title="Windows64位"></a>Windows64位</h3><p><a href="https://pan.baidu.com/s/1DnGEq2b_GaDfHorAm8ScmQ">百度网盘链接</a><br>提取码：<strong>8888</strong></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Windows11"><a href="#Windows11" class="headerlink" title="Windows11"></a>Windows11</h3><p>将下载好的zip文件解压缩，放到你想安装的路径下</p><p><strong>此电脑</strong>（右键）-&gt;<strong>属性</strong>-&gt;<strong>高级系统设置</strong>-&gt;<strong>高级</strong>-&gt;<strong>环境变量</strong>-&gt;<strong>系统变量</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122102428336.png" alt="image-20230122102428336"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122102616141.png" alt="image-20230122102616141"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122102806311.png" alt="image-20230122102806311"></p><p>新建<code>JAVA_HOME</code>系统变量，值为JDK解压根目录，例如我这里是<code>E:\software-for-support\jdk-8u351</code></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122103039476.png" alt="image-20230122103039476"></p><p>新建<code>CLASHPATH</code>系统变量，值为<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122103227110.png" alt="image-20230122103227110"></p><p>修改<code>Path</code>系统变量，在末尾增加新值<code>%JAVA_HOME%\bin</code>，如果不是列表形式添加，只有一行的话就在该行末尾增加<code>;%JAVA_HOME%\bin</code></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122103505071.png" alt="image-20230122103505071"></p><p>依次点击确定，知道退出所有编辑框，<code>win+r</code>打开<code>cmd</code>命令行进行验证</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>依次输入<code>java -version</code>与<code>javac -version</code>看是否出现版本号</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122103858354.png" alt="image-20230122103858354"></p><p>可以编写一个HelloWorld程序看是否能够编译运行</p><p>新建<code>HelloWorld.java</code>文件，使用记事本打开并编写如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>cmd</code>打开并进入到该文件所在的目录</p><p>输入<code>javac HelloWorld.java</code>命令进行编译，此时会生成<code>HelloWorld.class</code>二进制文件</p><p>输入<code>java HelloWorld</code>命令运行生成的二进制文件，在屏幕打印出<code>Hello World!</code>表示配置成功</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/jdk8/image-20230122104646184.png" alt="image-20230122104646184"></p>]]></content>
      
      
      <categories>
          
          <category> 软件配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
            <tag> Java </tag>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware多台虚拟机网络配置</title>
      <link href="/2023/01/20/configure-software/vmware-network-linux/"/>
      <url>/2023/01/20/configure-software/vmware-network-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware17pro多台linux虚拟机网络配置"><a href="#VMware17pro多台linux虚拟机网络配置" class="headerlink" title="VMware17pro多台linux虚拟机网络配置"></a>VMware17pro多台linux虚拟机网络配置</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>使用NAT模式默认就能互通，我不能互通是因为不知道自己干过什么，然后重装系统，重装虚拟机就好了</strong></p><p>第一次在物理机配置多台虚拟机，其中很多道理不清楚，只知道这样就能用了</p><p>本次案例能够使本地linux虚拟机访问外网并且能够互相访问，物理机也能够与虚拟机互相访问</p><h3 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h3><p><a href="https://zhuanlan.zhihu.com/p/585286548">VMware17pro学习用激活码</a></p><p><a href="https://blog.csdn.net/forest_black/article/details/124308104?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-124308104-blog-120212253.pc_relevant_landingrelevant&spm=1001.2101.3001.4242.1&utm_relevant_index=3">为VMware的多台虚拟机配置静态ip和联网</a></p><p><a href="https://blog.csdn.net/weixin_43705953/article/details/120212253">VM多台虚拟机网络设置</a></p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation Pro 17</a></p><p><a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/?spm=a2c6h.25603864.0.0.5ecdf5admRdl1z">CentOS7 阿里镜像源</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="VMware-Workstation-Pro-17"><a href="#VMware-Workstation-Pro-17" class="headerlink" title="VMware Workstation Pro 17"></a>VMware Workstation Pro 17</h3><p>可能因为我的电脑是windows11专业工作站版，在安装时有个选项，好像是关于super-v的选项，这里打上勾</p><ul><li><input checked="" disabled="" type="checkbox"> <strong>自动安装 Windows Hypervisor Platform （WHP）</strong></li></ul><h3 id="安装CentOS7"><a href="#安装CentOS7" class="headerlink" title="安装CentOS7"></a>安装CentOS7</h3><p><a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/?spm=a2c6h.25603864.0.0.5ecdf5admRdl1z">CentOS7 阿里镜像源</a></p><p>随便找个教程安装就行，网络适配器模式设置为NAT模式</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>依次按照<strong>编辑</strong>-&gt;<strong>虚拟网络编辑器</strong>-&gt;<strong>VMnet8</strong>-&gt;<strong>NAT设置</strong>查看网关</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure-software/vmware-network-linux/image-20230120211827978.png" alt="image-20230120211827978"></p><p>例如我这里就是<code>192.168.232.2</code>，记住这个IP地址</p><p>使用以下命令编辑网络配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-ens33  </span><br></pre></td></tr></table></figure><p>更改以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">static</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">yes</span></span><br></pre></td></tr></table></figure><p>增加以下内容，这里我自定义虚拟机的局域网地址为<code>192.168.2.10</code>，网关就设置之前我们在<strong>NAT</strong>记下的网关</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">IPADDR</span>=<span class="string">192.168.2.10</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">255.255.255.0</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">192.168.232.2</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">114.114.114.114</span></span><br></pre></td></tr></table></figure><p>设置好以后保存并退出编辑，输入以下命令重启网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service network restart</span><br></pre></td></tr></table></figure><p>使用命令ping一下<code>www.baidu.com</code>，看是否能够ping通</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>开启对应端口才能够让物理机访问虚拟机，否则只能够虚拟机访问物理机</p><p>CentOS7常用防火墙命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status firewalld <span class="comment"># 查看防火墙状态</span></span><br><span class="line">$ systemctl start firewalld <span class="comment"># 开启防火墙</span></span><br><span class="line">$ systemctl stop firewalld <span class="comment"># 关闭防火墙</span></span><br><span class="line">$ firewall-cmd --zone=public --list-ports <span class="comment"># 查看所有打开的端口</span></span><br><span class="line">$ firewall-cmd --zone=public --add-port=80/tcp --permanent <span class="comment"># 开放80端口</span></span><br><span class="line">$ firewall-cmd --zone=public --remove-port=80/tcp --permanent <span class="comment"># 关闭80端口</span></span><br><span class="line">$ firewall-cmd --reload <span class="comment"># 配置立即生效</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> centos </tag>
            
            <tag> network </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Mybatis</title>
      <link href="/2023/01/04/configure/spring-boot-mybatis/"/>
      <url>/2023/01/04/configure/spring-boot-mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用Intellij IDEA快速创建SpringBoot项目</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-boot-mybatis/image-20230104172223592.png" alt="image-20230104172223592"></p><p>选择springboot版本号，并且勾选MyBatis与MySQL驱动</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-boot-mybatis/image-20230104183449780.png" alt="image-20230104183449780"></p><h2 id="配置MyBatis"><a href="#配置MyBatis" class="headerlink" title="配置MyBatis"></a>配置MyBatis</h2><p>SpringBoot项目配置MyBatis特别简单，只需要在配置文件中填写所需的连接信息就行了</p><p>在<code>application.yml</code>配置文件中添加连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">manager</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mk123456</span></span><br></pre></td></tr></table></figure><p>这样就配置完成了，是不是非常简单</p><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>创建一个用户装载数据库中的表的数据的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/01/04 18:45:13</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name, String gender, Integer age, String phone, Date birthday, Double balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(Double balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建持久层访问类"><a href="#创建持久层访问类" class="headerlink" title="创建持久层访问类"></a>创建持久层访问类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.main.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户持久层访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/01/04 18:55:06</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让Mybatis知道这是一个持久层访问的接口，并且交给SpringBoot管理</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建服务类"><a href="#创建服务类" class="headerlink" title="创建服务类"></a>创建服务类</h2><p>创建服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.main.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户服务接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/01/04 18:51:37</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现服务类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.example.main.User;</span><br><span class="line"><span class="keyword">import</span> com.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户服务类接口实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/01/04 18:53:40</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建持久层访问接口"><a href="#创建持久层访问接口" class="headerlink" title="创建持久层访问接口"></a>创建持久层访问接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.main.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户持久层访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/01/04 18:55:06</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让Mybatis知道这是一个持久层访问的接口，并且交给SpringBoot管理</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/01/04 19:00:17</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(userService.getAllUsers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果输出正确，表示配置成功</p>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot多环境配置文件</title>
      <link href="/2023/01/04/configure/spring-boot-3/"/>
      <url>/2023/01/04/configure/spring-boot-3/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot多环境配置文件方案"><a href="#SpringBoot多环境配置文件方案" class="headerlink" title="SpringBoot多环境配置文件方案"></a>SpringBoot多环境配置文件方案</h1><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>在<code>/src/main/resources/</code>下创建配置文件<code>application.yml</code>，写入以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>如果使用<code>spring.profiles</code>的话会提示已过时，可以使用<code>spring.config.activate.on-profile</code>来代替</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><h2 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h2><p>在<code>/src/main/resources/</code>下创建配置文件<code>application.properties</code>，写入以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置启用的环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><p>如果在<code>application.properties</code>配置的是dev，那么就会在<code>/src/main/resources/</code>下找<code>application-dev.properties</code>这个配置文件</p><p>创建<code>application-dev.properties</code>配置文件，写入以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure><p>如果有其他环境，创建对应的<code>application-xxx.properties</code>配置文件，然后再在<code>application.properties</code>主配置文件中配置就行了</p><h2 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h2><p>如果每次更改环境就将配置文件更改一次然后重新编译项目，这是非常麻烦的</p><p>使用maven打包为jar包后，只需要在运行命令中添加参数就能够更改项目的运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar xxx.jar --spring.profiles.active=<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>并且不是只能使用一个参数，可以使用很多个参数，这样就可以修改很多的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar xxx.jar --spring.profiles.active=<span class="built_in">test</span> --server.port=88</span><br></pre></td></tr></table></figure><h2 id="maven环境"><a href="#maven环境" class="headerlink" title="maven环境"></a>maven环境</h2><p>当然，maven也有多环境配置，并且maven的配置优先级还高一些，因为jar包是由maven来打包的</p><p>在<code>pom.xml</code>中的<code>build</code>节点和<code>profiles</code>节点配置以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test-03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-test-03<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>spring-boot-test-03<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- springboot打包插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 将maven中的变量引用到配置文件中的插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用默认分隔符，不太清楚什么意思 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置配置变量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置为默认配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置配置变量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置配置变量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>pom.xml</code>配置好后，还需要在yaml中配置我们定义好的变量，使用<code>$&#123;&#125;</code>即可引用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">$&#123;profile.active&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><h2 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h2><p>具体优先级可到官网进行查看</p><p>以下列出我目前已知的优先级（自上而下，优先级由高到低）</p><ol><li><p>运行打包好的jar的命令所携带的参数</p></li><li><p>在打包好的jar包的同级目录创建一个<code>config</code>目录在目录中添加的配置文件</p></li><li><p>在打包好的jar包的同级目录创建的配置文件</p></li><li><p>在项目源代码<code>/src/main/resources/config</code>目录下创建的配置文件</p></li><li><p>在项目源代码<code>/src/main/resources</code>目录下创建的配置文件</p></li></ol><p>具体的优先级如上，文件优先级如下（从左到右，优先级由高到低）</p><p><code>application.properties</code> -&gt; <code>application.yml</code> -&gt; <code>application.yaml</code></p><h3 id="四级配置文件"><a href="#四级配置文件" class="headerlink" title="四级配置文件"></a>四级配置文件</h3><p>SpringBoot中分为4级配置文件（自上而下，优先级由高到低）</p><ol><li>file: config&#x2F;application.yml</li><li>file: application.yml</li><li>classpath: config&#x2F;application.yml</li><li>classpath: application.yml（Intllij IDEA中创建的配置文件，默认就是这级配置文件，优先级最低）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> yaml </tag>
            
            <tag> profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot配置文件</title>
      <link href="/2022/12/29/configure/spring-boot-2/"/>
      <url>/2022/12/29/configure/spring-boot-2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><h2 id="配置文件类型"><a href="#配置文件类型" class="headerlink" title="配置文件类型"></a>配置文件类型</h2><p>主要有两种，分别为<strong>properties</strong>格式的和<strong>yaml</strong>格式的</p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>此配置文件注重格式，不同等级使用<code>.</code>分割，如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br><span class="line"><span class="attr">server.xxx.xxx</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">server.xxx.xxx.xxx</span>=<span class="string">xxx</span></span><br></pre></td></tr></table></figure><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>此配置文件后缀分为两种，一种是以<code>.yml</code>结尾，较为常用，一种是以<code>.yaml</code>结尾，他们的格式都是一样的，只是文件后缀不一样</p><p>此配置文件的格式注重数据，以空格<code> </code>分级，空格不限次数，建议使用两个空格分级，案例如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">school:</span> <span class="string">&quot;成都工业学院&quot;</span></span><br><span class="line">  <span class="attr">clazz:</span> <span class="string">&quot;软件工程22级专升本1班&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;马某人&quot;</span></span><br><span class="line">  <span class="attr">phone:</span> <span class="string">&quot;19960798888&quot;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">hobbies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;跑步&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;骑自行车&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;狂吃一顿&quot;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot读取YAML配置文件"><a href="#SpringBoot读取YAML配置文件" class="headerlink" title="SpringBoot读取YAML配置文件"></a>SpringBoot读取YAML配置文件</h2><p>首先SpringBoot默认会去读取项目根目录下<code>src/main/resources</code>目录下的<code>application.properties</code>，<code>application.yml</code>，<code>application.yaml</code>这三个配置文件</p><p>并且优先级按从左到右依次降低，SpringBoot读取YAML配置文件分为三种方法</p><h3 id="使用value注解获取"><a href="#使用value注解获取" class="headerlink" title="使用value注解获取"></a>使用value注解获取</h3><p>在类中直接使用<code>@value</code>注解来获取，使用<code>$&#123;&#125;</code>来获取YAML中的数据，案例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;student.hobbies[0]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String hobbit;</span><br></pre></td></tr></table></figure><h3 id="使用Environment对象获取"><a href="#使用Environment对象获取" class="headerlink" title="使用Environment对象获取"></a>使用Environment对象获取</h3><p>SpringBoot在容器中已经有了一个装了YAML中所有内容的类，类名为<code>org.springframework.core.env.Environment</code></p><p>自动注入即可，案例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/environment/student/name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonData <span class="title function_">getStudentNameByEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(<span class="number">0</span>, environment.getProperty(<span class="string">&quot;student.name&quot;</span>), <span class="string">&quot;处理成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用自定义类获取"><a href="#使用自定义类获取" class="headerlink" title="使用自定义类获取"></a>使用自定义类获取</h3><p>给需要装载数据的类打上注解，并让Spring容器进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/29 13:42:08</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 读取YAML中student节点的数据</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class="line"><span class="comment">// 交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="keyword">private</span> String clazz;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String[] hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String school, String clazz, String name, String phone, Integer age, String[] hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;school=&#x27;&quot;</span> + school + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, clazz=&#x27;&quot;</span> + clazz + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + Arrays.toString(hobbies) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(String clazz)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>光完成上面两步还不够，这时候IDEA会有警告，需要在pom配置文件中添加一个依赖坐标，就不会有警告了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/yaml/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonData <span class="title function_">getYamlStudentByDomain</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(<span class="number">0</span>, student, <span class="string">&quot;处理成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用IDEA快速创建Springboot项目</title>
      <link href="/2022/12/19/configure/spring-boot/"/>
      <url>/2022/12/19/configure/spring-boot/</url>
      
        <content type="html"><![CDATA[<h1 id="快速创建SpringBoot项目"><a href="#快速创建SpringBoot项目" class="headerlink" title="快速创建SpringBoot项目"></a>快速创建SpringBoot项目</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringBoot是Spring家族特别重要的一员，能够大大简化spring的配置。</p><p><a href="https://spring.io/projects/spring-boot">SpringBoot官网</a></p><h2 id="快速创建SpringBoot项目-1"><a href="#快速创建SpringBoot项目-1" class="headerlink" title="快速创建SpringBoot项目"></a>快速创建SpringBoot项目</h2><p>进入快速创建SpringBoot项目的<a href="https://start.spring.io/">官网</a></p><p>配置好对应的选项</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-boot/image-20221219152851678.png" alt="image-20221219152851678"></p><p>点击右侧的<code>ADD DEPENDENCIES</code>选项，添加<code>spring web</code>依赖包</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-boot/image-20221219153025959.png" alt="image-20221219153025959"></p><p>点击<code>GENERATE</code>按钮，会让你下载一个zip包，这就是我们的springboot项目</p><h2 id="使用IntelliJ-IDEA创建SpringBoot项目"><a href="#使用IntelliJ-IDEA创建SpringBoot项目" class="headerlink" title="使用IntelliJ IDEA创建SpringBoot项目"></a>使用IntelliJ IDEA创建SpringBoot项目</h2><p>当然，IDEA也为我们提供了快速创建Springboot项目的方法，用的就是上面Spring官网的接口</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-boot/image-20221219160208489.png" alt="image-20221219160208489"></p><p>选择web，点击创建</p><p>创建UserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring-boot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户控制类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/19 17:34:48</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ---&gt; &quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Spring boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击启动，控制台出现以下内容，表示启动成功</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-boot/image-20221219173925854.png" alt="image-20221219173925854"></p><p>访问<code>http://127.0.0.1:8080/user/1</code>，如果显示<strong>hello Spring boot</strong>，表示访问成功</p>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件质量保证与测试期末复习提纲</title>
      <link href="/2022/12/12/review/software-quality-assurance-and-testing/"/>
      <url>/2022/12/12/review/software-quality-assurance-and-testing/</url>
      
        <content type="html"><![CDATA[<h1 id="软件质量保证与测试期末复习提纲"><a href="#软件质量保证与测试期末复习提纲" class="headerlink" title="软件质量保证与测试期末复习提纲"></a>软件质量保证与测试期末复习提纲</h1><h2 id="第一章-软件质量和软件测试概述"><a href="#第一章-软件质量和软件测试概述" class="headerlink" title="第一章 软件质量和软件测试概述"></a>第一章 软件质量和软件测试概述</h2><h3 id="1-ISO-x2F-IEC-25010中定义的软件产品质量模型包括下列的八个质量特性（掌握）"><a href="#1-ISO-x2F-IEC-25010中定义的软件产品质量模型包括下列的八个质量特性（掌握）" class="headerlink" title="1. ISO&#x2F;IEC 25010中定义的软件产品质量模型包括下列的八个质量特性（掌握）"></a>1. ISO&#x2F;IEC 25010中定义的软件产品质量模型包括下列的八个质量特性（掌握）</h3><p>功能适应性、性能效率、兼容性、易用性、可靠性、安全性、可维护性、可移植性</p><h3 id="2-软件错误、缺陷和失效（掌握）"><a href="#2-软件错误、缺陷和失效（掌握）" class="headerlink" title="2. 软件错误、缺陷和失效（掌握）"></a>2. 软件错误、缺陷和失效（掌握）</h3><p>错误：所有人都会犯错误，发生错误的原因有很多种</p><p>缺陷：bug，因为程序有误，在软件运行时出现不正常操作，导致系统宕机、忽然终端或数据丢失等问题</p><p>失效：如果执行了存在缺陷的代码，就有可能导致失效，但不一定在所有情况下都是这样。</p><h3 id="3-软件缺陷的主要类型（掌握）"><a href="#3-软件缺陷的主要类型（掌握）" class="headerlink" title="3. 软件缺陷的主要类型（掌握）"></a>3. 软件缺陷的主要类型（掌握）</h3><p>软件未实现产品说明书要求的功能，即该有的功能没有</p><p>软件出现产品说明书指明不该出现的错误</p><p>软件实现了产品说明书未说明的功能，即出现不该有的功能</p><p>软件未实现产品说明书未明确提及但应实现的目标，即该有的隐含功能没有</p><p>软件难以理解，不好用，运行速度慢，或软件测试人员、最终用户认为软件不好</p><h3 id="4-测试和调试（掌握）"><a href="#4-测试和调试（掌握）" class="headerlink" title="4. 测试和调试（掌握）"></a>4. 测试和调试（掌握）</h3><table><thead><tr><th align="left"></th><th></th><th></th></tr></thead><tbody><tr><td align="left">项目</td><td>测试</td><td>调试</td></tr><tr><td align="left">目的</td><td>证明程序存在缺陷</td><td>定位并解决程序缺陷</td></tr><tr><td align="left">条件与结果是否已知</td><td>条件和预期结果已知，实际结果未知</td><td>内部条件未知，结果未知</td></tr><tr><td align="left">有无计划</td><td>有计划，设计测试用例</td><td>无计划，不受时间缺陷</td></tr><tr><td align="left">执行有无规程</td><td>执行有规程</td><td>执行往往靠灵感</td></tr><tr><td align="left">执行主题</td><td>测试人员执行</td><td>开发人员执行</td></tr></tbody></table><h3 id="5-动态测试和静态测试（掌握）"><a href="#5-动态测试和静态测试（掌握）" class="headerlink" title="5. 动态测试和静态测试（掌握）"></a>5. 动态测试和静态测试（掌握）</h3><ul><li>静态测试<ul><li>是指不运行被测体本身，对需求规格说明书、软件设计说明书、源程序做结构分析、流程图分析、符号执行来找错。</li><li>静态测试包括：对于程序测试，主要是测试代码是否符合相应的标准和规范。</li></ul></li><li>动态测试<ul><li>是指通过运行被测体，检查运行结果与预期结果的差异，并分析运行效率、正确性和健壮性等性能。</li></ul></li></ul><h3 id="6-测试阶段及级别：组件测试、集成测试、系统测试及验收测试（掌握）"><a href="#6-测试阶段及级别：组件测试、集成测试、系统测试及验收测试（掌握）" class="headerlink" title="6. 测试阶段及级别：组件测试、集成测试、系统测试及验收测试（掌握）"></a>6. 测试阶段及级别：组件测试、集成测试、系统测试及验收测试（掌握）</h3><ul><li>组件测试<ul><li>是指对软件中的最小可测试组件进行检查和验证。</li><li>桩模块是指模拟被测模块所调用的模块。</li><li>驱动模块是指模拟被测模块的上级模块。</li><li>驱动模块用来接收测试数据，启动被测模块并输出结果。</li></ul></li><li>集成测试<ul><li>是组件测试的下一阶段，是指将通过测试的组件模块组装成系统或子系统，再进行测试，重点测试不同模块的接口部分。</li><li>集成测试就是用来检查各个组件模块结合到一起能否协同配合，正常运行。</li></ul></li><li>系统测试<ul><li>指的是将整个软件系统看作一个整体进行测试，包括对功能、性能以及软件所运行的软硬件环境进行测试。</li><li>系统测试的主要依据是《系统需求规格说明书》文档</li></ul></li><li>验收测试<ul><li>指的是在系统测试的后期，以用户测试为主，或有测色hi人员等质量保障人员共同参与的测试，它也是软件正式交给用户使用的最后一道工序。</li><li>验收测试又分为α测试与β测试，其中，α测试指的是由用户、测试人员、开发人员等共同参与的内部测试，而β测试指的是内测后的公测，即完全交给最终用户测试。</li></ul></li></ul><h2 id="第二章-软件质量和软件测试概述"><a href="#第二章-软件质量和软件测试概述" class="headerlink" title="第二章 软件质量和软件测试概述"></a>第二章 软件质量和软件测试概述</h2><h3 id="1-ISO-x2F-IEC-x2F-IEEE-12207-过程组（了解）"><a href="#1-ISO-x2F-IEC-x2F-IEEE-12207-过程组（了解）" class="headerlink" title="1. ISO&#x2F;IEC&#x2F;IEEE 12207 过程组（了解）"></a>1. ISO&#x2F;IEC&#x2F;IEEE 12207 过程组（了解）</h3><p>书上<strong>22</strong>页</p><h3 id="2-CMM（了解）"><a href="#2-CMM（了解）" class="headerlink" title="2. CMM（了解）"></a>2. CMM（了解）</h3><p>书上<strong>28</strong>页</p><h3 id="3-CMM软件过程成熟度等级（了解）"><a href="#3-CMM软件过程成熟度等级（了解）" class="headerlink" title="3. CMM软件过程成熟度等级（了解）"></a>3. CMM软件过程成熟度等级（了解）</h3><p>书上<strong>29</strong>页</p><ol><li>初始级</li><li>可重复级</li><li>已定义级</li><li>已管理级</li><li>优化级</li></ol><h3 id="4-CMMI（掌握）"><a href="#4-CMMI（掌握）" class="headerlink" title="4. CMMI（掌握）"></a>4. CMMI（掌握）</h3><p>书上<strong>31</strong>页</p><h2 id="第三章-软件全面质量管理"><a href="#第三章-软件全面质量管理" class="headerlink" title="第三章 软件全面质量管理"></a>第三章 软件全面质量管理</h2><h3 id="1-全面质量管理-Total-Quality-Management，TQM-概念（理解）"><a href="#1-全面质量管理-Total-Quality-Management，TQM-概念（理解）" class="headerlink" title="1. 全面质量管理(Total Quality Management，TQM)概念（理解）"></a>1. 全面质量管理(Total Quality Management，TQM)概念（理解）</h3><p>书上<strong>39</strong>页</p><h3 id="2-PDCA循环（理解）"><a href="#2-PDCA循环（理解）" class="headerlink" title="2. PDCA循环（理解）"></a>2. PDCA循环（理解）</h3><p>书上<strong>41</strong>页</p><h3 id="3-六西格玛-6-Sigma，6σ-（理解）"><a href="#3-六西格玛-6-Sigma，6σ-（理解）" class="headerlink" title="3. 六西格玛(6 Sigma，6σ)（理解）"></a>3. 六西格玛(6 Sigma，6σ)（理解）</h3><p>书上<strong>45</strong>页</p><h3 id="4-六西格玛（6σ）管理简介-人员组织结构（了解）"><a href="#4-六西格玛（6σ）管理简介-人员组织结构（了解）" class="headerlink" title="4. 六西格玛（6σ）管理简介-人员组织结构（了解）"></a>4. 六西格玛（6σ）管理简介-人员组织结构（了解）</h3><p>书上<strong>47</strong>页</p><h2 id="第四章-软件质量保证"><a href="#第四章-软件质量保证" class="headerlink" title="第四章 软件质量保证"></a>第四章 软件质量保证</h2><h3 id="1-软件质量保证活动（掌握）"><a href="#1-软件质量保证活动（掌握）" class="headerlink" title="1. 软件质量保证活动（掌握）"></a>1. 软件质量保证活动（掌握）</h3><p>书上<strong>62</strong>页</p><h3 id="2-软件质量保证过程（了解）"><a href="#2-软件质量保证过程（了解）" class="headerlink" title="2. 软件质量保证过程（了解）"></a>2. 软件质量保证过程（了解）</h3><p>书上<strong>65</strong>页</p><h2 id="第五章-软件测试基础"><a href="#第五章-软件测试基础" class="headerlink" title="第五章 软件测试基础"></a>第五章 软件测试基础</h2><h3 id="1-软件测试的目的（理解）"><a href="#1-软件测试的目的（理解）" class="headerlink" title="1. 软件测试的目的（理解）"></a>1. 软件测试的目的（理解）</h3><ul><li>测试是为了发现程序中的错误而执行程序的过程</li><li>好的测试方案是极可能发现迄今为止尚未发现的错误的测试方案</li><li>成功的测试是发现了至今为止尚未发现的错误的测试</li><li>测试并不仅仅是为了找出错误。通过分析错误产生的原因和错误的发生趋势，可以帮助项目管理者发现当前软件开发过程中的缺陷，以便及时改进。</li><li>测试分析能帮助测试人员设计出有针对性的测试方法，改善测试的效率和有效性。</li><li>没有发现错误的测试也是有价值的，完整的测试是评定软件测试的一种方法。</li><li>根据测试目的的不同，还有回归测试、压力测试、性能测试等，分别为了检验修改或优化过程是否引发新的问题、软件所能打得到的处理能力和是否达到预期的处理能力等。</li></ul><h3 id="2-软件测试目标包括哪些内容（理解）"><a href="#2-软件测试目标包括哪些内容（理解）" class="headerlink" title="2. 软件测试目标包括哪些内容（理解）"></a>2. 软件测试目标包括哪些内容（理解）</h3><ul><li>评估工作产品。</li><li>验证是否实现了所有指定的需求。</li><li>确认测试对象是否完成，并按照用户和其他干系人期望的那样工作。</li><li>建立对被测对象质量级别的信心。</li><li>预防缺陷。</li><li>发现失效和缺陷。</li><li>降低软件质量不足所带来的风险。</li><li>遵守合同、法律或法规要求或标准和（或）验证测试对象是否符合这些要求或标准。</li></ul><h3 id="3-7条软件测试的基本原则（掌握）"><a href="#3-7条软件测试的基本原则（掌握）" class="headerlink" title="3. 7条软件测试的基本原则（掌握）"></a>3. 7条软件测试的基本原则（掌握）</h3><ol><li>测试说明缺陷的存在，而不能说明缺陷不存在。</li><li>穷尽测试时不可能的。</li><li>测试的尽早介入可以节省时间和成本。</li><li>缺陷的集群效应。</li><li>杀虫剂悖论。</li><li>测试活动依赖于测试内容和情境。</li><li>不存在缺陷的谬论。</li></ol><h3 id="4-测试过程的主要活动（掌握）"><a href="#4-测试过程的主要活动（掌握）" class="headerlink" title="4. 测试过程的主要活动（掌握）"></a>4. 测试过程的主要活动（掌握）</h3><p>测试过程主要由<strong>测试计划和监控、测试分析、测试设计、测试实施、测试执行、测试评估和报告、测试结束</strong>等主要的活动组成。</p><h2 id="第六章-软件生命周期中的测试"><a href="#第六章-软件生命周期中的测试" class="headerlink" title="第六章 软件生命周期中的测试"></a>第六章 软件生命周期中的测试</h2><h3 id="1-常见的软件测试模型（了解）"><a href="#1-常见的软件测试模型（了解）" class="headerlink" title="1. 常见的软件测试模型（了解）"></a>1. 常见的软件测试模型（了解）</h3><ul><li>V模型</li><li>W模型</li><li>H模型</li><li>X模型</li><li>前置测试模型</li></ul><h3 id="2-V模型的特点、优缺点及适用（掌握）"><a href="#2-V模型的特点、优缺点及适用（掌握）" class="headerlink" title="2. V模型的特点、优缺点及适用（掌握）"></a>2. V模型的特点、优缺点及适用（掌握）</h3><p>书上<strong>87</strong>页</p><h3 id="3-W模型的特点、优缺点及适用（掌握）"><a href="#3-W模型的特点、优缺点及适用（掌握）" class="headerlink" title="3. W模型的特点、优缺点及适用（掌握）"></a>3. W模型的特点、优缺点及适用（掌握）</h3><p>书上<strong>88</strong>页</p><h3 id="4-四个测试级别，每个测试级别指什么、重点测试什么？（掌握）"><a href="#4-四个测试级别，每个测试级别指什么、重点测试什么？（掌握）" class="headerlink" title="4. 四个测试级别，每个测试级别指什么、重点测试什么？（掌握）"></a>4. 四个测试级别，每个测试级别指什么、重点测试什么？（掌握）</h3><ol><li>组件测试<ul><li>驱动模块</li><li>桩模块</li></ul></li><li>集成测试<ul><li>非增量式测试</li><li>增量式测试</li></ul></li><li>系统测试</li><li>验收测试<ul><li>测试依据</li><li>测试对象</li><li>典型的缺陷</li><li>特定的方法和职责</li><li>验收测试形式</li><li>验收测试技术</li></ul></li></ol><h3 id="5-性能测试包括哪些？（掌握）"><a href="#5-性能测试包括哪些？（掌握）" class="headerlink" title="5. 性能测试包括哪些？（掌握）"></a>5. 性能测试包括哪些？（掌握）</h3><p>书上<strong>105</strong>页</p><ol><li>常规性能测试</li><li>压力测试</li><li>负载测试</li><li>可靠性测试</li><li>大数据量测试</li></ol><h3 id="6-压力测试（掌握），负载测试（掌握），对比"><a href="#6-压力测试（掌握），负载测试（掌握），对比" class="headerlink" title="6. 压力测试（掌握），负载测试（掌握），对比"></a>6. 压力测试（掌握），负载测试（掌握），对比</h3><ul><li><p>压力测试</p><p>压力测试是指持续不断地给被测系统增加压力，直到被测系统被压垮。</p></li><li><p>负载测试</p><p>负载测试与压力测试十分相似，通常是让被测系统在其能忍受的压力极限范围内（或临界状态下）连续运行，来测试系统的稳定性。其目的是找到系统的处理极限，为系统调优提供依据。</p></li></ul><h3 id="7-自动化测试（掌握），满足的条件（掌握）"><a href="#7-自动化测试（掌握），满足的条件（掌握）" class="headerlink" title="7. 自动化测试（掌握），满足的条件（掌握）"></a>7. 自动化测试（掌握），满足的条件（掌握）</h3><ol><li>需求变动不频繁</li><li>项目周期足够长</li><li>自动发测试脚本可重复使用</li></ol><h3 id="8-白盒测试（掌握），黑盒测试（掌握），对比和应用"><a href="#8-白盒测试（掌握），黑盒测试（掌握），对比和应用" class="headerlink" title="8. 白盒测试（掌握），黑盒测试（掌握），对比和应用"></a>8. 白盒测试（掌握），黑盒测试（掌握），对比和应用</h3><p>书上<strong>110</strong>页</p><table><thead><tr><th align="center">比较项</th><th align="center">黑盒测试</th><th align="center">白盒测试</th></tr></thead><tbody><tr><td align="center">测试规划</td><td align="center">功能的测试</td><td align="center">结构的测试</td></tr><tr><td align="center">优点</td><td align="center">能确保从用户的角度出发进行测试</td><td align="center">能对程序内部的特定部位进行覆盖测试</td></tr><tr><td align="center">缺点</td><td align="center">无法测试程序内部特定部位；当规格说明有误时，则不能发现问题。</td><td align="center">无法检查程序的外部特征；无法对未实现规格说明的程序内部欠缺部分进行测试</td></tr></tbody></table><h2 id="第7章-软件静态测试技术"><a href="#第7章-软件静态测试技术" class="headerlink" title="第7章 软件静态测试技术"></a>第7章 软件静态测试技术</h2><h3 id="1-静态测试（理解）"><a href="#1-静态测试（理解）" class="headerlink" title="1. 静态测试（理解）"></a>1. 静态测试（理解）</h3><p>书上<strong>114</strong>页</p><h3 id="2-静态测试技术（理解）"><a href="#2-静态测试技术（理解）" class="headerlink" title="2. 静态测试技术（理解）"></a>2. 静态测试技术（理解）</h3><p>书上<strong>115</strong>页</p><h3 id="3-正式评审过程（了解）"><a href="#3-正式评审过程（了解）" class="headerlink" title="3. 正式评审过程（了解）"></a>3. 正式评审过程（了解）</h3><ol><li>计划</li><li>评审启动会</li><li>独立评审</li><li>事件交流和分析</li><li>修正和报告</li><li>跟踪</li></ol><h3 id="4-评审角色和职责（了解）"><a href="#4-评审角色和职责（了解）" class="headerlink" title="4. 评审角色和职责（了解）"></a>4. 评审角色和职责（了解）</h3><ol><li><p>作者</p><p>作者为被评审工作产品的创建者或修复工作产品评审过程中发现的缺陷。</p></li><li><p>管理者</p><p>负责制定评审计划；决定是否需要进行评审；分配人员、预算和时间；监督进行中的成本、效益；当产出不充分时，执行控制决策。</p></li><li><p>评审会主持人</p><p>党召开评审会时，主持人保证评审会议的有效进行，需要时再评审的不同观点之间进行协调。主持人通常是评审成功与否的关键人物。</p></li><li><p>评审组长</p><p>全面负责评审，决定哪些人员参加评审，并组织何时何地进行评审。</p></li><li><p>评审员</p><p>可能是专题相关专家、项目工作人员、对工作产品感兴趣的干系人和（或）具有特定技术或业务背景的人员。在评审中识别工作产品中的潜在缺陷。可能代表测试员、程序员、用户、操作员、业务分析师、易用性专家等不同的角度。</p></li><li><p>记录员</p></li></ol><h3 id="5-控制流图4个元素（掌握）"><a href="#5-控制流图4个元素（掌握）" class="headerlink" title="5. 控制流图4个元素（掌握）"></a>5. 控制流图4个元素（掌握）</h3><ol><li>过程块</li><li>决策点</li><li>汇聚点</li><li>域</li></ol><h3 id="6-控制流分析步骤（掌握）"><a href="#6-控制流分析步骤（掌握）" class="headerlink" title="6. 控制流分析步骤（掌握）"></a>6. 控制流分析步骤（掌握）</h3><p>书上<strong>137</strong>页</p><h2 id="第8章-软件测试设计技术"><a href="#第8章-软件测试设计技术" class="headerlink" title="第8章 软件测试设计技术"></a>第8章 软件测试设计技术</h2><h3 id="1-等价类划分（掌握）"><a href="#1-等价类划分（掌握）" class="headerlink" title="1. 等价类划分（掌握）"></a>1. 等价类划分（掌握）</h3><p>书上<strong>154</strong>页</p><ul><li>有效等价类</li><li>无效等价类</li></ul><h3 id="2-边界值分析（掌握）"><a href="#2-边界值分析（掌握）" class="headerlink" title="2. 边界值分析（掌握）"></a>2. 边界值分析（掌握）</h3><p>书上<strong>159</strong>页</p><ul><li><p>二值测试法</p><p>取一个边界值，一个刚好超过边界的值</p></li><li><p>三值测试法</p><p>取一个不超过边界，一个在边界上，一个超过边界的值</p></li></ul><h3 id="3-决策表（掌握）"><a href="#3-决策表（掌握）" class="headerlink" title="3. 决策表（掌握）"></a>3. 决策表（掌握）</h3><p>书上<strong>162</strong>页</p><p>也叫<strong>判定表</strong></p><ul><li>条件桩：列出了问题的所有条件。通常认为列出的条件的次序无关紧要，位于表的左上部分</li><li>动作桩：列出了问题规定可能采取的操作。这些操作的排列顺序没有约束，位于表的左下角部分。</li><li>条件项：列出针对它所列条件的取值，在所有可能情况下的真假值，位于表的右上角部分。</li><li>动作项：列出在条件项的各种取值情况下应该采取的动作，位于表的右下角部分。</li></ul><table><thead><tr><th align="center"></th><th align="center">规则1</th><th align="center">规则2</th><th align="center">……</th><th align="center">规则n</th></tr></thead><tbody><tr><td align="center">条件桩1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">条件桩2</td><td align="center"></td><td align="center">条件项</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">……</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">条件项</td></tr><tr><td align="center">条件桩n</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">动作桩1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">动作桩2</td><td align="center">动作项</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">……</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">动作桩n</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">动作项</td></tr></tbody></table><p>例子：现有某图书馆应用系统中软件的一张阅读指南决策表，读者对表中问题给予回答，若回答为肯定，标注<em>Y</em>（程序取真值），若回答为否定，标注<em>N</em>（程序取假值）。阅读建议在动作域中列出。</p><p><strong>原始决策表</strong></p><table><thead><tr><th></th><th>规则1</th><th>规则2</th><th>规则3</th><th>规则4</th><th>规则5</th><th>规则6</th><th>规则7</th><th>规则8</th></tr></thead><tbody><tr><td>条件1：感觉疲倦吗？</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr><tr><td>条件2：感兴趣吗？</td><td>Y</td><td>Y</td><td>N</td><td>N</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>条件3：感觉糊涂吗？</td><td>Y</td><td>N</td><td>Y</td><td>N</td><td>Y</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>动作1：重读</td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td><td></td></tr><tr><td>动作2：继续</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>动作3：跳下一章</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td></tr><tr><td>动作4：休息</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>化简后的决策表</strong></p><table><thead><tr><th></th><th>规则1~4</th><th>规则5</th><th>规则6</th><th>规7~8</th></tr></thead><tbody><tr><td>条件1：感觉疲倦吗？</td><td>Y</td><td>N</td><td>N</td><td>N</td></tr><tr><td>条件2：感兴趣吗？</td><td>-</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>条件3：感觉糊涂吗？</td><td>-</td><td>Y</td><td>N</td><td>-</td></tr><tr><td>动作1：重读</td><td></td><td>√</td><td></td><td></td></tr><tr><td>动作2：继续</td><td></td><td></td><td>√</td><td></td></tr><tr><td>动作3：跳下一章</td><td></td><td></td><td></td><td>√</td></tr><tr><td>动作4：休息</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><h3 id="4-基于状态的测试，基于用例的测试，基于用户故事-敏捷开发-的测试。思想，优缺点及应用（理解）"><a href="#4-基于状态的测试，基于用例的测试，基于用户故事-敏捷开发-的测试。思想，优缺点及应用（理解）" class="headerlink" title="4. 基于状态的测试，基于用例的测试，基于用户故事(敏捷开发)的测试。思想，优缺点及应用（理解）"></a>4. 基于状态的测试，基于用例的测试，基于用户故事(敏捷开发)的测试。思想，优缺点及应用（理解）</h3><ul><li><p>基于状态的测试</p><p>书上<strong>166</strong>页</p></li><li><p>基于用例的测试</p><p>书上<strong>170</strong>页</p></li><li><p>基于用户故事（敏捷开发）的测试</p><p>书上<strong>172</strong>页</p></li></ul><h3 id="5-黑盒测试技术的比较与选择（掌握）"><a href="#5-黑盒测试技术的比较与选择（掌握）" class="headerlink" title="5. 黑盒测试技术的比较与选择（掌握）"></a>5. 黑盒测试技术的比较与选择（掌握）</h3><p>书上<strong>174</strong>页</p><ul><li>首先进行等价类划分，包括输入条件和输出条件的等价划分，将无限测试变成有限测试，这是减少工作量和提高测试效率最有效的方法。</li><li>在任何情况下都必须使用边界值分析方法。经验表明，用这种方法设计出的测试用例发现程序错误的能力最强。</li><li>如果程序的功能说明中含有输入条件的组合情况，则一开始就可以选用判定表法。</li><li>如果测试对象输出结果或行为方式不仅要受当前输入数据的影响，同时还要与测试对象的当前运行执行情况或其之前的事件，或之前输入数据有关，则需要采用基于状态的测试方法。</li><li>对照程序逻辑，检查已设计出的测试用例的逻辑覆盖程度。如果没有达到要求的覆盖标准，应当再补充足够的测试用例。</li></ul><h3 id="6-基于经验的测试技术，三种（掌握）"><a href="#6-基于经验的测试技术，三种（掌握）" class="headerlink" title="6. 基于经验的测试技术，三种（掌握）"></a>6. 基于经验的测试技术，三种（掌握）</h3><p>书上<strong>178</strong>页</p><ol><li>错误推测法</li><li>基于检查表测试</li><li>探索性测试</li></ol><h3 id="7-白盒测试技术，有哪些（掌握）"><a href="#7-白盒测试技术，有哪些（掌握）" class="headerlink" title="7. 白盒测试技术，有哪些（掌握）"></a>7. 白盒测试技术，有哪些（掌握）</h3><ol><li>语句覆盖</li><li>判定覆盖</li><li>条件覆盖</li><li>路径测试</li><li>基本路径测试</li></ol><h3 id="8-语句覆盖、判断覆盖、条件覆盖，应用（掌握）"><a href="#8-语句覆盖、判断覆盖、条件覆盖，应用（掌握）" class="headerlink" title="8. 语句覆盖、判断覆盖、条件覆盖，应用（掌握）"></a>8. 语句覆盖、判断覆盖、条件覆盖，应用（掌握）</h3><p>书上<strong>183</strong>页</p><h3 id="9-基本路径测试，应用（掌握）"><a href="#9-基本路径测试，应用（掌握）" class="headerlink" title="9. 基本路径测试，应用（掌握）"></a>9. 基本路径测试，应用（掌握）</h3><p>书上<strong>187</strong>页</p><h2 id="第9章-软件测试管理"><a href="#第9章-软件测试管理" class="headerlink" title="第9章 软件测试管理"></a>第9章 软件测试管理</h2><h3 id="1-测试组织开展测试工作的人员角色，职责（理解）"><a href="#1-测试组织开展测试工作的人员角色，职责（理解）" class="headerlink" title="1. 测试组织开展测试工作的人员角色，职责（理解）"></a>1. 测试组织开展测试工作的人员角色，职责（理解）</h3><ul><li>测试总监负责组织级测试管理工作</li><li>测试经理专注于特定软件项目的测试工作，协调资源做好项目测试管理工作。</li><li>测试员负责开发测试可交付成果，并完成与动态测试过程相关的过程。</li><li>（软件）用户是使用软件的人。通常，用户进行验收测试，包括用户验收测试和产品软件的α测试、β测试。</li></ul><h3 id="2-TMMi，五个级别（掌握）"><a href="#2-TMMi，五个级别（掌握）" class="headerlink" title="2. TMMi，五个级别（掌握）"></a>2. TMMi，五个级别（掌握）</h3><ol><li>初始级别</li><li>已管理级</li><li>已定义级</li><li>已测量级</li><li>优化级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期末复习 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC配置（三）</title>
      <link href="/2022/12/12/configure/spring-mvc-3/"/>
      <url>/2022/12/12/configure/spring-mvc-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC入门配置"><a href="#Spring-MVC入门配置" class="headerlink" title="Spring-MVC入门配置"></a>Spring-MVC入门配置</h1><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><h3 id="REST介绍"><a href="#REST介绍" class="headerlink" title="REST介绍"></a>REST介绍</h3><p>一种比较好的url风格</p><p>没有使用REST</p><ul><li>&#x2F;user&#x2F;findById?id&#x3D;1查找用户</li><li>&#x2F;user&#x2F;deleteById?id&#x3D;1      删除用户</li></ul><p>使用了REST</p><ul><li><p>&#x2F;user&#x2F;1 get查找用户</p></li><li><p>&#x2F;user&#x2F;1         delete     删除用户</p></li><li><p>&#x2F;user           post       保存用户</p></li><li><p>&#x2F;user           put        更新用户</p></li></ul><p>也是使用url+方法的方式来区分url的功能</p><h3 id="SpringMVC中的实现"><a href="#SpringMVC中的实现" class="headerlink" title="SpringMVC中的实现"></a>SpringMVC中的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:32:22</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让Spring容器进行管理</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">// 请求的url</span></span><br><span class="line">    <span class="comment">// 设置请求的方法，使用REST风格</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;保存成功！&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;更新成功！&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, id + <span class="string">&quot;删除成功！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, id + <span class="string">&quot;查找成功！&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><p>通过上面的代码发现有很多重复的地方，写起来非常繁琐，可以简化为如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:32:22</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让Spring容器进行管理</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// 表示所有的方法都将返回结果作为响应体</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 将url公共部分提取出来，即url前缀</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;保存成功！&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;更新成功！&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, id + <span class="string">&quot;删除成功！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, id + <span class="string">&quot;查找成功！&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@Controller</code>注解可以与<code>@ResponseBody</code>注解融合成一个注解，即<code>@RestController</code>，最终简化如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:32:22</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示所有的方法都将返回结果作为响应体，并让Spring容器进行管理</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 将url公共部分提取出来，即url前缀</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;保存成功！&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;更新成功！&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, id + <span class="string">&quot;删除成功！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, id + <span class="string">&quot;查找成功！&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>程序中会出现一系列的异常，我们不能保证能够捕获所有的异常，可以使用spring的aop为表现层的方法设置异常捕获切面</p><h3 id="创建异常通知"><a href="#创建异常通知" class="headerlink" title="创建异常通知"></a>创建异常通知</h3><p>创建org.example.controller.aop.ProjectExceptionAdvice异常通知类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 异常处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 15:35:54</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让springmvc将此类处理为异常通知，并将处理方法的返回值作为响应体</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">// 处理所有异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">exceptionHandler</span><span class="params">(Exception exception)</span> &#123;</span><br><span class="line">        <span class="comment">// 表示处理所有的异常，并返回一个对象消息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">500</span>, exception.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务将会开启全局异常处理</p><h3 id="细分异常"><a href="#细分异常" class="headerlink" title="细分异常"></a>细分异常</h3><p>通常我们会对不同层面的异常有不同的处理方案</p><p>例如如果因为用户的输入不正确导致的表现层异常那么我们就只需要提醒用户输入正确就行了</p><p>但是如果是系统异常，那么我们需要记录日志并且通知运维人员及时修复</p><p>如果是未知的系统异常，那么我们也需要记录日志并且通知程序员进行修复，如果不是程序员的错误，程序员只需要将此错误重新归类到系统异常或者业务异常就行了</p><h4 id="创建业务异常"><a href="#创建业务异常" class="headerlink" title="创建业务异常"></a>创建业务异常</h4><p>创建org.example.exception.BusinessException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 业务异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 15:47:56</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建系统异常"><a href="#创建系统异常" class="headerlink" title="创建系统异常"></a>创建系统异常</h4><p>创建org.example.exception.SystemException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 系统异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 15:47:22</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加异常处理"><a href="#添加异常处理" class="headerlink" title="添加异常处理"></a>添加异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.example.exception.SystemException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 异常处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 15:35:54</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让springmvc将此类处理为异常通知，并将处理方法的返回值作为响应体</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">// 处理系统异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">businessException</span><span class="params">(SystemException systemException)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给运维发送邮件（消息）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">500</span>, <span class="string">&quot;系统繁忙，请稍后再试&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">businessException</span><span class="params">(BusinessException businessException)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">400</span>, <span class="string">&quot;请不要使用违规操作&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理未知异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">exceptionHandler</span><span class="params">(Exception exception)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给程序员发送邮件（消息）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一个对象消息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">500</span>, exception.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>写一个有异常的controller处理方法来进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test/exception/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">testException</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1/user/test/exception/1</code>，出现以下结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请不要使用违规操作&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1/user/test/exception/2</code>，出现以下结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统繁忙，请稍后再试&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="开放静态资源"><a href="#开放静态资源" class="headerlink" title="开放静态资源"></a>开放静态资源</h2><h3 id="创建支持类"><a href="#创建支持类" class="headerlink" title="创建支持类"></a>创建支持类</h3><p>创建org.example.config.SpringMvcSupport支持类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 支持类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 16:09:08</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">// 增加资源处理器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 表示将webapp目录下的pages目录下的所有文件都映射在/pages/**这个url地址中</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="载入容器中"><a href="#载入容器中" class="headerlink" title="载入容器中"></a>载入容器中</h3><p>在org.example.config.SpringMvcConfig中添加扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> mvc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:35:55</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让此类以配置类的角色交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 配置控制器扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.controller&quot;, &quot;org.example.config&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 开启功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">// 载入支持配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在webapp文件夹下创建pages文件夹，在pages文件夹下创建一个index.html文件</p><p>访问<code>http://127.0.0.1/pages/index.html</code>即可获取到页面</p><h3 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h3><p>不需要创建名为org.example.config.SpringMvcSupport的支持类，直接在org.example.config.SpringMvcConfig中进行支持的编写</p><p>删除org.example.config.SpringMvcSupport类，并修改org.example.config.SpringMvcConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> mvc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:35:55</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让此类以配置类的角色交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 配置控制器扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.controller&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 开启功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">// 载入支持配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// 增加资源处理器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 表示将webapp目录下的pages目录下的所有文件都映射在/pages/**这个url地址中</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1/pages/index.html</code>依然可行</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>拦截器与过滤器有很大的区别，过滤器是servlet的技术，范围较大</p><p>而拦截器是SpringMVC的技术，范围较小，而且与SpringMVC配合起来更加灵活</p><h3 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h3><p>创建org.example.controller.interceptor.ProjectInterceptor拦截器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 16:05:02</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交给SpringMVC容器管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 运行在控制器处理方法之前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行在控制器处理方法之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行在控制器处理方法完成之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新Spring配置"><a href="#更新Spring配置" class="headerlink" title="更新Spring配置"></a>更新Spring配置</h3><p>因为之前使用了支持的简化方法，所以在SpringMvcConfig配置类中添加拦截器支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.controller.interceptor.ProjectInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> mvc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:35:55</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让此类以配置类的角色交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 配置控制器扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.controller&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 开启功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">// 载入支持配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// 自动注入容器中我们之前写的拦截器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 表示匹配/user路径与/user/下所有的路径</span></span><br><span class="line">        <span class="comment">// 被匹配的路径就会按照编写的拦截器进行拦截</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/user&quot;</span>,<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加资源处理器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 表示将webapp目录下的pages目录下的所有文件都映射在/pages/**这个url地址中</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成，访问<code>http://127.0.0.1/user</code>出现以下打印表示配置正确</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">preHandle</span><br><span class="line">postHandle</span><br><span class="line">afterCompletion</span><br></pre></td></tr></table></figure><h3 id="多个拦截器配置"><a href="#多个拦截器配置" class="headerlink" title="多个拦截器配置"></a>多个拦截器配置</h3><p>多个拦截器也是一样的步骤，先创建一个新的拦截器，然后再在Spring配置类中添加就行了，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 自动注入容器中我们之前写的拦截器</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"><span class="comment">// 创建的第二个拦截器</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ProjectInterceptor2 projectInterceptor2;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       <span class="comment">// 表示匹配/user路径与/user/下所有的路径</span></span><br><span class="line">       <span class="comment">// 被匹配的路径就会按照编写的拦截器进行拦截</span></span><br><span class="line">       registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/user&quot;</span>,<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">       <span class="comment">// 添加第二个拦截器规则，会形成包裹</span></span><br><span class="line">       registry.addInterceptor(projectInterceptor2).addPathPatterns(<span class="string">&quot;/user&quot;</span>,<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器中的参数"><a href="#拦截器中的参数" class="headerlink" title="拦截器中的参数"></a>拦截器中的参数</h3><p>目前只列出了以下内容，还有更多的需要自己去探索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 16:05:02</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交给SpringMVC容器管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 运行在控制器处理方法之前</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取请求头Content-Type的属性值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">        System.out.println(header);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取控制器对应的那个处理方法，也就是controller中的那个方法</span></span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// 打印对应controller的类型</span></span><br><span class="line">        System.out.println(handlerMethod.getBeanType());</span><br><span class="line">        <span class="comment">// 执行对应controller中对应的方法</span></span><br><span class="line">        handlerMethod.getMethod().invoke(handlerMethod.getBean(), <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().equals(<span class="string">&quot;/user&quot;</span>)) &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取写入响应体数据的流</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            <span class="comment">// 写入经jackson对象处理后的JsonResult的json字符串</span></span><br><span class="line">            writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(<span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;please login first&quot;</span>, <span class="literal">null</span>)));</span><br><span class="line">            <span class="comment">// 刷新输出流</span></span><br><span class="line">            writer.flush();</span><br><span class="line">            <span class="comment">// 关闭输出流</span></span><br><span class="line">            writer.close();</span><br><span class="line">            <span class="comment">// 不再往后执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行在控制器处理方法之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行在控制器处理方法完成之后</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-MVC配置（二）</title>
      <link href="/2022/12/12/configure/spring-mvc-2/"/>
      <url>/2022/12/12/configure/spring-mvc-2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC基础配置"><a href="#SpringMVC基础配置" class="headerlink" title="SpringMVC基础配置"></a>SpringMVC基础配置</h1><p>上一节已经将SpringMVC的框架搭好了，就不再多说</p><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><h3 id="url中的参数"><a href="#url中的参数" class="headerlink" title="url中的参数"></a>url中的参数</h3><p>请求路径为<code>http://127.0.0.1/user/test?name=john&amp;age=10</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// @RequestParam表示它为请求中的一个参数单元，不使用value属性，那么变量名一样要与参数名相同</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name,<span class="meta">@RequestParam(value = &quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单中的参数"><a href="#表单中的参数" class="headerlink" title="表单中的参数"></a>表单中的参数</h3><p>与url中的参数的访问方式一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// @RequestParam表示它为请求中的一个参数单元，不使用value属性，那么变量名一样要与参数名相同</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name,<span class="meta">@RequestParam(value = &quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;,age:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>请求路径为<code>http://127.0.0.1/user/test?likes=game&amp;likes=tv&amp;likes=reading</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 如果使用list存储数组参数，那么一定要设置@RequsetParam</span></span><br><span class="line"><span class="comment">// 否则spring不会把list认为是一个参数，而是认为是用它的属性接收多个参数</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestParam(value = &quot;likes&quot;)</span> List&lt;String&gt; likes)</span> &#123;</span><br><span class="line">    System.out.println(likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用对象的属性接收"><a href="#用对象的属性接收" class="headerlink" title="用对象的属性接收"></a>用对象的属性接收</h3><p>使用对象的属性接收，属性变量名必须与参数名相同，否则不会识别</p><p>请求路径为<code>http://127.0.0.1/user/test?name=john&amp;age=20&amp;balance=100&amp;gender=male&amp;address.province=sichuan&amp;address.city=chengdu</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 使用user对象接收，参数名与对象的属性名需要一致</span></span><br><span class="line"><span class="comment">// 如果对象属性有引用类型，使用对象属性名.对象属性名进行传参</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=null, name=&#x27;john&#x27;, gender=&#x27;male&#x27;, age=20, phone=&#x27;null&#x27;, birthday=null, balance=100.0, address=Address&#123;province=&#x27;sichuan&#x27;, city=&#x27;chengdu&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="接收时间类型的参数"><a href="#接收时间类型的参数" class="headerlink" title="接收时间类型的参数"></a>接收时间类型的参数</h3><p>请求路径为<code>http://127.0.0.1/user/test?date=2001/06/24</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 使用@DateTimeFormat的pattern属性定义格式，将字符串转为日期类型</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd&quot;)</span> Date date)</span> &#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sun Jun 24 00:00:00 CST 2001</span><br></pre></td></tr></table></figure><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="配置json数据的读取"><a href="#配置json数据的读取" class="headerlink" title="配置json数据的读取"></a>配置json数据的读取</h3><p>导入jackson坐标用于json处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jackson坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在org.example.config.SpringMvcConfig中开启功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> mvc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:35:55</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让此类以配置类的角色交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 配置控制器扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.controller&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 开启功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置json格式的请求，在json格式的请求体中写入以下信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;马昆&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;male&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span><span class="string">&quot;19960798888&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span><span class="string">&quot;2001-06-24&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span><span class="number">100.00</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="string">&quot;四川&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;眉山&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>控制器接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 使用@RequsetBody表示这是一个json格式的请求体</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json格式数据的发送"><a href="#json格式数据的发送" class="headerlink" title="json格式数据的发送"></a>json格式数据的发送</h3><p>创建一个专属的消息类org.example.domain.JsonResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> json格式的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 14:27:51</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer code, String message, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;JsonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改控制器方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line"><span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 使用@RequsetBody表示这是一个json格式的请求体</span></span><br><span class="line"><span class="comment">// 因为导入了jackson的坐标，并且使用@EnableWebMvc开启了功能</span></span><br><span class="line"><span class="comment">// 使用@ResponseBody会自动将对象转化为json字符串</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">200</span>, <span class="string">&quot;配置成功！&quot;</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求的格式正确，出现返回以下结果，时间格式传递的是一个时间戳</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置成功！&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;马昆&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19960798888&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="number">993340800000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">100.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四川&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;眉山&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="解析中文"><a href="#解析中文" class="headerlink" title="解析中文"></a>解析中文</h3><p>在请求体中增加中文字段，出现以下情况</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置成功！&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ä¸­æ&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在org.example.config.ServletControllerInitConfig中添加过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="comment">// springmvc有一个自带的处理字符的过滤器</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    <span class="comment">// 设置字符集</span></span><br><span class="line">    encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务再次访问，数据获取正常</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置成功！&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中文&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC配置（一）</title>
      <link href="/2022/12/11/configure/spring-mvc/"/>
      <url>/2022/12/11/configure/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC基础配置"><a href="#SpringMVC基础配置" class="headerlink" title="SpringMVC基础配置"></a>SpringMVC基础配置</h1><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring-MVC"></a>Spring-MVC</h2><p>之前使用servlet来做表现层非常繁琐，使用spring-mvc能够让表现层的编写更简单</p><h2 id="创建Spring-MVC项目"><a href="#创建Spring-MVC项目" class="headerlink" title="创建Spring-MVC项目"></a>创建Spring-MVC项目</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p>使用IntelliJ IDEA创建一个maven的web项目</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mvc/image-20221211162042337.png" alt="image-20221211162042337"></p><h3 id="导入所需坐标"><a href="#导入所需坐标" class="headerlink" title="导入所需坐标"></a>导入所需坐标</h3><p>Spring-MVC需要<strong>spring-webmvc</strong>坐标，我这里使用<code>5.2.10.RELEASE</code>版本，导入<strong>sevlet</strong>坐标，我这里使用<code>3.1.0</code>，因为这里使用的servlet会和后面的tomcat冲突，所以需要配置作用域</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建源码目录"><a href="#创建源码目录" class="headerlink" title="创建源码目录"></a>创建源码目录</h3><p>创建源码目录并增加controller包与config包</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mvc/image-20221211163129855.png" alt="image-20221211163129855"></p><h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><p>创建org.example.controller.UserController控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:32:22</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让Spring容器进行管理</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">// 请求的url地址</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/save&quot;)</span></span><br><span class="line">    <span class="comment">// 让方法返回的结果就作为响应的响应体，不做处理</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;/user/save&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;John\&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><p>创建org.example.config.SpringMVCConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> mvc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:35:55</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让此类以配置类的角色交给Spring容器管理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 配置控制器扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建org.example.config.ServletControllerInitConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> servlet初始化配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 16:38:54</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletControllerInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">// 配置Webapp的容器</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 配置容器的配置类</span></span><br><span class="line">        context.register(SpringMVCConfig.class);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置哪些请求url交割springmvc处理</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="comment">// 表示将所有的请求都交割SpringMVC处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置全局的容器</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置Maven插件"><a href="#配置Maven插件" class="headerlink" title="配置Maven插件"></a>配置Maven插件</h3><p>配置maven的tomcat插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 根节点下添加</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置tomcat插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行配置"><a href="#运行配置" class="headerlink" title="运行配置"></a>运行配置</h3><p>配置IntelliJ IDEA运行调试配置</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mvc/image-20221211165609106.png" alt="image-20221211165609106"></p><p>运行访问<code>http://127.0.0.1:80/user/save</code>出现以下结果表示成功</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mvc/image-20221211172219107.png" alt="image-20221211172219107"></p>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务配置</title>
      <link href="/2022/12/11/configure/spring-transaction/"/>
      <url>/2022/12/11/configure/spring-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事务控制"><a href="#Spring事务控制" class="headerlink" title="Spring事务控制"></a>Spring事务控制</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>在处理一件事情的时候，可能会涉及多个需要与数据库交互的操作，如果这件事中途出现问题，那么所有修改数据库的操作都应该撤回</p><p>这一件事情就是事务，我们希望处理一件事时，修改数据库的操作要么一起成功或者一起失败（也有可能部分一定要成功，如日志功能）</p><h2 id="配置事务管理"><a href="#配置事务管理" class="headerlink" title="配置事务管理"></a>配置事务管理</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>我们使用的DataSource是阿里云的Druid，使用的数据层访问框架是Mybatis，他们底层的事务控制都是JDBC，刚好Spring自带的事务控制也是使用的JDBC，所以不用导入新的坐标，直接往Spring容器中添加一个事务控制的实现类，然后使用它就行了。</p><h3 id="创建事务管理的Bean"><a href="#创建事务管理的Bean" class="headerlink" title="创建事务管理的Bean"></a>创建事务管理的Bean</h3><p>在org.example.config.JdbcConfig配置类中添加一个叫做<strong>PlatformTransactionManager</strong>平台事务管理器的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> jdbc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:43:30</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">platformTransactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建它的实现类</span></span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        <span class="comment">// 为它注入容器中的Datasource</span></span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置事务"><a href="#配置事务" class="headerlink" title="配置事务"></a>配置事务</h3><p>指定哪些服务是需要事务的，将注释加在接口上，实现类上都可以，方法上也行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User服务实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:13:35</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务测试</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Integer reference, Integer dest, Double money)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userDao.findById(reference);</span><br><span class="line">        user1.setBalance(user1.getBalance() - money);</span><br><span class="line">        <span class="comment">// 减钱</span></span><br><span class="line">        userDao.update(user1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个异常</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.findById(dest);</span><br><span class="line">        user2.setBalance(user2.getBalance() + money);</span><br><span class="line">        <span class="comment">// 加钱</span></span><br><span class="line">        userDao.update(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启事务注解"><a href="#开启事务注解" class="headerlink" title="开启事务注解"></a>开启事务注解</h3><p>在org.example.config.SpringConfig配置类中开启事务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.service&quot;,&quot;org.example.aop&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入jdbc配置类，Mybatis配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="comment">// 开启切面自动代理</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="comment">// 开启事务注解</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/11 14:42:18</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImplTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.transfer(<span class="number">1</span>,<span class="number">2</span>,<span class="number">50D</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果运行后，数据库中数据没有发生变换表示配置成功</p><h2 id="事务扩展使用"><a href="#事务扩展使用" class="headerlink" title="事务扩展使用"></a>事务扩展使用</h2><h3 id="事务角色"><a href="#事务角色" class="headerlink" title="事务角色"></a>事务角色</h3><ol><li>事务管理员：发起事务方</li><li>事务协调员：加入事务方</li></ol><p>事务有很多属性，可以百度一下，新手入门</p>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> transaction </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置AOP</title>
      <link href="/2022/12/09/configure/spring-aop/"/>
      <url>/2022/12/09/configure/spring-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring配置面向切面编程"><a href="#Spring配置面向切面编程" class="headerlink" title="Spring配置面向切面编程"></a>Spring配置面向切面编程</h1><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>我也是刚学，就说一下我的个人理解，肯定是有点儿问题的</p><p>AOP就是面向切面编程英文的缩写，它的目的就是用来增强已经开发好的功能的，并且不用更改之前的功能代码</p><p>AOP的概念中有一些名词，我的解释有些模糊</p><ol><li>连接点<ol><li>在Spring的AOP中，连接点就是一个类中所有的方法</li></ol></li><li>切入点<ol><li>就是你需要增强的方法</li></ol></li><li>通知<ol><li>需要增强的功能</li></ol></li><li>切面<ol><li>是通知与切入点的关系</li></ol></li></ol><h3 id="如何实现的"><a href="#如何实现的" class="headerlink" title="如何实现的"></a>如何实现的</h3><p>配置好规则后，Spring会将需要增强的类的bean替换成代理对象，使用的其实是代理类，不是目标对象</p><h2 id="在Spring中配置AOP"><a href="#在Spring中配置AOP" class="headerlink" title="在Spring中配置AOP"></a>在Spring中配置AOP</h2><h3 id="导入所需要的坐标"><a href="#导入所需要的坐标" class="headerlink" title="导入所需要的坐标"></a>导入所需要的坐标</h3><p>spring-aop在导入spring-context坐标时就已经被包含在其中了，所以不用导此坐标</p><p>还需要一个面向切面编程的实现包，导入<strong>aspectjweaver</strong>坐标，我使用的是<code>1.9.6</code>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h3><p>创建org.example.aop.MyAspect切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 我的切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/09 12:48:26</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让Spring将通知装入容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 将类声明为切面，让Spring识别里面与切面相关的的注解</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义切入点，表示匹配org.example.service.impl.UserServiceImpl类中所有为find前缀的public方法，不管形参有多少</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * org.example.service.impl.UserServiceImpl.find*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义前置通知，配置设置好的切入点</span></span><br><span class="line">    <span class="meta">@Before(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加一些配置"><a href="#增加一些配置" class="headerlink" title="增加一些配置"></a>增加一些配置</h3><p>在SpringConfig配置类中添加org.example.aop包的扫描，并开启切面自动代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.service&quot;,&quot;org.example.aop&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入jdbc配置类，Mybatis配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="comment">// 开启切面自动代理</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>运行启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器的上下文，并传入我们的配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="comment">// 获取容器中的UsrServiceImpl</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">        <span class="comment">// 查找所有用户</span></span><br><span class="line">        List&lt;User&gt; users = service.findAll();</span><br><span class="line">        <span class="comment">// 打印所有用户</span></span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="comment">// 关闭钩子</span></span><br><span class="line">        context.registerShutdownHook();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 关闭</span></span><br><span class="line"><span class="comment">        * context.close();</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果执行了前置通知方法表示配置正确，以下是我的输出</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UserServiceImpl被创建了</span><br><span class="line">我是前置通知</span><br><span class="line">十二月 09, 2022 1:14:44 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">[User&#123;id=1, name=&#x27;马昆&#x27;, gender=&#x27;male&#x27;, age=18, phone=&#x27;19960796404&#x27;, birthday=2001-06-24&#125;, User&#123;id=2, name=&#x27;马强&#x27;, gender=&#x27;female&#x27;, age=23, phone=&#x27;18328195555&#x27;, birthday=1999-09-24&#125;, User&#123;id=3, name=&#x27;罗海人&#x27;, gender=&#x27;female&#x27;, age=22, phone=&#x27;13547682222&#x27;, birthday=2000-11-03&#125;]</span><br><span class="line">UserServiceImpl要被销毁了</span><br></pre></td></tr></table></figure><h2 id="常用的一些通知"><a href="#常用的一些通知" class="headerlink" title="常用的一些通知"></a>常用的一些通知</h2><p>所有案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 我的切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/09 12:48:26</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 让Spring将通知装入容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 将类声明为切面，让Spring识别里面与切面相关的的注解</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义切入点匹配规则，表示匹配org.example.service.impl.UserServiceImpl类中所有为find前缀的public方法，不管形参有多少</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * org.example.service.impl.UserServiceImpl.find*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切入点匹配规则，用来测试我的后置异常通知</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public void org.example.service.impl.UserServiceImpl.testException())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">serviceExceptionPointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义前置通知，配置设置好的切入点匹配规则</span></span><br><span class="line">    <span class="meta">@Before(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 用于获取切入点方法的签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> proceedingJoinPoint.getSignature();</span><br><span class="line">        <span class="comment">// 获取方法的类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">        <span class="comment">// 获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 使用此方法执行切入点的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 打印方法执行花费时间</span></span><br><span class="line">        System.out.println(declaringTypeName + <span class="string">&quot;.&quot;</span> + name + <span class="string">&quot;使用了&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义后置返回通知，将返回结果与形参绑定，如果使用JoinPoint，那么一定要放在第一个形参</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;MyAspect.servicePointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">afterReturn</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;这是&quot;</span> + signature.getName() + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义后置返回通知，将异常结果与形参绑定，如果使用JoinPoint，那么还是需要放在形参的第一个位置</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;MyAspect.serviceExceptionPointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterException</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span> &#123;</span><br><span class="line">        System.out.println(joinPoint.getSignature().getName() + <span class="string">&quot;发生了&quot;</span> + throwable.getMessage() + <span class="string">&quot;异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p>用于切入点方法执行前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义前置通知，配置设置好的切入点匹配规则</span></span><br><span class="line"><span class="meta">@Before(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是前置通知&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><p>用于切入点方法执行后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义后置通知</span></span><br><span class="line"><span class="meta">@After(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是后置通知&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p><strong>这个通知非常常用</strong></p><p>用于包裹住切入点方法的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义环绕通知</span></span><br><span class="line"><span class="meta">@Around(&quot;MyAspect.servicePointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 用于获取切入点方法的签名</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> proceedingJoinPoint.getSignature();</span><br><span class="line">    <span class="comment">// 获取方法的类名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">    <span class="comment">// 获取方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 使用此方法执行切入点的方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 打印方法执行花费时间</span></span><br><span class="line">    System.out.println(declaringTypeName + <span class="string">&quot;.&quot;</span> + name + <span class="string">&quot;使用了&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后置返回通知"><a href="#后置返回通知" class="headerlink" title="后置返回通知"></a>后置返回通知</h3><p>用于方法执行完成后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义后置返回通知，将返回结果与形参绑定，如果使用JoinPoint，那么一定要放在第一个形参</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;MyAspect.servicePointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">afterReturn</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    System.out.println(<span class="string">&quot;这是&quot;</span> + signature.getName() + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后置异常通知"><a href="#后置异常通知" class="headerlink" title="后置异常通知"></a>后置异常通知</h3><p>用于方法抛出异常后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义后置返回通知，将异常结果与形参绑定，如果使用JoinPoint，那么还是需要放在形参的第一个位置</span></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;MyAspect.serviceExceptionPointCut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterException</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span> &#123;</span><br><span class="line">    System.out.println(joinPoint.getSignature().getName() + <span class="string">&quot;发生了&quot;</span> + throwable.getMessage() + <span class="string">&quot;异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要定义一个会抛异常的切入点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testException</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p>配置上述所有的通知后，执行启动类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器的上下文，并传入我们的配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="comment">// 获取容器中的UsrServiceImpl</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">        <span class="comment">// 查找所有用户</span></span><br><span class="line">        List&lt;User&gt; users = service.findAll();</span><br><span class="line">        <span class="comment">// 测试后置异常通知</span></span><br><span class="line">        service.testException();</span><br><span class="line">        <span class="comment">// 关闭钩子</span></span><br><span class="line">        context.registerShutdownHook();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 关闭</span></span><br><span class="line"><span class="comment">        * context.close();</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">UserServiceImpl被创建了</span><br><span class="line">我是前置通知</span><br><span class="line">十二月 09, 2022 1:47:51 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">这是findAll方法</span><br><span class="line">[User&#123;id=1, name=&#x27;马昆&#x27;, gender=&#x27;male&#x27;, age=18, phone=&#x27;19960796404&#x27;, birthday=2001-06-24&#125;, User&#123;id=2, name=&#x27;马强&#x27;, gender=&#x27;female&#x27;, age=23, phone=&#x27;18328195555&#x27;, birthday=1999-09-24&#125;, User&#123;id=3, name=&#x27;罗海人&#x27;, gender=&#x27;female&#x27;, age=22, phone=&#x27;13547682222&#x27;, birthday=2000-11-03&#125;]</span><br><span class="line">我是后置通知</span><br><span class="line">org.example.service.UserService.findAll使用了222ms</span><br><span class="line">testException发生了/ by zero异常</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="line">at org.example.service.impl.UserServiceImpl.testException(UserServiceImpl.java:47)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:64)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)</span><br><span class="line">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)</span><br><span class="line">at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)</span><br><span class="line">at com.sun.proxy.<span class="built_in">$</span>Proxy37.testException(Unknown Source)</span><br><span class="line">at org.example.App.main(App.java:18)</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码1</span><br></pre></td></tr></table></figure><h2 id="切入点的匹配规则"><a href="#切入点的匹配规则" class="headerlink" title="切入点的匹配规则"></a>切入点的匹配规则</h2><ol><li><code>*</code>表示单位内随意</li><li><code>..</code>表示任意个随意</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义切入点匹配规则，表示匹配org.example.service.impl.UserServiceImpl类中所有为find前缀的public方法，不管形参有多少</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public * org.example.service.impl.UserServiceImpl.find*(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示匹配所有为find开头的方法</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* * ..find*(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePointCut</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置Mybatis与Junit</title>
      <link href="/2022/12/08/configure/spring-mybatis-junit/"/>
      <url>/2022/12/08/configure/spring-mybatis-junit/</url>
      
        <content type="html"><![CDATA[<h1 id="在Maven中配置Sping与Mybatis和Junit的整合"><a href="#在Maven中配置Sping与Mybatis和Junit的整合" class="headerlink" title="在Maven中配置Sping与Mybatis和Junit的整合"></a>在Maven中配置Sping与Mybatis和Junit的整合</h1><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p><strong>使用Intellij IDEA快速创建Maven项目</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mybatis-junit/image-20221208194747004.png" alt="image-20221208194747004"></p><p><strong>配置好后会自动加上Junit的坐标，但是版本较老，后面会更换</strong></p><p>测试目录也自动生成了，并且有自带的启动入口</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mybatis-junit/image-20221208195351476.png" alt="image-20221208195351476"></p><h2 id="配置Spring"><a href="#配置Spring" class="headerlink" title="配置Spring"></a>配置Spring</h2><h3 id="导入Spring坐标"><a href="#导入Spring坐标" class="headerlink" title="导入Spring坐标"></a>导入Spring坐标</h3><p>可以到一个<a href="https://mvnrepository.com/">特别方便的网站</a>来检索你需要的Maven坐标，我们这里先搜索<strong>spring-context</strong></p><p>选择第一个搜索到的结果，我这里选择的是<code>5.3.18</code>版本</p><p>进去后复制<strong>Maven坐标</strong>，粘贴到项目的pom.xml的dependencies节点下，然后刷新Maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>创建一个实体类，对应你数据库的表，我数据库中的表格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+-----------+--------+-----+-------------+------------+</span><br><span class="line">| id | name      | gender | age | phone       | birthday   |</span><br><span class="line">+----+-----------+--------+-----+-------------+------------+</span><br><span class="line">|  1 | 马昆      | male   |  18 | 19960790000 | 2001-06-24 |</span><br><span class="line">|  2 | 马强      | female |  23 | 18328195555 | 1999-09-24 |</span><br><span class="line">|  3 | 罗海人    | female |  22 | 13547682222 | 2000-11-03 |</span><br><span class="line">+----+-----------+--------+-----+-------------+------------+</span><br></pre></td></tr></table></figure><p>实体类我是创建在org.example.domain包下的，可以先给User类添加上<code>@component</code>注解，用于后面测试Spring，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:03:13</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Spring配置类"><a href="#创建Spring配置类" class="headerlink" title="创建Spring配置类"></a>创建Spring配置类</h3><p>在org.example.config包下创建SpringConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.domain&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>清理App启动类中的代码，并测试Spring是否配置好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器的上下文，并传入我们的配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="comment">// 获取容器中的User</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">        <span class="comment">// 看是否新建成功</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后如果是以下结果表示配置成功</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=null, name=&#x27;null&#x27;, gender=&#x27;null&#x27;, age=null, phone=&#x27;null&#x27;, birthday=null&#125;</span><br></pre></td></tr></table></figure><h2 id="配置阿里Druid数据源"><a href="#配置阿里Druid数据源" class="headerlink" title="配置阿里Druid数据源"></a>配置阿里Druid数据源</h2><h3 id="导入Druid的坐标"><a href="#导入Druid的坐标" class="headerlink" title="导入Druid的坐标"></a>导入Druid的坐标</h3><p>在那个网站搜索<strong>mysql connector java</strong>，我使用的是<code>5.1.38</code>版本</p><p>在网站中搜索阿里的<strong>Druid</strong>连接池，我使用的是<code>1.1.10</code>版本</p><p>将这两个坐标加入到pom.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在项目的<code>/src/main/</code>下创建resource文件夹，并表明为资源文件夹</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/configure/spring-mybatis-junit/image-20221208202635732.png" alt="image-20221208202635732"></p><p>在文件夹下创建<code>jdbc.properties</code>配置文件，填写你的数据库连接信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择mysql的官方驱动</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 后面对应为主机，mysql服务端口，数据库名</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line"><span class="comment"># 数据库连接用户名</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">manager</span></span><br><span class="line"><span class="comment"># 用户密码</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">mk123456</span></span><br></pre></td></tr></table></figure><p>在org.example.config.SpringConfig中配置jdbc.properties的读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.domain&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建JDBC配置类"><a href="#创建JDBC配置类" class="headerlink" title="创建JDBC配置类"></a>创建JDBC配置类</h3><p>创建org.example.config.JdbcConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> jdbc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:43:30</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在org.example.config.SpringConfig中导入jdbc的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.domain&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入jdbc配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试是否成功-1"><a href="#测试是否成功-1" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>在org.example.App中添加一些代码，修改后的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器的上下文，并传入我们的配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="comment">// 获取容器中的User</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">        <span class="comment">// 看是否新建成功</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 获取容器中的DataSource</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> context.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果运行打印如下结果表示配置成功</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=null, name=&#x27;null&#x27;, gender=&#x27;null&#x27;, age=null, phone=&#x27;null&#x27;, birthday=null&#125;</span><br><span class="line">&#123;</span><br><span class="line">CreateTime:&quot;2022-12-08 20:49:46&quot;,</span><br><span class="line">ActiveCount:0,</span><br><span class="line">PoolingCount:0,</span><br><span class="line">CreateCount:0,</span><br><span class="line">DestroyCount:0,</span><br><span class="line">CloseCount:0,</span><br><span class="line">ConnectCount:0,</span><br><span class="line">Connections:[</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置Mybatis-Spring"><a href="#配置Mybatis-Spring" class="headerlink" title="配置Mybatis-Spring"></a>配置Mybatis-Spring</h2><h3 id="导入Mybatis所需坐标"><a href="#导入Mybatis所需坐标" class="headerlink" title="导入Mybatis所需坐标"></a>导入Mybatis所需坐标</h3><p>搜索<strong>spring-jdbc</strong>，我使用的是<code>5.3.18</code>版本</p><p>继续搜索<strong>mybatis</strong>，我使用的是<code>3.4.6</code>版本</p><p>还需要搜索Mybatis的Spring整合包，在网站搜索<strong>mybatis-spring</strong>，我使用的是<code>1.3.2</code>版本</p><p>将以上三个坐标添加到pom.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Mybatis配置类"><a href="#创建Mybatis配置类" class="headerlink" title="创建Mybatis配置类"></a>创建Mybatis配置类</h3><p>创建org.example.config.MybatisConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Mybatis配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:00:19</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 在属性中填写的应用类型参数，Spring会帮忙注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">// 设置数据源</span></span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 设置实体类的包</span></span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;org.example.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">mapperScannerConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        <span class="comment">// 设置sql映射的包</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">&quot;org.example.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SpringConfig配置类中导入Mybatis配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.domain&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入jdbc配置类，Mybatis配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建持久层访问接口"><a href="#创建持久层访问接口" class="headerlink" title="创建持久层访问接口"></a>创建持久层访问接口</h3><p>创建org.example.dao.UserDao持久层访问接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:06:28</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into t_user(name, gender, age, phone, birthday) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;phone&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from t_user where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update t_user set name = #&#123;name&#125; , gender = #&#123;gender&#125;, age = #&#123;age&#125;, phone = #&#123;phone&#125;, birthday = #&#123;birthday&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建服务类"><a href="#创建服务类" class="headerlink" title="创建服务类"></a>创建服务类</h3><p>创建org.example.service.UserService服务类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User服务类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:11:37</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建org.example.service.impl.UserServiceImpl服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User服务实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:13:35</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User account)</span> &#123;</span><br><span class="line">        userDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        userDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置SpringConfig配置类的组件扫描选项，并删除用户类之前用于测试的<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.service&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入jdbc配置类，Mybatis配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试是否成功-2"><a href="#测试是否成功-2" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>重新编写org.example.App主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器的上下文，并传入我们的配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="comment">// 获取容器中的UsrServiceImpl</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">        <span class="comment">// 查找所有用户</span></span><br><span class="line">        List&lt;User&gt; users = service.findAll();</span><br><span class="line">        <span class="comment">// 打印所有用户</span></span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>刚刚踩了一些坑</strong></p><ol><li>SpringConfig中没有导入所有的配置，导致有些对象没有加载到容器中</li><li>JdbcConfig中使用properties中的数据没有对应正确，导致数据库一直连接不上</li><li>JdbcConfig中DruidDataSource的set没有set正确，导致数据库连接不上</li></ol><p>解决以上的问题后，运行程序，能够打印出你数据库中的数据就算成功了，我的输入如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">十二月 08, 2022 9:41:39 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">[User&#123;id=1, name=&#x27;马昆&#x27;, gender=&#x27;male&#x27;, age=18, phone=&#x27;19960796404&#x27;, birthday=2001-06-24&#125;, User&#123;id=2, name=&#x27;马强&#x27;, gender=&#x27;female&#x27;, age=23, phone=&#x27;18328195555&#x27;, birthday=1999-09-24&#125;, User&#123;id=3, name=&#x27;罗海人&#x27;, gender=&#x27;female&#x27;, age=22, phone=&#x27;13547682222&#x27;, birthday=2000-11-03&#125;]</span><br></pre></td></tr></table></figure><h2 id="配置Spring-test与Junit"><a href="#配置Spring-test与Junit" class="headerlink" title="配置Spring-test与Junit"></a>配置Spring-test与Junit</h2><h3 id="导入测试所需坐标"><a href="#导入测试所需坐标" class="headerlink" title="导入测试所需坐标"></a>导入测试所需坐标</h3><p><strong>先删除之前创建maven项目的时候自动生成的junit坐标</strong></p><p>在网站中搜索<strong>spring-test</strong>与<strong>junit</strong></p><p>我使用的版本分别是<code>5.3.18</code>与<code>4.12</code></p><p>将坐标导入到pom.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置测试类"><a href="#配置测试类" class="headerlink" title="配置测试类"></a>配置测试类</h3><p>重写<code>/src/test/java/</code>目录下org.example.AppTest测试类的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类启动器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 设置Spring环境对应的配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看是否输出正常，我的输出如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">十二月 08, 2022 10:07:06 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">[User&#123;id=1, name=&#x27;马昆&#x27;, gender=&#x27;male&#x27;, age=18, phone=&#x27;19960796404&#x27;, birthday=2001-06-24&#125;, User&#123;id=2, name=&#x27;马强&#x27;, gender=&#x27;female&#x27;, age=23, phone=&#x27;18328195555&#x27;, birthday=1999-09-24&#125;, User&#123;id=3, name=&#x27;罗海人&#x27;, gender=&#x27;female&#x27;, age=22, phone=&#x27;13547682222&#x27;, birthday=2000-11-03&#125;]</span><br><span class="line">User&#123;id=1, name=&#x27;马昆&#x27;, gender=&#x27;male&#x27;, age=18, phone=&#x27;19960796404&#x27;, birthday=2001-06-24&#125;</span><br></pre></td></tr></table></figure><h2 id="完成后的所有内容"><a href="#完成后的所有内容" class="headerlink" title="完成后的所有内容"></a>完成后的所有内容</h2><p><strong>到此为止就已经完成了配置，项目所有的文件内容列在下边儿</strong></p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><h5 id="org-example-config"><a href="#org-example-config" class="headerlink" title="org.example.config"></a>org.example.config</h5><p>JdbcConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> jdbc配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:43:30</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MybatisConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Mybatis配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:00:19</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 在属性中填写的应用类型参数，Spring会帮忙注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">// 设置实体类的包</span></span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;org.example.domain&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置数据源</span></span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">mapperScannerConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        <span class="comment">// 设置sql映射的包</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">&quot;org.example.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:07:29</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 表示需要扫描哪里，将有对应注解的类创建对象并添加到容器中</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;org.example.service&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 导入jdbc配置类，Mybatis配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="org-example-dao"><a href="#org-example-dao" class="headerlink" title="org.example.dao"></a>org.example.dao</h5><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:06:28</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into t_user(name, gender, age, phone, birthday) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;phone&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from t_user where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update t_user set name = #&#123;name&#125; , gender = #&#123;gender&#125;, age = #&#123;age&#125;, phone = #&#123;phone&#125;, birthday = #&#123;birthday&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="org-example-domain"><a href="#org-example-domain" class="headerlink" title="org.example.domain"></a>org.example.domain</h5><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 20:03:13</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="org-example-service"><a href="#org-example-service" class="headerlink" title="org.example.service"></a>org.example.service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User服务类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:11:37</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="org-example-service-impl"><a href="#org-example-service-impl" class="headerlink" title="org.example.service.impl"></a>org.example.service.impl</h6><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User服务实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/08 21:13:35</span></span><br><span class="line"><span class="comment"> * version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User account)</span> &#123;</span><br><span class="line">        userDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        userDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被销毁之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl要被销毁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="org-example-App"><a href="#org-example-App" class="headerlink" title="org.example.App"></a>org.example.App</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Spring容器的上下文，并传入我们的配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="comment">// 获取容器中的UsrServiceImpl</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">        <span class="comment">// 查找所有用户</span></span><br><span class="line">        List&lt;User&gt; users = service.findAll();</span><br><span class="line">        <span class="comment">// 打印所有用户</span></span><br><span class="line">        System.out.println(users);</span><br><span class="line">        <span class="comment">// 关闭钩子</span></span><br><span class="line">        context.registerShutdownHook();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 关闭</span></span><br><span class="line"><span class="comment">        * context.close();</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择mysql的官方驱动</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 后面对应为主机，mysql服务端口，数据库名</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?useSSL=true</span></span><br><span class="line"><span class="comment"># 数据库连接用户名</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">manager</span></span><br><span class="line"><span class="comment"># 用户密码</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">mk123456</span></span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h4><h5 id="org-example-AppTest"><a href="#org-example-AppTest" class="headerlink" title="org.example.AppTest"></a>org.example.AppTest</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> org.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类启动器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 设置Spring环境对应的配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-mybatis-junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-mybatis-junit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring框架坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JDBC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
            <tag> Junit </tag>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven入门笔记（1）</title>
      <link href="/2022/11/28/notes/maven-1/"/>
      <url>/2022/11/28/notes/maven-1/</url>
      
        <content type="html"><![CDATA[<h1 id="哔哩哔哩黑马程序员Maven全套教程学习"><a href="#哔哩哔哩黑马程序员Maven全套教程学习" class="headerlink" title="哔哩哔哩黑马程序员Maven全套教程学习"></a>哔哩哔哩黑马程序员Maven全套教程学习</h1><p><a href="https://www.bilibili.com/video/BV1Ah411S7ZE?p=1">视频链接地址</a></p><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><p>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)<br>POM (Project Object Model) :项目对象模型</p><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p><a href="https://maven.apache.org/download.cgi">官网地址</a></p><p>需要配置JAVA_HOME与MAVEN_HOME</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205102107977.png" alt="image-20221205102107977"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205102129144.png" alt="image-20221205102129144"></p><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p><a href="https://repo1.maven.org/">查找Jar包</a></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205102720877.png" alt="image-20221205102720877"></p><h3 id="Maven项目构建"><a href="#Maven项目构建" class="headerlink" title="Maven项目构建"></a>Maven项目构建</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205110056101.png" alt="image-20221205110056101"></p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖配置与依赖传递"><a href="#依赖配置与依赖传递" class="headerlink" title="依赖配置与依赖传递"></a>依赖配置与依赖传递</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205113953270.png" alt="image-20221205113953270"></p><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205114649766.png" alt="image-20221205114649766"></p><h2 id="周期与插件"><a href="#周期与插件" class="headerlink" title="周期与插件"></a>周期与插件</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205115154942.png" alt="image-20221205115154942"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/maven-1/image-20221205115253620.png" alt="image-20221205115253620"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Maven入门 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门笔记（4）</title>
      <link href="/2022/11/27/notes/vue2-4/"/>
      <url>/2022/11/27/notes/vue2-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员Vue2"><a href="#Bilibili黑马程序员Vue2" class="headerlink" title="Bilibili黑马程序员Vue2"></a><a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2+vue3</a>教程的学习笔记（4）</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由就是对应关系，Hash地址（锚链接）与组件之间的对应关系</p><p>使用锚链接不会导致页面刷新，并且能产生浏览历史</p><p>URL地址从<code>#</code>开始，<code>#</code>加它后面的部分就是Hash地址</p><p>通过<code>window.location.hash</code>可以查看页面的hash地址</p><h3 id="前端路由的工作方式"><a href="#前端路由的工作方式" class="headerlink" title="前端路由的工作方式"></a>前端路由的工作方式</h3><ol><li><p>用户点击了页面上的路由链接</p></li><li><p>导致了URL地址栏中的Hash值发生了变化</p></li><li><p>前端路由监听了到Hash地址的变化</p></li><li><p>前端路由把当前Hash地址对应的组件渲染都浏览器中</p></li></ol><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221127164723111.png" alt="image-20221127164723111"></p><p>原生JS使用<code>window.onhashchange</code>就能监听页面hash地址的变化</p><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>vue-router是vue.js官方给出的路由解决方案。它只能结合vue项目进行使用，能够轻松的管理SPA项目中组件的切换。</p><p><a href="https://router.vuejs.org/zh/">官网地址</a></p><ol><li><p>安装vue-router包</p><ol><li><code>npm install vue-router@3.5.2 -S</code></li></ol></li><li><p>创建路由模块</p><ol><li><p>在src 源代码目录下，新建router&#x2F;index.js路由模块，并初始化如下的代码:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1．导入Vue和VueRouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2．调用Vue.use()函数，把 VueRouter安装为Vue的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3．创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4．向外共享路由的实例对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ol></li><li><p>导入并挂载路由模块</p><ol><li>在main.js中挂载路由 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js可以省略</span></span><br><span class="line"><span class="comment">// 在模块化导入的时候，如果只给了路径，则默认导入这个文件夹下，名字叫做index.js的文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 路由的实例对象</span></span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>声明路由链接和占位符</p><ol><li><p>只要在项目中安装和配置了vue-router，就可以使用router-view这个组件了，用作占位符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;a href=&quot;#/home&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;#/movie&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;#/about&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Movie.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// routes是一个数组，作用:定义“hash地址”与“组件之间的对应关系</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">componnent</span>: <span class="title class_">Home</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">componnent</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">componnent</span>: <span class="title class_">About</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>当安装和配置了vue-router后，就可以使用router-link来替代普通的a链接了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/movie&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>路由重定向指的是:用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。通过路由规则的redirect属性，指定一个新的路由地址，可以很方便地设置路由的重定向:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 使用重定向</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">componnent</span>: <span class="title class_">Home</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">componnent</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>通过路由实现组件的嵌套展示，叫做嵌套路由。</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221128114341148.png" alt="image-20221128114341148"></p><p>通过children属性声明子路由规则</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221128114525533.png" alt="image-20221128114525533"></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>动态路由指的是:把Hash地址中可变的部分定义为参数项从而提高路由规则的复用性。</p><p>在vue-router中使用英文的冒号（:）来定义路由的参数项。示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由中的动态参数以︰进行声明，冒号后面的是动态参数的名称</span></span><br><span class="line"><span class="comment">// 如何在Movie组件中获取Movie的ID值</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/movie/:id&#x27;</span> , <span class="attr">component</span>: <span class="title class_">Movie</span> &#125;</span><br></pre></td></tr></table></figure><p>在Movie组件中可以使用<code>this.$route.params.id</code>获取哈希地址名为id的动态地址参数</p><p><code>this.$route</code>是路由的参数对象</p><p><code>this.$router</code>是路由的“导航对象”</p><h3 id="开启props传参"><a href="#开启props传参" class="headerlink" title="开启props传参"></a>开启props传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在路由模块中定义，开启props</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/movie/mid&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>, <span class="attr">props</span>: <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中接收</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;mid&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="params和query"><a href="#params和query" class="headerlink" title="params和query"></a>params和query</h3><p>路径参数和查询参数</p><ol><li><p><code>/</code>后面的是路径参数，使用<code>this.$route.params</code>来获取</p></li><li><p><code>?</code>后面的是查询参数，使用<code>this.$route.query</code>来获取</p></li><li><p>需要完成路径使用<code>this.$route.fullPath</code>，只要路径使用<code>this.$route.path</code></p></li></ol><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>在浏览器中，点击链接实现导航的方式，叫做声明式导航。例如:</p><p>普通网页中点击<code>&lt;a&gt;</code>链接、vue项目中点击<code>&lt;router-link&gt;</code>都属于声明式导航</p><p>在浏览器中，调用API方法实现导航的方式，叫做编程式导航。例如:</p><p>普通网页中调用<code>location.href</code>跳转到新页面的方式，属于编程式导航</p><p><strong>vue-router提供了许多编程式导航的API，（router是导航对象），其中最常用的导航API分别是:</strong></p><ol><li><code>this.$router.push(&#39;hash地址&#39;)</code><ol><li>跳转到指定hash 地址，并增加一条历史记录</li></ol></li><li><code>this.$router.replace(&#39;hash地址&#39;)</code><ol><li>跳转到指定的hash地址，并替换掉当前的历史记录</li></ol></li><li><code>this.$router.go(数值n)</code><ol><li>可以在浏览历史中前进和后退。</li><li>如果后退的层数超过上限，则原地不动</li></ol></li></ol><p>在实际开发中，一般只会前进和后退一层页面。因此 vue-router提供了如下两个便捷方法:</p><ol><li><code>$router.back()</code>后退一层</li><li><code>$router.forward()</code>前进一层</li></ol><p><strong>在行内使用编程式导航跳转的时候,<code>this</code>必须要省略，否则会报错!</strong></p><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>导航守卫可以控制路由的访问权限。示意图如下:</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221128123448389.png" alt="image-20221128123448389"></p><p><strong>全局前置守卫</strong></p><p>每次发生路由的导航跳转时，都会触发全局前置守卫。因此在全局前置守卫中，程序员可以对每个路由进行访问权限的控制:</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221128132040472.png" alt="image-20221128132040472"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要发生了路由的跳转，必然会触发beforeEach指定的 function回调函数</span></span><br><span class="line"><span class="comment">// to 是将要访问的路由的信息对象</span></span><br><span class="line"><span class="comment">// from是将要离开的路由的信息对象</span></span><br><span class="line"><span class="comment">// next 是一个函数，调用next()表示放行，允许这次路由导航</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">function</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// next()函数表示放行的意思</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>next函数的3种调用方式</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221128133552767.png" alt="image-20221128133552767"></p><p><strong>控制后台主页的访问权限</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-4/image-20221128134257115.png" alt="image-20221128134257115"></p><h2 id="Vant组件库"><a href="#Vant组件库" class="headerlink" title="Vant组件库"></a>Vant组件库</h2><p><a href="https://vant-contrib.gitee.io/vant-weapp/0.x/#/intro">官网地址</a></p><p><a href="https://youzan.github.io/vant-weapp/#/quickstart">帮助文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>vue2项目使用<code>npm install vant -S</code>安装，vue3项目使用<code>npm install vant@next -S</code>安装</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue入门 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门笔记（3）</title>
      <link href="/2022/11/27/notes/vue2-3/"/>
      <url>/2022/11/27/notes/vue2-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员Vue2"><a href="#Bilibili黑马程序员Vue2" class="headerlink" title="Bilibili黑马程序员Vue2"></a><a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2+vue3</a>教程的学习笔记（3）</p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>动态切换组件的显示与隐藏</p><h3 id="component标签"><a href="#component标签" class="headerlink" title="component标签"></a>component标签</h3><p>vue提供了一个内置的<code>&lt;component&gt;</code>组件，专门用来实现动态组件的渲染。</p><p><code>&lt;component&gt;</code>基本使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 使用component的is属性，插入其他组件，component就相当于一个占位符</span><br><span class="line">&lt;component is=&quot;Left&quot;&gt;&lt;/component&gt;</span><br><span class="line">// 绑定动态的属性，方便后期修改</span><br><span class="line">&lt;omponent :is=&quot;comName&quot;&gt;&lt;/omponent&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Left from &#x27;@/components/Left.vue&#x27;</span><br><span class="line">    import Right from &#x27;@/components/Right.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                comName: &#x27;Right&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Left,</span><br><span class="line">            Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="动态切换组件的显示与隐藏"><a href="#动态切换组件的显示与隐藏" class="headerlink" title="动态切换组件的显示与隐藏"></a>动态切换组件的显示与隐藏</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 绑定动态的属性，方便后期修改</span><br><span class="line">&lt;omponent :is=&quot;comName&quot;&gt;&lt;/omponent&gt;</span><br><span class="line">&lt;button @click=&quot;comName = &#x27;Left&#x27;&quot;&gt;显示Left&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;comName = &#x27;Right&#x27;&quot;&gt;显示Right&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Left from &#x27;@/components/Left.vue&#x27;</span><br><span class="line">    import Right from &#x27;@/components/Right.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                comName: &#x27;Right&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Left,</span><br><span class="line">            Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="keep-alive的使用"><a href="#keep-alive的使用" class="headerlink" title="keep-alive的使用"></a><code>keep-alive</code>的使用</h3><p>动态创建和隐藏组件会被销毁或者重新创建，组件的状态不会被保存</p><p>使用<code>keep-alive</code>标签可以解决以上问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// keep-alive可以把内部的组件进行缓存，而不是销毁组件</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">     // 绑定动态的属性，方便后期修改</span><br><span class="line">        &lt;omponent :is=&quot;comName&quot;&gt;&lt;/omponent&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">&lt;button @click=&quot;comName = &#x27;Left&#x27;&quot;&gt;显示Left&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;comName = &#x27;Right&#x27;&quot;&gt;显示Right&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Left from &#x27;@/components/Left.vue&#x27;</span><br><span class="line">    import Right from &#x27;@/components/Right.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                comName: &#x27;Right&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Left,</span><br><span class="line">            Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>keep-alive</code>对应的生命周期函数</p><ol><li>当组件被缓存，会触发deactivated</li><li>当组件被激活，会触发activated</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 当组件第一次被创建的时候，既会执行created生命周期，也会执行activated生命周期</span></span><br><span class="line">    <span class="comment">// 当组件被激活的时候，只会触发activated生命周期，不再触发created，因为组件没有被重新创建</span></span><br><span class="line">    <span class="title function_">ceated</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被创建了&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被激活了&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被缓存了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="keep-alive的属性"><a href="#keep-alive的属性" class="headerlink" title="keep-alive的属性"></a><code>keep-alive</code>的属性</h3><h4 id="include属性"><a href="#include属性" class="headerlink" title="include属性"></a><code>include</code>属性</h4><p>include属性用来指定: 只有名称匹配的组件会被缓存。</p><p>多个组件名之间使用英文的逗号<code>,</code>分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 表示Left，Right都会被缓存</span><br><span class="line">&lt;keep-alive include=&quot;Left,Right&quot;&gt;</span><br><span class="line">    &lt;omponent :is=&quot;comName&quot;&gt;&lt;/omponent&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="exclude属性"><a href="#exclude属性" class="headerlink" title="exclude属性"></a><code>exclude</code>属性</h4><p>与<code>include</code>相反，<strong>这两个属性不能同时使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 表示Left组件不会被缓存</span><br><span class="line">&lt;keep-alive exclude=&quot;Left&quot;&gt;</span><br><span class="line">    &lt;omponent :is=&quot;comName&quot;&gt;&lt;/omponent&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组件声明的name属性"><a href="#组件声明的name属性" class="headerlink" title="组件声明的name属性"></a>组件声明的name属性</h3><p>在组件默认导出时，使用name节点为组件取名</p><p>如果使用了<code>name</code>那么<code>include</code>和<code>exclude</code>就需要传<code>name</code>中的名字了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不适用name节点，那么名字默认为组件被注册时的名称</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;MyRight&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组件注册名称主要是用来以标签形式使用</strong></p><p>对比:</p><ol><li>组件的注册名称的主要应用场景时：以标签形式，把注册好的组件，渲染和使用到页面结构之中</li><li>组件声明的<code>name</code>名称主要的应用场景：结合<code>&lt;keep-alive&gt;</code>标签实现组件缓存功能，以及在调试工具中看到组件的<code>name</code>名称</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>插槽（Slot)是vue为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-3/image-20221127122256094.png" alt="image-20221127122256094"></p><p>如果组件没有定义插槽，那么使用组件时传入的自定义内容会被丢弃</p><h3 id="v-solt"><a href="#v-solt" class="headerlink" title="v-solt"></a><code>v-solt</code></h3><p>vue官方规定，每一个slot插槽，都要有一个name名称</p><p>如果省略了slot的name属性，则有一个默认名称叫做default</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 声明一个插槽区域 --&gt;</span><br><span class="line">&lt;solt name=&quot;default&quot;&gt;&lt;/solt&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，在使用组件的时候，提供的内容都会被填充到名字为default的插槽之中</p><p>使用<code>v-slot</code>可以将自定义内容填充到指定的<code>slot</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">         这是Left组件的内容区域，名称的p标签   </span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template #default&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">            这是我的自定义内容</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>如果要把内容填充到指定名称的插槽中，需要使用<code>v-slot:</code>这个指令</li><li><code>v-slot:</code>后面要跟上插槽的名字</li><li><code>v-slot:</code>指令不能直接用在元素身上，必须用在<code>template</code>标签上</li><li><code>template</code>这个标签，它是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的html元素</li><li><code>v-slot:</code>指令的简与形式是<code>#</code></li><li>如果需要定义插槽的默认内容，直接写在组件的<code>slot</code>标签中</li></ol><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>插槽取了名字，能够传入多个自定义内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 要被使用的带插槽的组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;slot name=&quot;article&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Home&gt;</span><br><span class="line">    &lt;template v-slot:article&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">            &lt;p&gt;这是一篇文章中的一段话&lt;/p&gt; </span><br><span class="line">                &lt;p&gt;这是一篇文章中的一段话&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;这是一篇文章中的一段话&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;这是一篇文章中的一段话&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;这是一篇文章中的一段话&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">    &lt;/Home&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Home from &#x27;@/components/Home.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Home</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>通过插槽可以获取插槽组件中定义的数据</p><p>在封装组件时，为预留的<code>&lt;slot&gt;</code>提供属性对应的值，这种用法，叫做”作用域插槽“（插槽中带数据）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;slot name=&quot;article&quot; msg=&quot;hello world&quot; :user=&quot;userInfo&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Home&gt;</span><br><span class="line">        &lt;!-- 建议使用scope来接收插槽数据 --&gt;</span><br><span class="line">    &lt;template v-slot:article=&quot;scope&quot;&gt;</span><br><span class="line">&#123;&#123; scope.userInfo &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">    &lt;/Home&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Home from &#x27;@/components/Home.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Home</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                userInfo: &#123;</span><br><span class="line">                    name: &#x27;张三&#x27;,</span><br><span class="line">                    age: 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>vue官方提供了<code>v-text</code>、<code>v-for</code>、<code>v-mogel</code>、<code>v-if</code>等常用的指令。除此之外vue还允许开发者自定义指令。</p><p>vue中有<strong>私有自定义指令</strong>和<strong>全局自定义指令</strong></p><h3 id="私有自定义指令"><a href="#私有自定义指令" class="headerlink" title="私有自定义指令"></a>私有自定义指令</h3><p>在每个vue 组件中，可以在 directives节点下声明私有自定义指令。示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 私有自定义指令的节点</span></span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="comment">// 定义一个color指令，指向一个配置对象</span></span><br><span class="line">        <span class="attr">color</span>: &#123;</span><br><span class="line">            <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发bind函数</span></span><br><span class="line">            <span class="comment">// 形参中的el表示当前指令所绑定的那个DOM对象</span></span><br><span class="line">            <span class="title function_">bind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了v-color的bind函数&#x27;</span>)</span><br><span class="line">               el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取指令绑定的值"><a href="#获取指令绑定的值" class="headerlink" title="获取指令绑定的值"></a>获取指令绑定的值</h3><p>使用<code>binding.value</code>来获取传递的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p v-color=&quot;color&quot;&gt;这是一段话&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">                color: &#x27;blue&#x27;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    // 私有自定义指令的节点</span><br><span class="line">        directives: &#123;</span><br><span class="line">            // 定义一个color指令，指向一个配置对象</span><br><span class="line">            color: &#123;</span><br><span class="line">                // 当指令第一次被绑定到元素上的时候，会立即触发bind函数</span><br><span class="line">                // 形参中的el表示当前指令所绑定的那个DOM对象</span><br><span class="line">                // 第二个参数推荐使用binding</span><br><span class="line">                bind(el,binding) &#123;</span><br><span class="line">                    console.log(&#x27;触发了v-color的bind函数&#x27;)</span><br><span class="line">                    el.style.color = binding.value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="update函数"><a href="#update函数" class="headerlink" title="update函数"></a>update函数</h3><p>bind函数只调用1次:当指令第一次绑定到元素时调用，当DOM更新时 bind函数不会被触发。update数会在每次DOM更新时被调用。示例代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;p v-color=&quot;color&quot;&gt;这是一段话&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">                color: &#x27;blue&#x27;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    // 私有自定义指令的节点</span><br><span class="line">        directives: &#123;</span><br><span class="line">            // 定义一个color指令，指向一个配置对象</span><br><span class="line">            color: &#123;</span><br><span class="line">                // 当指令第一次被绑定到元素上的时候，会立即触发bind函数</span><br><span class="line">                // 形参中的el表示当前指令所绑定的那个DOM对象</span><br><span class="line">                // 第二个参数推荐使用binding</span><br><span class="line">                bind(el,binding) &#123;</span><br><span class="line">                    console.log(&#x27;触发了v-color的bind函数&#x27;)</span><br><span class="line">                    el.style.color = binding.value</span><br><span class="line">                &#125;,</span><br><span class="line">             // 在DOM更新的时候，会触发update函数</span><br><span class="line">                update(el,binding) &#123;</span><br><span class="line">                    console.log(&#x27;触发了v-color的bind函数&#x27;)</span><br><span class="line">                    el.style.color = binding.value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h3><p>如果bind和update函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 私有自定义指令的节点</span></span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="title function_">color</span>(<span class="params">el,binding</span>) &#123;</span><br><span class="line">            el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h3><p>全局共享的自定义指令需要通过<code>Vue.directive()</code>进行声明，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1:字符串，表示全局自定义指令的名字</span></span><br><span class="line"><span class="comment">// 参数2:对象，用来接收指令的参数值</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果bind与update的处理一样，则同样可以简写</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="keyword">function</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="main-js中的小提示"><a href="#main-js中的小提示" class="headerlink" title="main.js中的小提示"></a>main.js中的小提示</h2><p><code>Vue.config.productionTip = false</code>表示是否能看到vue在控制台的提示信息</p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>可组装的JavaScript和JSX检查工具</p><p><a href="http://eslint.cn/">官网地址</a></p><p>vscode安装vetur插件，并更改vscode缩进为2格</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-3/image-20221127134002900.png" alt="image-20221127134002900"></p><p>设置粘贴的代码格式化和保存时代码格式化</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-3/image-20221127134240057.png" alt="image-20221127134240057"></p><h3 id="配置文件的rules规则"><a href="#配置文件的rules规则" class="headerlink" title="配置文件的rules规则"></a>配置文件的rules规则</h3><p>创建一个带ESLint的vue项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建vue项目</span></span><br><span class="line">$ vue create demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择CSS预处理器 CSS Pre-processors</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择vue2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择Less</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择ESLint的规范 ESLint + Standard config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择In dedicated config files，单独存放配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择Lint on save，保存时格式化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用保存配置，输入n</span></span><br></pre></td></tr></table></figure><p>项目根目录中的<code>.eslintrc.js</code>文件就是ESLint的配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/standard&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 表示在开发阶段不报错，在发布阶段报错</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件的rules节点下的配置含义可以在<a href="http://eslint.cn/docs/rules/">官方文档</a>中查到</p><h3 id="配置Visual-Studio-Code"><a href="#配置Visual-Studio-Code" class="headerlink" title="配置Visual Studio Code"></a>配置Visual Studio Code</h3><p>VSCode插件，我只配了ESLint</p><h4 id="ESLint-1"><a href="#ESLint-1" class="headerlink" title="ESLint"></a>ESLint</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在settions.json配置对象根节点中添加如下配置</span></span><br><span class="line"><span class="comment">// ESLint插件的配置</span></span><br><span class="line"><span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;source.fixAll&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>如果有很多个组件都要使用axios，每个组件都import以下，很麻烦</p><h3 id="挂载axios"><a href="#挂载axios" class="headerlink" title="挂载axios"></a>挂载axios</h3><p>因为每个组件都是Vue的一个实例，就可以为Vue挂载一个属性，在main.js为Vue挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义请求根路径,这样在后面使用axios的请求路径就不用加上这一段了</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://www.baidu.com:8089&#x27;</span></span><br><span class="line"><span class="comment">// 挂在在$http中，也可以是其他属性，但是这样规范些</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>挂载axios在Vue上的方法不太好，不能实现api接口的复用</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue入门 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2学习笔记（1）基础篇</title>
      <link href="/2022/11/25/notes/springboot2-1/"/>
      <url>/2022/11/25/notes/springboot2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="黑马程序员SpringBoot2学习笔记"><a href="#黑马程序员SpringBoot2学习笔记" class="headerlink" title="黑马程序员SpringBoot2学习笔记"></a>黑马程序员SpringBoot2学习笔记</h1><p><a href="https://www.bilibili.com/video/BV15b4y1a7yG">Bilibili视频地址</a></p><h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><p><a href="https://spring.io/">Spring官网</a></p><p>SpringBoot是Spring中的老大</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习 </tag>
            
            <tag> SpringBoot入门 </tag>
            
            <tag> Spring2.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门笔记（2）</title>
      <link href="/2022/11/25/notes/vue2-2/"/>
      <url>/2022/11/25/notes/vue2-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员Vue2"><a href="#Bilibili黑马程序员Vue2" class="headerlink" title="Bilibili黑马程序员Vue2"></a><a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2+vue3</a>教程的学习笔记（2）</p><h2 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h2><p>什么是单页面应用程序，SPA（Single Page Application）</p><p>所有的功能与交互都在这唯一的一个页面内完成。</p><p>vue-cli是Vue.js开发的标准工具。简化了程序员基于webpack创建工程化的Vue项目的工程。</p><p><a href="https://cli.vuejs.org/zh/">中文官网</a></p><h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><p>它是npm上的一个全局包使用<code>npm install -g @vue/cli</code>来进行安装，安装完成后使用<code>vue --version</code>来查看是否安装成功</p><p><strong>创建项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">$ vue create &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>会出现如下提示，并选择手动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset:</span><br><span class="line">  <span class="comment"># vue3预设</span></span><br><span class="line">&gt; Default ([Vue 3] babel, eslint)</span><br><span class="line">  <span class="comment"># vue2预设</span></span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  <span class="comment"># 手动选择要安装哪些功能</span></span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>使用空格选择与取消部分选项，然后回车</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125163616553.png" alt="选择需要的下载"></p><p>选择vue2.x，然后回车</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125163924064.png" alt="选择vue2.x"></p><p>选择Less，回车</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164020628.png" alt="选择Less"></p><p>选择第一项，将babel等插件的配置项，放到自己独立的文件中，回车</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164240909.png" alt="选择独立配置"></p><p>输入y保存我们的选项作为预设，回车</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164417096.png" alt="保存预设"></p><p>输入为预设取的别名，然后回车</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164516315.png" alt="为预设取别名"></p><p>等待加载完成后，进入项目目录，执行<code>npm run serve</code>命令让项目跑起来，打开控制台打印的url地址，查看效果。</p><h3 id="src目录和构成"><a href="#src目录和构成" class="headerlink" title="src目录和构成"></a>src目录和构成</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assets文件夹：存放项目中用到的静态资源文件，例如：css样式表、图片资源</span><br><span class="line">components文件夹：程序员封装的、可复用的组件，都要放到componts目录下</span><br><span class="line">main.js文件：项目的入口，整个项目的运行，要先执行main.js</span><br><span class="line">App.vue：是项目的根组件</span><br></pre></td></tr></table></figure><h3 id="vue项目的运行流程"><a href="#vue项目的运行流程" class="headerlink" title="vue项目的运行流程"></a>vue项目的运行流程</h3><p>通过main.js把App.vue渲染到index.html的指定区域中</p><ol><li>App.vue 用来编写待渲染的模板结构</li><li>index.html中需要预留一个<strong>el区域</strong></li><li>mian.js把App.vue渲染到了index.html所预留的区域中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $mount(&#x27;#app&#x27;)就相当于el: &#x27;#app&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h2><p>只要是<code>.vue</code>结尾的文件，就是vue组件</p><h3 id="vue组件的三个组成部分"><a href="#vue组件的三个组成部分" class="headerlink" title="vue组件的三个组成部分"></a>vue组件的三个组成部分</h3><ol><li>template组件的模板结构</li><li>script         组件的JavaScript行为</li><li>style          组件的样式</li></ol><p><strong>script</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;test-box&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是用户自定义的Test.vue---&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 默认导出，这是固定写法</span><br><span class="line">    export default &#123;</span><br><span class="line">        // .vue组件中的data不能像之前一样，不能指向对象。</span><br><span class="line">        // 组件中的data必须是一个函数</span><br><span class="line">        /*data: &#123;</span><br><span class="line">            username: &#x27;张三&#x27;</span><br><span class="line">        &#125;*/</span><br><span class="line">        data() &#123;</span><br><span class="line">            // 这个return出去的对象中，可以定义数据</span><br><span class="line">            return &#123;</span><br><span class="line">                username: &#x27;张三&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        method: &#123;</span><br><span class="line">            changeName() &#123;</span><br><span class="line">                // 在组件中，this就表示当前组件的实例对象</span><br><span class="line">                console.log(this);</span><br><span class="line">                this.username = &#x27;李四&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前组件中的侦听器</span><br><span class="line">        watch: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前组件中的计算属性</span><br><span class="line">        computed: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前组件的过滤器</span><br><span class="line">filters: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .test-box &#123;</span><br><span class="line">     background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>在template节点下只能有一个根元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 错误示范 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;test-box&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是用户自定义的Test.vue---&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 正确示范 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;test-box&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是用户自定义的Test.vue---&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>在style节点支持less语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 支持less --&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 不支持less，支持css，可不写 --&gt;</span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="组件之间的父子关系"><a href="#组件之间的父子关系" class="headerlink" title="组件之间的父子关系"></a>组件之间的父子关系</h3><p>组件封装好之后，彼此之间是相互独立的，不存在父子关系</p><p>在使用组件时，根据彼此的嵌套关系，形成了父子关系，兄弟关系</p><h3 id="使用组件的三个步骤"><a href="#使用组件的三个步骤" class="headerlink" title="使用组件的三个步骤"></a>使用组件的三个步骤</h3><ol><li>使用import语法导入需要的组件</li><li>使用components节点注册组件</li><li>以标签的形式使用刚才注册的组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;!-- 以标签形式，使用注册好的组件 --&gt;</span><br><span class="line">        &lt;Left&gt;&lt;/Left&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入需要使用的.vue组件</span><br><span class="line">import Left from &#x27;@/components/left.vue&#x27;;</span><br><span class="line">    import Right from &#x27;@/components/right.vue&#x27;;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#x27;Left&#x27;: Left,</span><br><span class="line">            &#x27;Right&#x27;: Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>visual studio code 路径提示插件<code>Path Autocomplete</code></p><h3 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h3><p>之前使用components注册的是私有组件，只能在被导入的组件里使用</p><p>在vue项目的<strong>main.js</strong>入口文件中，通过<code>Vue.component()</code>方法，可以注册全局组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Count.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是组件注册名，第二个参数是需要注册的组件</span></span><br><span class="line"><span class="comment">// 组件注册名建议大写开头</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">componnent</span>(<span class="string">&#x27;MyCount&#x27;</span>,<span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure><p>Visual Studio Code自动补齐标签插件<code>Auto Close Tag</code></p><h3 id="组件里的props"><a href="#组件里的props" class="headerlink" title="组件里的props"></a>组件里的props</h3><p>组件的自定义属性，在封装通用组件的时候，合理使用props可以极大提高组件的复用性</p><p>封装者通过props可以让使用者在使用组件时传参</p><p>props中的数据，可以直接在模板结构中使用，不能直接修改props的值，props中的值是只读的（可写，但是会报错）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值</span></span><br><span class="line">    <span class="comment">// 在使用标签引入时使用属性来传值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;MyCount init=&quot;9&quot;&gt;&lt;/MyCount&gt;</span></span><br><span class="line"><span class="comment">    传数字</span></span><br><span class="line"><span class="comment">    &lt;MyCount v-bind:init=&quot;9&quot;&gt;&lt;/MyCount&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;init&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 把props的值赋值给变量</span></span><br><span class="line">            <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">init</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>props default默认值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 只能通过对象方式初始化值</span></span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="comment">// 自定义属性A</span></span><br><span class="line">        <span class="comment">// 自定义属性B</span></span><br><span class="line">        <span class="comment">// 自定义配置C</span></span><br><span class="line">        <span class="attr">init</span>: &#123;</span><br><span class="line">        <span class="comment">// 如果外界使用此组件时，如果没看又传init值，则默认值生效</span></span><br><span class="line">            <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>props  type值类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 只能通过对象方式初始化值</span></span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="comment">// 自定义属性A</span></span><br><span class="line">        <span class="comment">// 自定义属性B</span></span><br><span class="line">        <span class="comment">// 自定义配置C</span></span><br><span class="line">        <span class="attr">init</span>: &#123;</span><br><span class="line">        <span class="comment">// 如果外界使用此组件时，如果没看又传init值，则默认值生效</span></span><br><span class="line">            <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="comment">// 如果传递过来的值与type不相符，那么终端会报错</span></span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Number</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>props required必填项</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 只能通过对象方式初始化值</span></span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="comment">// 自定义属性A</span></span><br><span class="line">        <span class="comment">// 自定义属性B</span></span><br><span class="line">        <span class="comment">// 自定义配置C</span></span><br><span class="line">        <span class="attr">init</span>: &#123;</span><br><span class="line">        <span class="comment">// 如果外界使用此组件时，如果没看又传init值，则默认值生效</span></span><br><span class="line">            <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="comment">// 如果传递过来的值与type不相符，那么终端会报错</span></span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">            <span class="comment">// 必填项校验，如果使用此组件时没有传init的值，会报错</span></span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样式冲突"><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h3><p>写在.vue组件中的样式会全局生效，会造成多个组件样式冲突的问题。</p><p>为组件中的style标签加上<code>scoped</code>属性，可以解决这个问题。</p><p><strong>scoped原理：为组件中每个标签添加一个自定义属性，在style中使用属性选择器。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">    h3 &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>如果使用<code>scoped</code>属性，那么它的父元素就不能修改它的样式，就需要用到<code>/deep/</code>修改子组件的样式</p><p>当使用第三方组件库的时候，如果需要更改第三方默认样式，则需要用到<code>/deep/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">    /deep/ h5 &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="vue组件的实例对象"><a href="#vue组件的实例对象" class="headerlink" title="vue组件的实例对象"></a>vue组件的实例对象</h3><p>浏览器并不能识别.vue文件，是由<code>vue-template-compiler</code>包编译成JS交给浏览器来执行。</p><p>以标签形式引用组件才会创建组件实例。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>一个组件从创建 -&gt; 运行 -&gt; 销毁的整个阶段，强调的是一个时间段。</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126104840924.png" alt="image-20221126104840924"></p><p><a href="https://v2.cn.vuejs.org/">vue2官方文档</a></p><p>一使用组件的标签就相当于new了一个组件实例</p><h3 id="组件创建阶段"><a href="#组件创建阶段" class="headerlink" title="组件创建阶段"></a>组件创建阶段</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126113123020.png" alt="image-20221126113123020"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件的props/data/methods都尚未被创建，处于不可用状态</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件的props/data/methods都已被创建，但是组件的模板结构尚未生成</span></span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        concole.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将要把内存中编译好的HTML结构渲染到浏览器中，此时浏览器中还没有当前组件的DOM结构。</span></span><br><span class="line">    <span class="comment">// 几乎不会被用到</span></span><br><span class="line">    <span class="title function_">beforMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 已将把内存中的HTML结构，渲染到了浏览器</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// 可以在此操作DOM元素 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数据发生了变化，但页面元素还没更新</span></span><br><span class="line">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 已根据最新的数据完成了组件DOM元素的重新渲染</span></span><br><span class="line">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当数据变化后希望操作最新的DOM结构在此操作</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件将要被销毁时（组件还没有被销毁）</span></span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>created生命周期函数非常常用，经常在它里面调用methods中的方法，请求服务器的数据，并且将请求到的数据，转存到data中，供template模板渲染使用</strong></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126134313003.png" alt="image-20221126134313003"></p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126134334379.png" alt="image-20221126134334379"></p><h3 id="组件运行阶段"><a href="#组件运行阶段" class="headerlink" title="组件运行阶段"></a>组件运行阶段</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126135131635.png" alt="image-20221126135131635"></p><h3 id="组件销毁阶段"><a href="#组件销毁阶段" class="headerlink" title="组件销毁阶段"></a>组件销毁阶段</h3><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126201935215.png" alt="image-20221126201935215"></p><h2 id="父子传值"><a href="#父子传值" class="headerlink" title="父子传值"></a>父子传值</h2><h3 id="父向子使用自定义属性"><a href="#父向子使用自定义属性" class="headerlink" title="父向子使用自定义属性"></a>父向子使用自定义属性</h3><p>父类在标签中使用props传值+标签传值，子组件定义自定义属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--子组件中定义 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        props: [&#x27;init&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件中定义 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Son :init=&quot;msg&quot;&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg: &#x27;hello&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>不要修改props的值</strong></p><h3 id="子向父使用自定义事件"><a href="#子向父使用自定义事件" class="headerlink" title="子向父使用自定义事件"></a>子向父使用自定义事件</h3><p>子向父共享数据使用自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                count: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add() &#123;</span><br><span class="line">                this.count += 1;</span><br><span class="line">                // 修改数据时，通过$emit()触发自定义事件</span><br><span class="line">                this.$emit(&#x27;numchange&#x27;, this.count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 绑定自定义事件 --&gt;</span><br><span class="line">&lt;Son @numchange=&quot;getNumCount&quot;&gt;&lt;/Son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                countFromSon: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getNewCount(val) &#123;</span><br><span class="line">                this.countFromSon = val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="兄弟组件之间的数据共享"><a href="#兄弟组件之间的数据共享" class="headerlink" title="兄弟组件之间的数据共享"></a>兄弟组件之间的数据共享</h3><p>Vue2中，兄弟组件之间数据共享的方案是EventBus</p><p>这是一种现成的解决方案</p><p><img src="https://image.insectmk.cn/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221126211531540.png" alt="image-20221126211531540"></p><p><strong>使用步骤</strong></p><ol><li>创建eventBus.js模块，并向外共享一个Vue的实例对象</li><li>在数据发送方，调用<code>bus.$emit(&#39;事件名称&#39;,要发送的数据)</code>方法触发自定义事件</li><li>在数据接收方，调用<code>bus.$(&#39;事件名称&#39;,事件处理函数)</code>方法注册一个自定义事件</li></ol><h2 id="ref引用"><a href="#ref引用" class="headerlink" title="ref引用"></a>ref引用</h2><p>在vue中，程序员不需要操作DOM，只需要将数据维护好。（数据驱动视图）</p><p>在vue项目中，强烈不建议安装和使用jQuery</p><p>ref辅助程序员在不依赖jQuery的情况下，获取DOM元素或组件的引用</p><p>每个vue的组件实例上，都包含一个<code>$refs</code>对象，里面存储看对应的DOM元素或组件的引用。默认情况下，组件的<code>$refs</code>指向一个空对象。</p><h3 id="ref引用DOM"><a href="#ref引用DOM" class="headerlink" title="ref引用DOM"></a>ref引用DOM</h3><p><strong>如何拿到某个DOM元素的引用</strong></p><ol><li>为标签添加<code>ref</code>属性，一个组件里属性的值不能重复</li><li>使用<code>$refs</code>对象获取标签指定的<code>ref</code>值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h5 ref=&quot;myTag&quot;&gt;&lt;/h5&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(this.$refs.myTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="ref应用组件"><a href="#ref应用组件" class="headerlink" title="ref应用组件"></a>ref应用组件</h3><p><strong>ref也可以用在组件的标签引用上，用<code>$refs</code>访问后是组件的实例对象，就可以访问它的属性和方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h5 ref=&quot;myTag&quot;&gt;&lt;/h5&gt;</span><br><span class="line">&lt;MyComp ref=&quot;MyComp&quot;&gt;&lt;/MyComp&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyComp from &#x27;@/components/MyComp.vue&#x27;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(this.$refs.myTag);</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            MyComp</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(this.$refs.myTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="this-nextTick-callback"><a href="#this-nextTick-callback" class="headerlink" title="this.$nextTick(callback)"></a><code>this.$nextTick(callback)</code></h3><p><strong>将callback函数在页面重新渲染好后再执行。</strong></p><p>因为有时候页面还没更新就获取<code>ref</code>的值，那个时候<code>ref</code>还并没有出现，所以需要用到<code>this.$nextTick(callback)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h5 v-if=&quot;isShow&quot; ref=&quot;myTag&quot;&gt;&lt;/h5&gt;</span><br><span class="line">&lt;h2 v-else ref=&quot;myTag2&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;doSome&quot;&gt;显示h2&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                isShow: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            doSome() &#123;</span><br><span class="line">                this.isShow = false;</span><br><span class="line">                // 因为数据更新了，但是DOM还没有重新加载，所以要使用$nextTick方法</span><br><span class="line">                this.$nextTick(() =&gt; &#123;</span><br><span class="line">                    console.log(this.$refs.myTag)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h2><h3 id="some循环"><a href="#some循环" class="headerlink" title="some循环"></a>some循环</h3><p>forEach循环一旦开始就无法在中间停止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === c) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">        <span class="comment">// 在找到对应的项之后，可以通过return true来终止循环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="every循环"><a href="#every循环" class="headerlink" title="every循环"></a>every循环</h3><p>能用来判断数组中每个对象的某个属性，例如判断是否被全选</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;梨子&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;橘子&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求：判断数组中，水果是否被全选了</span></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">state</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="reduce基本使用"><a href="#reduce基本使用" class="headerlink" title="reduce基本使用"></a>reduce基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>, <span class="attr">price</span>: <span class="number">10</span>, <span class="attr">count</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">state</span>: <span class="literal">false</span>, <span class="attr">price</span>: <span class="number">80</span>, <span class="attr">count</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;梨子&#x27;</span>, <span class="attr">state</span>: <span class="literal">false</span>, <span class="attr">price</span>: <span class="number">22</span>, <span class="attr">count</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;橘子&#x27;</span>, <span class="attr">state</span>: <span class="literal">true</span>, <span class="attr">price</span>: <span class="number">24</span>, <span class="attr">count</span>: <span class="number">5</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求： 把购物车数组中，已勾选的水果，总价累加起来</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr.filter(item =&gt; item.state).reduce((累加的结果，当前循环项) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">&#125;,初始值)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> amt</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">state</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">amt, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> amt += item.<span class="property">price</span> * item.<span class="property">count</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="reduce简化写法"><a href="#reduce简化写法" class="headerlink" title="reduce简化写法"></a>reduce简化写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> amt</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">state</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">amt, item</span>) =&gt;</span> amt += item.<span class="property">price</span> * item.<span class="property">count</span>,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue入门 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门笔记（1）</title>
      <link href="/2022/11/13/notes/vue2/"/>
      <url>/2022/11/13/notes/vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员Vue2"><a href="#Bilibili黑马程序员Vue2" class="headerlink" title="Bilibili黑马程序员Vue2"></a><a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2+vue3</a>教程的学习笔记（1）</p><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><ul><li>模块化</li><li>组件化</li><li>规范化</li><li>自动化<br>比如开发时热部署</li></ul><p>前端工程化具体解决方案：<strong>webpack</strong>（还有其他的，但是这个较为流行）</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack是前端项目工程化的具体解决方案。</p><p>能够压缩代码、处理浏览器端JavaScript兼容性、性能优化。</p><h3 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a>webpack的基本使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建node项目</span></span><br><span class="line">$ npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目根目录中创建src源代码目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在src中创建index.html与index.js</span></span><br><span class="line">$ <span class="built_in">cd</span> src</span><br><span class="line">$ <span class="built_in">touch</span> index.html</span><br><span class="line">$ <span class="built_in">touch</span> index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JQuery</span></span><br><span class="line">$ npm install npm jquery --save</span><br><span class="line">$ npm install npm jquery -S</span><br></pre></td></tr></table></figure><p>使用ES6导入JQuery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入jquery第三方包，并使用变量$接收</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 实现奇偶变色</span></span><br><span class="line">  $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在index.html中导入包含以上代码的index.js文件后，会出现语法错误，因为浏览器不支持ES6语法。可以使用webpack来帮我们解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装webpack相关的两个包，--save-dev让包保存在devDependencies节点中</span></span><br><span class="line"><span class="comment"># --save-dev表示只在开发阶段使用到的包（4.7.2版本好像有问题，目前直接安装最新版本就能解决）</span></span><br><span class="line">$ npm install webpack@5.42.1 webpack-cli@4.7.2 --save-dev</span><br><span class="line">$ npm install webpack@5.42.1 webpack-cli@4.7.2 --D</span><br></pre></td></tr></table></figure><p>在项目根目录中，创建名为webpack.config.js的webpack配置文件，初始化内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向外导出一个webpack配置对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>  <span class="comment">// mode用来指定构建模式，development（开发） production（生产）</span></span><br><span class="line">  <span class="comment">// 使用development打包速度快，代码不会压缩，项目体积大</span></span><br><span class="line">  <span class="comment">// 使用production打包速度慢，代码会压缩，项目体积小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package.json的scripts阶段下，新增dev脚本（也可以叫其他的名字）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack&quot;</span> <span class="comment">// 使用npm run xxx执行对应脚本，如：npm run dev</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>$ npm run dev</code>来使用webpack工具，它会先读取webpack.config.js这个文件，然后根据配置在项目根目录生成一个dist目标目录，其中有一个main.js脚本文件，并且这个main.js包含index.js与jquery.js的代码</p><p>然后再在index.html中引入main.js代码，就能够运行了，没有兼容性问题。</p><p>webpack4.x与5.x默认打包的入口文件为&#x2F;src&#x2F;index.js，默认输出文件的路径为&#x2F;dist&#x2F;main.js，可以在webpack.config.js配置文件中可以修改默认配置，通过entry节点可以指定导报的入口，通过output节点指定打包的出口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack中的插件"><a href="#webpack中的插件" class="headerlink" title="webpack中的插件"></a>webpack中的插件</h3><p>可以拓展webpack的能力</p><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p>每当修改了源代码，就会对项目进行构建和打包</p><p>使用<code>$ npm install webpack-dev-server@3.11.2 --save-dev</code>安装</p><p>安装后需要对package.json &gt; script中的dev命令进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>$ npm run dev</code>运行项目，会发现程序一直在监听而不会退出，一旦源码进行修改项目就会重新打包。<strong>每次重新部署生成的目标文件并不会放在物理磁盘上，而是在内存中，能够通过控制台提示的地址访问</strong></p><p>默认访问此插件提供的http服务地址，是访问项目根目录，为了能够打开地址能够直接访问index首页，可以将&#x2F;src&#x2F;index.html复制一份放在项目根目录中，这里就可以用<strong>web-webpack-plugin</strong>第三方插件来帮我们完成</p><h4 id="web-webpack-plugin"><a href="#web-webpack-plugin" class="headerlink" title="web-webpack-plugin"></a>web-webpack-plugin</h4><p>使用<code>$ npm install html-webpack-plugin@5.3.2 -save-dev</code>安装此插件</p><p>在webpack.config.js配置文件中中配置html-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建HTML插件实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,   <span class="comment">// 指定源文件的存放路径</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;./index.html&#x27;</span>        <span class="comment">// 指定生成文件的存放路径</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [htmlPlugin]           <span class="comment">// 通过plugins节点，使htmlPlugin插件生效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以让webpack自动打开浏览器，也可以配置端口。需要在webpack.config.js的配置对象中配置devServer节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack中的loader（加载器）"><a href="#webpack中的loader（加载器）" class="headerlink" title="webpack中的loader（加载器）"></a>webpack中的loader（加载器）</h3><p>webpack默认只能处理.js文件，为了处理其他文件就需要对应的loader</p><p>使用<code>$ npm install style-loader@3.0.0 css-loader@5.2.6 -D</code>安装处理CSS文件的加载器，然后在webpack.config.js配置对象的module节点增加rules节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 所有第三方模块的匹配规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 文件后缀为.css</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 使用到的插件</span></span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理less文件</p><ul><li>Less是一门CSS预处理语言，css是一种用来表现HTML或XML等文件样式的计算机语言。</li><li>less扩展了CSS语言，增加了变量、Mixin、函数等特性。</li><li>css可以被浏览器直接识别，less需要先编译为css。</li></ul><p>运行<code>$ npm install less-loader@10.0.1 less@4.1.1 -D</code>命令下载对应加载器（可以不用下载less，因为less-loader依赖less，会自动安装），并在webpack.config.js配置对象的module &gt; rules数组进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 所有第三方模块的匹配规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 文件后缀为.css</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 使用到的插件</span></span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>小图片优化：base64，精灵图</p><p>运行<code>$ npm install url-loader@4.1.1 file-loader@6.2.0 -D</code>命令，在webpack.config.js配置对象的module &gt; rules数组中添加规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="string">&#x27;/\.jpg|png|gif$/&#x27;</span>,</span><br><span class="line">      <span class="comment">// ?后为参数项</span></span><br><span class="line">      <span class="comment">// limit指定图片大小，（byte），只有小于等于这个大小的图片才会被转为base64格式的图片</span></span><br><span class="line">      <span class="attr">use</span>: <span class="string">&#x27;url-loader?limit=2229&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理高级语法"><a href="#处理高级语法" class="headerlink" title="处理高级语法"></a>处理高级语法</h4><p>支持装饰器语法</p><p>运行<code>npm install babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D</code>下载webpack对应的babel加载器和babel的插件</p><p><strong>@babel&#x2F;<a href="mailto:&#99;&#111;&#114;&#x65;&#x40;&#55;&#x2e;&#49;&#x34;&#46;&#54;">&#99;&#111;&#114;&#x65;&#x40;&#55;&#x2e;&#49;&#x34;&#46;&#54;</a></strong></p><p>这个前面的@babel表示babel公司的私有包，&#x2F;core表示这个公司名下的core第三方包，@7.14.6表示版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js/</span>,</span><br><span class="line">          <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 排除项，不处理第三方包</span></span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上只是匹配了规则，在项目根目录中还要创建babel.config.js的配置文件，来应用bale旗下的插件（插件的插件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 生命babel可用的插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>,&#123;<span class="attr">legacy</span>: <span class="literal">true</span>&#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build配置"><a href="#build配置" class="headerlink" title="build配置"></a>build配置</h2><p>目前配置后webpack只能将项目生成在内存中，如果想发布项目怎么办？</p><p>在package.json文件中的scripts中添加build节点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自动清理dist文件夹"><a href="#自动清理dist文件夹" class="headerlink" title="自动清理dist文件夹"></a>自动清理dist文件夹</h2><p>使用<code>$ npm install clean-webpack-plugin --save-dev</code>命令进行安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><p>因为生成的代码与源代码不一致，就导致报错位置不能与源代码对应，Source Map保存信息文件，存储生成代码位置信息。在webpack.config.js的配置对象中添加节点<code>devtool: &#39;eval-source-map&#39;</code>，只在开发时使用此工具。</p><h3 id="只定位行号不暴露源码"><a href="#只定位行号不暴露源码" class="headerlink" title="只定位行号不暴露源码"></a>只定位行号不暴露源码</h3><p><code>devtool: &#39;nosources-source-map&#39;</code></p><h2 id="webpack取别名"><a href="#webpack取别名" class="headerlink" title="webpack取别名"></a>webpack取别名</h2><p>将@表示源码根目录，在webpack.config.js配置对象节点中添加以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line"><span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装浏览器vue调试工具"><a href="#安装浏览器vue调试工具" class="headerlink" title="安装浏览器vue调试工具"></a>安装浏览器vue调试工具</h2><p>在Chrome安装vue调试工具</p><p><a href="https://devtools.vuejs.org/">下载浏览器插件</a></p><p>更多 -&gt; 更多工具 -&gt; 扩展工具 -&gt; 开发者模式 -&gt; 安装插件</p><p>配置插件 -&gt; 详情 -&gt; 允许访问文件网址 </p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>用于构建用户界面的前端框架</p><p>需要学习vue框架的规范</p><p>vue的指令、组件、路由、Vuex、Vue组件库</p><h3 id="Vue的特性"><a href="#Vue的特性" class="headerlink" title="Vue的特性"></a>Vue的特性</h3><h4 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h4><p>Vue将获取到的数据自动渲染到页面结构</p><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><p>在网页中，form表单负责采集数据，ajax负责传递数据</p><h4 id="工作原理：MVVM"><a href="#工作原理：MVVM" class="headerlink" title="工作原理：MVVM"></a>工作原理：MVVM</h4><p>Model、View、ViewModel</p><p>Model：表示当前页面渲染时所依赖的数据源<br>View： 表示当前页面所渲染的DOM结构<br>ViewModel： 表示vue的示例，他是MVVM的核心</p><h3 id="Vue基本使用"><a href="#Vue基本使用" class="headerlink" title="Vue基本使用"></a>Vue基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.10/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- username表示接收传入数据的变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 需要被控制的dom，选择器只会控制第一个被选择的元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 传入的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h4><p>指令是为开发者提供的模板语法，用于辅助开发者渲染页面的基本结构</p><p>指令分为六大类</p><ul><li>内容渲染指令</li><li>属性绑定指令</li><li>事件绑定指令</li><li>双向绑定指令</li><li>条件渲染指令</li><li>列表渲染指令</li></ul><h5 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h5><p>用在内容节点的指令，指令的模板引擎不仅能插入数值，还能执行简单的javascript运算</p><h6 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h6><p>会覆盖元素中所有的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;lisi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h6><p>插值表达式就是两个大括号，英文名Mustache，只是内容的占位符，不会覆盖原有的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;lisi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h6><p><code>v-text</code>和插值表达式只能渲染文本内容，不能渲染html标签内容，<code>v-html</code>能解决这个问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: <span class="string">&#x27;&lt;h1&gt;哈哈哈哈哈哈&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性渲染指令"><a href="#属性渲染指令" class="headerlink" title="属性渲染指令"></a>属性渲染指令</h5><p>用在属性节点的指令</p><h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><code>v-bind</code></h6><p>加在属性的前面并加一个冒号，也可省略<code>v-bind</code>，只加冒号</p><p>例：<code>v-bind:img=&quot;变量&quot;</code>or<code>:img=&quot;变量&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;photo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">photo</span>: <span class="string">&#x27;http://xxx.com/xxx.img&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h5><h6 id="v-on事件绑定"><a href="#v-on事件绑定" class="headerlink" title="v-on事件绑定"></a><code>v-on</code>事件绑定</h6><p>可以使用<code>@</code>来省略<code>v-on:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;okk&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如何传参</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add(2)&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub(1)&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用<code>@</code>简写事件绑定指令</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(2)&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(1)&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue有内置对象，$event表示js原生事件对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add($event,2)&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(1)&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">e,num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>事件修饰符</strong></p><p>加在事件绑定的后面</p><table><thead><tr><th align="left">事件修饰符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.prevent</td><td align="left">阻止默认行为</td></tr><tr><td align="left">.stop</td><td align="left">阻止事件冒泡</td></tr><tr><td align="left">.capture</td><td align="left">以捕获模式出发当前的事件处理函数</td></tr><tr><td align="left">.once</td><td align="left">绑定的事件只触发一次</td></tr><tr><td align="left">.self</td><td align="left">只有在event.target是当前元素自身时触发事件处理函数</td></tr></tbody></table><p><strong>阻止默认事件</strong></p><p><code>@click.prevent=&quot;show()&quot;</code></p><p><strong>按键修饰符</strong></p><table><thead><tr><th align="left">按键修饰符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.enter</td><td align="left">按键是enter时才触发事件</td></tr><tr><td align="left">.esc</td><td align="left">按键时esc时才触发事件</td></tr><tr><td align="left">…</td><td align="left">…</td></tr></tbody></table><h5 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h5><p>使用<code>v-model</code>设置双向绑定数据，dom能够改变变量，变量也能改变dom</p><p><code>v-bind</code>即<code>:</code>是单向绑定，不会改变变量的值，只会变量改变dom</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">content</span>: <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在表单元素中使用才有意义</strong></p><p><code>v-model</code>指令的修饰符</p><table><thead><tr><th align="left"><code>v-model</code>修饰符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.number</td><td align="left">识别绑定的数据为数值</td></tr><tr><td align="left">.trim</td><td align="left">自动去除首尾空格</td></tr><tr><td align="left">.lazy</td><td align="left">中间的变化过程不会同步到变量中</td></tr></tbody></table><h5 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h5><p>按需控制DOM的显示与隐藏</p><h6 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h6><p>每次动态创建或移除元素</p><p>如果刚进入页面，某些页面默认不需要被展示，而且后期也很可能不需要被展示出来，这时<code>v-if</code>性能更好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是被v-if控制的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h6><p>是动态为元素添加<code>display: none</code>样式，来实现元素的显示和隐藏</p><p>如果频繁显示隐藏，用<code>v-show</code>的性能要高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是被v-show控制的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-else-amp-v-else-if"><a href="#v-else-amp-v-else-if" class="headerlink" title="v-else&amp;v-else-if"></a><code>v-else</code>&amp;<code>v-else-if</code></h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;&lt;条件&gt;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;&lt;条件&gt;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;&lt;条件&gt;&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>差<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="列表渲染指令（循环指令v-for）"><a href="#列表渲染指令（循环指令v-for）" class="headerlink" title="列表渲染指令（循环指令v-for）"></a>列表渲染指令（循环指令<code>v-for</code>）</h5><p>使用语法<code>item in items</code>，其中<code>in</code>是固定指令，items接收data中的数组，item接收items中的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.gender &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">item</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用语法<code>(item,index) in items</code>，其中<code>in</code>是固定指令，items接收data中的数组，item接收items中的元素，index是元素下标，从0起标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item.name + (index + 1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.gender &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">item</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>官方建议：</strong>只要用到了<code>v-for</code>指令，那么一定要绑定一个<code>:key</code>属性，并且尽量把<code>item.id</code>作为<code>:key</code>的值，这个值只能是字符串或者是数字类型，<code>:key</code>的值不能重复，否则会报错<code>Buplicat keys detected</code></p><p>使用index的值作为key的值并没有任何意义，因为这个index与内容并没有绑定关系，他是和元素顺序有关</p><p>指定key的值既能提升性能、又防止列表状态絮乱</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue过滤器（Filters）"><a href="#Vue过滤器（Filters）" class="headerlink" title="Vue过滤器（Filters）"></a>Vue过滤器（Filters）</h4><p>常用于文本格式化，可和<code>v-bind</code>属性绑定，管道符<code>|</code></p><p>前面的变量作为管道后面过滤函数的参数，过滤器函数应定义到filters节点下</p><p><strong>私有过滤器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message | toUp &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">filter</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">toUp</span>: <span class="keyword">function</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> message + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>全局过滤器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;capi&#x27;</span>,<span class="keyword">function</span>(<span class="params">str</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> first = str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> other = str.<span class="title function_">slice</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> first + other;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器也能够串联调用，例：<code>item.time | dateformat | xxx | yyy | zzz</code></p><h4 id="Vue侦听器（watch）"><a href="#Vue侦听器（watch）" class="headerlink" title="Vue侦听器（watch）"></a>Vue侦听器（watch）</h4><p>定义在watch节点下，方法名与需要监听的数据变量名一致，监视数据的变化</p><p><strong>方法格式侦听器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">username</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新值：&#x27;</span> + newVal);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旧值：&#x27;</span> + oldVal);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到了username值的变化&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的方法侦听器无法在初始化页面时就执行一次，可以使用对象格式实现自动触发一次</p><p>也无法监听对象中的属性变化，可以使用对象格式的deep选项</p><p><strong>对象格式侦听器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 侦听器处理函数</span></span></span><br><span class="line"><span class="language-javascript">handler (newVal,oldVal) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新值：&#x27;</span> + newVal);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旧值：&#x27;</span> + oldVal);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到了username值的变化&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 控制侦听器是否触发一次，默认为false</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">immediate</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>深度监听</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newVal);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 开启深度监听，只要对象中任何一个属性变化，都会触发对象侦听器，默认为false</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>直接侦听对象中的某个属性</strong></p><p>方法名包裹单引号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;info.username&#x27;</span>(newVal) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newVal);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue计算属性"><a href="#Vue计算属性" class="headerlink" title="Vue计算属性"></a>Vue计算属性</h4><p>通过一系列运算后，最终得到的属性值（实现代码复用），放在computed节点下</p><p>依赖的属性变化后会自动重新求值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">r:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;r&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">g:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;g&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">b:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;b&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#x27;background-color:&#x27; + rgb&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;rgb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">r</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">g</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">b</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">rgb</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 所有的计算属性，都要定义到computed节点下</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 计算属性在定义的时候，要定义成方法格式</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// rgb作为一个计算属性，被定义成了方法格式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 最终要返回一个生成好的rgb(x,y,z)格式字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">rgb</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios是一个专注于网络请求的库，jQuery还有很多其他的功能，过于庞大</p><p>cdn<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios的基本用法</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;请求的类型&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;请求的url地址&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>axios给收到的响应套了一层壳</p><ul><li>config</li><li>data:{}真实的数据</li><li>headers</li><li>request</li><li>status</li><li>statusText</li></ul><p><strong>axios传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">aixos</span>(&#123;</span><br><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span>,</span><br><span class="line"><span class="comment">// url参数</span></span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 请求体参数</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;13424&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>axios返回的是Promise对象</strong></p><p><a href="https://blog.csdn.net/weixin_41817034/article/details/80492315">Promise参考博文</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果调用某个方法返回值是Promise实例，则前面可以添加await</span></span><br><span class="line"><span class="comment">// await只能用在被async“修饰的方法中”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构后重命名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>axios直接发送请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url地址&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="attr">params</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url地址&#x27;</span>,&#123;post请求体数据&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue入门 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS入门笔记</title>
      <link href="/2022/11/07/notes/nodejs/"/>
      <url>/2022/11/07/notes/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员NodeJS"><a href="#Bilibili黑马程序员NodeJS" class="headerlink" title="Bilibili黑马程序员NodeJS"></a><a href="https://www.bilibili.com/video/BV1a34y167AZ">Bilibili黑马程序员NodeJS</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1a34y167AZ">Bilibili黑马程序员NodeJS教程</a>的学习记录</p><h2 id="什么是nodejs"><a href="#什么是nodejs" class="headerlink" title="什么是nodejs"></a>什么是nodejs</h2><p>nodejs是基于谷歌v8引擎的js解释器，nodejs包含npm，npm是node包管理工具</p><h2 id="如何运行js代码"><a href="#如何运行js代码" class="headerlink" title="如何运行js代码"></a>如何运行js代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行当前目录下名为xx.js的js源文件</span></span><br><span class="line">$ node xx.js</span><br></pre></td></tr></table></figure><h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><p>nodejs也和chrome的v8一样，有一些内置模块供我们使用</p><ul><li><p>fs文件模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>path路径模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>http服务模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、标准</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">xx</span> = xxx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、简洁</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">xx</span> = xxx;</span><br></pre></td></tr></table></figure><h2 id="npm使用"><a href="#npm使用" class="headerlink" title="npm使用"></a>npm使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为npm默认下载包的地址在国外，可以切换国内的镜像源</span></span><br><span class="line"><span class="comment"># 下载镜像源快速切换工具nrm</span></span><br><span class="line">$ npm install -g nrm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像源列表</span></span><br><span class="line">$ nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表中的镜像，例：</span></span><br><span class="line">$ nrm use taobao</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载某个包</span></span><br><span class="line">$ npm install xxxx[@version] [--save]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载某个包</span></span><br><span class="line">$ npm uninstall xxxx[@version] [--save]</span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>优秀的第三方模块，能够快速开发中间件</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件1</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">get</span>(<span class="string">&#x27;path1&#x27;</span>,func1);</span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">post</span>(<span class="string">&#x27;path2&#x27;</span>,func2);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件2</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;./文件1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;前缀&#x27;</span>,<span class="title class_">Router</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(端口,funciton;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>express在收到请求时会先调用中间件</p><p>中间件的调用会根据中间件注册的顺序执行，而且会共用一个res和req，也就是说可以在上游中间件给res对象和req对象加入一些属性或方法供下游中间件使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建中间件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mw1</span>(<span class="params">req,res,next</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    你的代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mw2</span>(<span class="params">req,res,next</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">你的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局生效中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册局部生效的中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,mw2,func);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册多个局部生效的中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,[mw1,mw2],func);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,mw1,mw2,func);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>中间件的注册应当放在路由的前面</li><li>中间件函数中的业务完成后应当调用next函数，否则请求会停止在此中间件</li><li>中间件函数应当最后调用next函数，不能在next函数调用后还继续写代码，否则会造成代码混乱</li></ul><h3 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h3><ul><li><p>应用级别中间件<br>注册在app上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req,res,next</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接注册在app上</span></span><br><span class="line">app.<span class="title function_">use</span>(mw);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册在app的路由上</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,mw,func);</span><br></pre></td></tr></table></figure></li><li><p>路由级别中间件</p></li></ul><p>注册在Router上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req,res,next</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">use</span>(mw);</span><br></pre></td></tr></table></figure><ul><li>错误级别中间件</li></ul><p>用于处理错误，防止系统崩溃的中间件，一定要在路由后注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义错误中间件，相较于普通中间件多了一个err参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">err,req,res,next</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,func);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在路由后注册才会有err对象，否则err为undefined</span></span><br><span class="line">app.<span class="title function_">use</span>(mw);</span><br></pre></td></tr></table></figure><ul><li>内置中间件</li></ul><p>express自带的中间件</p><ul><li>内置中间件-express.static()</li></ul><p>快速托管静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;prefix&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;path&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li>内置中间件-express.json()</li></ul><p>解析请求体中的json数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过req对象的body属性获取</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> body = req.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>内置中间件-express.urlencoded()</li></ul><p>解析请求体中url-www-extended（好像叫这个吧，忘了）的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象（我也不太清楚什么意思）</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line"><span class="attr">extended</span>: <span class="literal">false</span>;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过req对象的body属性获取</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> body = req.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>第三方中间件</li></ul><p>别人写的优秀的第三方中间件，例如body-parser，但是<a href="mailto:&#x65;&#120;&#112;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#x2e;&#49;&#54;&#46;&#x30;">&#x65;&#120;&#112;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#x2e;&#49;&#54;&#46;&#x30;</a>以后就自带了这个东西<br>就是express.urlencoded()，它是基于body-parser的封装<br>首先要下载body-parser包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install body-parser --save</span><br></pre></td></tr></table></figure><p>使用方法与express.encoded()差不多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象（我也不太清楚什么意思）</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line"><span class="attr">extended</span>: <span class="literal">false</span>;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过req对象的body属性获取</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> body = req.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p><strong>什么是跨域问题</strong></p><p>在浏览器控制台中会出现类似以下的报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://127.0.0.1/api/get?id=2206831544&amp;name=%E9%A9%AC%E6%9F%90&amp;gender=%E7%94%B7&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>协议、域名、端口号的不同导致的跨域问题</p><p><strong>解决方案</strong></p><p>CORS（主流的解决方案，推荐使用）<br>JSONP（有缺陷的解决方案，只支持get请求）</p><h3 id="使用cors第三方中间件"><a href="#使用cors第三方中间件" class="headerlink" title="使用cors第三方中间件"></a>使用cors第三方中间件</h3><p>cors是express解决跨域问题的第三方中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载cors第三方包</span></span><br><span class="line">$ npm install cors --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在引入路由之前注册cors中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此写入路由</span></span><br></pre></td></tr></table></figure><p><strong>指定域名通过跨域请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定http://19maken.top才能跨域访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;http://19maken.top&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定所有域名都能跨域访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定请求允许的请求方法</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定允许所有的请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure><p>预检请求<br>有些请求不是简单请求，会先发送OPTION请求进行预检</p><p><strong>jsonp</strong></p><p>这个东西我也不太清楚，说是要如果配置了cors，就要配置在cors的前面，然后前端会使用script标签来解析响应的内容。</p><h2 id="mysql模块"><a href="#mysql模块" class="headerlink" title="mysql模块"></a>mysql模块</h2><p>这也是第三方模块，用于数据库的连接与操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载第三方包</span></span><br><span class="line">$ npm install mysql</span><br></pre></td></tr></table></figure><p>导入mysql模块并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入mysql第三方包</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line"><span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line"><span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;secret&#x27;</span>,</span><br><span class="line"><span class="attr">database</span>: <span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作连接</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;SELECT 1+1 AS solution&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is:&#x27;</span>, results[<span class="number">0</span>],solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><p>使用带占位符的sql语句，PS：占位符使用?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、多个占位符，使用数据传数据</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;SELECT * FROM table WHERE age &gt; ? and gender = ?&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,[<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>],<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果占位符太多，可以使用对象</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;INSERT INTO table (fields) values (?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line"><span class="attr">field1</span>: field1,</span><br><span class="line"><span class="attr">field2</span>: field2,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,data,<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="comment">// 查看受影响的行数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results.<span class="property">affectedRows</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、如果只有一个占位符，那么就可以不用使用数组传数据，直接使用数据</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;SELECT * FROM table WHERE age &gt; ?&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,<span class="number">18</span>,<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>在执行操作的时候，如果执行的语句是查询语句，那么results就是一个数组，如果执行的是一个更新语句或者是删除语句，那么results就是一个对象，其中results的affectedRows属性可以查看执行后的语句所影响的行数。</p><h2 id="Web开发模式"><a href="#Web开发模式" class="headerlink" title="Web开发模式"></a>Web开发模式</h2><p>SEO?</p><p>服务端渲染</p><p>对SEO友好，但对服务器压力过大</p><p>前后端分离</p><p>服务器压力小，不用渲染页面，前端注重页面，后端注重API，对SEO不友好，但能使用VUE等框架提供的服务</p><p>如何选择？</p><p>不同的场景使用不同的模式，例如管理系统不怎么需要SEO，就可以使用前后端分离。有些网站也采用首页使用服务端渲染，其他页面使用前后端分离。</p><p><strong>身份验证</strong></p><ul><li>服务端渲染推荐使用Session认证机制。</li></ul><p>使用Cookie，它是存储在用户浏览器中一段不超过4KB的字符串，由一个名称（name）、一个值（value）和其他几个用于控制Cookie有效期、安全性和使用范围的可选属性组成。每当发起请求，会将未过期的Cookie一同发送到对应域名的服务器。服务端可以通过响应头发送Cookie给客户端。但是Cookie不安全，因为谁都可以看，会很好仿造。所以使用Cookie+Session认证。<strong>因为Session中的数据是对应客户端的</strong>客户端只能访问属于自己的session数据，而不能访问别的客户端的session数据。</p><ul><li>前后端分离推荐使用JWT认证机制。</li></ul><h2 id="在Express中使用Session认证"><a href="#在Express中使用Session认证" class="headerlink" title="在Express中使用Session认证"></a>在Express中使用Session认证</h2><p>下载express-session中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session</span><br></pre></td></tr></table></figure><p>注册express-session中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line"><span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,<span class="comment">// secret属性的值可以为任意字符串</span></span><br><span class="line"><span class="attr">resave</span>: <span class="literal">false</span>,<span class="comment">// 固定写法</span></span><br><span class="line"><span class="attr">saveUninitialized</span>: <span class="literal">true</span><span class="comment">// 固定写法</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">// 往session中存储数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">xxx1</span> = xxx1;</span><br><span class="line">req.<span class="property">session</span>.<span class="property">xxx2</span> = xxx2;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/getXxx&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">// 取session中的数据</span></span><br><span class="line">res.<span class="title function_">send</span>(req.<span class="property">session</span>.<span class="property">xxx1</span> + <span class="string">&#x27;\n&#x27;</span> + req.<span class="property">session</span>.<span class="property">xxx2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/logout&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">// 清空Session中的数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JWT跨域认证"><a href="#JWT跨域认证" class="headerlink" title="JWT跨域认证"></a>JWT跨域认证</h2><p>由于Cookie默认不支持跨域，如果使用Session+Cookie作为身份验证机制，配置会很麻烦。JWT（JSON Web Token）是目前最流行的跨域认证解决方案。</p><p><strong>JWT工作流程</strong></p><p>首先客户端（浏览器）会发送登陆请求，服务器接收到请求后先验证账号和密码，验证通过后会将用户的信息对象经过加密后生成Token字符串（服务端不会存储这个字符串），然后响应给客户端，客户端收到响应后会将Token存放在浏览器的LocalStorage或者SessionStorage中，当客户端再次发送请求的时候会通过请求头的Authorization字段将Token发送给服务器，服务器验证这个Token是否合法，解析为之前打包所对应的数据，然后针对数据发送对应的响应。<strong>JWT中不要携带密码信息</strong></p><p>JWT组成部分，三部分，使用“.”分隔</p><p>Header(头部).Payload(有效荷载).Signature(签名)</p><p>Header与Signature只与安全有关，防止破解。Payload是加密后的用户信息。</p><p><strong>客户端如何使用JWT？</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 推荐做法：将JWT放在HTTP请求同的Authorization字段中。</span><br><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><h2 id="在Express中使用JWT"><a href="#在Express中使用JWT" class="headerlink" title="在Express中使用JWT"></a>在Express中使用JWT</h2><p>安装JWT相关的包</p><p>jsonwebtoken 用于生成JWT字符串</p><p>express-jwt 用于将JWT字符串解析还原成JSON数据包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装如下两个JWT相关的包</span></span><br><span class="line">$ npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p>定义secret密钥：用于JWT加密与解密，建议命名为secretKey</p><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="comment">// 新版使用方法(7.7.7)，expressJWT为接收变量名，可任意更换</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">expressjwt</span>: expressJWT&#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义secret密钥（随意字符串）</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;XXXX xxxx II&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置JWT解析中间件</span></span><br><span class="line"><span class="comment">// 这个algorithms必须配置，好像是配置加密算法</span></span><br><span class="line"><span class="comment">// expressJWT(&#123;&#125;)：配置解析</span></span><br><span class="line"><span class="comment">// expressJWT(&#123;&#125;).unless(&#123;&#125;)：配置哪些不使用解析</span></span><br><span class="line"><span class="comment">// 添加expressJWT中间件后，express会将解析的token信息挂载在req.user中</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;</span><br><span class="line"><span class="attr">secret</span>: secretKey,</span><br><span class="line"><span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>]</span><br><span class="line">&#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>]</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 解析请求体JSON数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/user/login/action&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> user = req.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">name</span> === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; user.<span class="property">pwd</span> === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;登陆成功！&#x27;</span>);</span><br><span class="line"><span class="comment">// 参数1：加密信息，必须为一个对象！</span></span><br><span class="line"><span class="comment">// 参数2：加密密钥</span></span><br><span class="line"><span class="comment">// 参数3：配置，有很多参数，这里只配置了token有效期为30秒</span></span><br><span class="line"><span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: user.<span class="property">name</span>&#125;,secretKey,&#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;登陆成功！&#x27;</span>,</span><br><span class="line"><span class="attr">token</span>: tokenStr</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;登陆失败！&#x27;</span>);</span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;登陆失败！&#x27;</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求此接口时应该在请求头的Authorization中添加token信息</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/info&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> user = req.<span class="property">user</span>;</span><br><span class="line"><span class="comment">// username为之前生成token时需要打包的数据中的字段</span></span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">username</span> === admin) &#123;</span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;请求成功！&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加token解析异常中间件处理</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">401</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;无效的token&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不是token错误</span></span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">500</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;未知的错误&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> NodeJS入门 </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站感言</title>
      <link href="/2022/11/04/summary/hello-world/"/>
      <url>/2022/11/04/summary/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-建站感言"><a href="#Hexo-建站感言" class="headerlink" title="Hexo 建站感言"></a>Hexo 建站感言</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>历时三天，终于搞了一个基本能用的博客，非常激动！<br>其实之前我已经搭建过两三次博客了，但是都是照猫画虎，不知道为什么这样干，导致我最后无法维护我的博客，再加上搭建后就不想管了，之前的博客就逐渐被废弃了。虽然之前已经搭建过博客，但是本次重新搭建的期间还是遇到了很多的问题，只有疯狂百度，看别的博主发布的教程，最后还是都解决了，心累啊~</p><h3 id="为什么建设本站"><a href="#为什么建设本站" class="headerlink" title="为什么建设本站"></a>为什么建设本站</h3><p>首先就是因为周边的同学有，所以自己也想搞一个。而且写一些技术文章不仅能帮助别人，还能巩固知识，也可以在博客上分享一些趣事。<br>其实有很多的博客网站，例如CSDN和博客园之类的，但是它们的网站自由度不是很高，网站上不能挂自己想挂的东西，自己搭建的博客就有比较高的自由度了，可以按照自己喜欢的风格自定义。说不定这个以后还能帮助我拿到offer。</p><h3 id="对本站的打算"><a href="#对本站的打算" class="headerlink" title="对本站的打算"></a>对本站的打算</h3><p>前面也说到之前做过的博客网站都逐渐废弃了，但是这次想好好维护了，看到别人的博客网站有很多的文章，真的很羡慕啊，我也想要！之后打算把博客当备忘录用或者技术分享用，也就是记录一些编程学习过程中比较难记忆的内容，或者是自己踩过的坑，或者是一些个人感悟，抒发情绪之类的。目前的想法就是这样，以后可能会有改动，更新频率也不太确定，因为有时候很忙，有时候又没啥事儿，随缘更新。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本博客使用<a href="https://hexo.io/zh-cn/">Hexo博客框架</a>+<a href="https://butterfly.js.org/">butterfly博客主题</a>+<a href="https://gitee.com/help/articles/4136">Gitee Pages服务</a>+<a href="https://www.aliyun.com/product/oss">aliyunOSS对象存储服务</a>构建，有前人栽树搭建起来真的很方便啊，特别感谢<a href="https://hexo.io/zh-cn/">Hexo</a>以及<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>开源主题。<br>在此感谢我亲爱的室友<a href="https://gitee.com/jiaxinxiaobinggan">小马同学</a>画的背景图和头像，真的很好看呐。<br>也感谢正在看的你，因为有你才是我做此博客的目的。</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li><p>[2023-05-11] 由于<strong>Gitee Pages</strong>的审核问题，本博客不再使用<strong>Gitee Pages服务</strong>，而转向了<strong>Github Pages</strong>服务</p></li><li><p>[2023-05-11] 由于图床资费的原因，本博客不再使用<strong>阿里云OSS对象存储服务</strong>，而直接使用<strong>Github</strong>搭建个人图床，缺点就是大部分时间访问不了图片，需要外网访问</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> 聊一聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客管理</title>
      <link href="/2022/11/03/working/hexo-manage/"/>
      <url>/2022/11/03/working/hexo-manage/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo博客管理项目"><a href="#Hexo博客管理项目" class="headerlink" title="Hexo博客管理项目"></a>Hexo博客管理项目</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm install<span class="comment"># 下载hexo博客管理依赖包</span></span><br><span class="line"></span><br><span class="line">$ hexo clean<span class="comment"># 清除之前生成的静态博客</span></span><br><span class="line"></span><br><span class="line">$ hexo generate<span class="comment"># 生成静态文件博客</span></span><br><span class="line"></span><br><span class="line">$ hexo server<span class="comment"># 启动本地博客服务</span></span><br><span class="line"></span><br><span class="line">$ hexo deploy<span class="comment"># 将静态博客发布到gitee</span></span><br></pre></td></tr></table></figure><p><strong>发布成功后应当更新pages服务</strong></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>如果不指定模板，创建的文章模板为post模板，并且会默认生成在&#x2F;source&#x2F;_posts目录中</p><p>创建post文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、指定创建post文章的目录</span></span><br><span class="line">$ hexo new --paht &lt;指定目录/文件名&gt; <span class="string">&quot;&lt;文章标题&gt;&quot;</span></span><br><span class="line"><span class="comment"># 例：如下命令表示在/source/_post目录下创建一个名为test/notes的目录</span></span><br><span class="line"><span class="comment"># 文章的文件名为vue2.md，并且会创建一个名为vue2的文件夹用于装此文章的图片资源等等，文章的标题为 Vue2入门笔记</span></span><br><span class="line">$ hexo new --path <span class="built_in">test</span>/notes/vue2 <span class="string">&quot;Vue2入门笔记&quot;</span></span><br></pre></td></tr></table></figure><p>指定Front-matter，就是每篇文章的基本信息，写在文章md文件的最前面，用—定义作用域。例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;!-- 文章标题 --&gt;</span><br><span class="line">title: Hexo建站感言</span><br><span class="line">&lt;!-- 文章封面 --&gt;</span><br><span class="line">cover: https://image.insectmk.cn/hexo-gitee-blog/article/<span class="emphasis">_post/summary/hello-world/cover.jpg</span></span><br><span class="line"><span class="emphasis">&lt;!-- 是否开启评论 --&gt;</span></span><br><span class="line"><span class="emphasis">comments: true</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章分类，只能有一个 --&gt;</span></span><br><span class="line"><span class="emphasis">categories:</span></span><br><span class="line"><span class="emphasis">  - 总结</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章标签，可以有多个 --&gt;</span></span><br><span class="line"><span class="emphasis">tags:</span></span><br><span class="line"><span class="emphasis">  - 个人博客</span></span><br><span class="line"><span class="emphasis">  - 聊一聊</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章创建时间 --&gt;</span></span><br><span class="line"><span class="emphasis">date: 2022-11-04 15:41:22</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章更新时间 --&gt;</span></span><br><span class="line"><span class="emphasis">updated: 2022-11-07 13:16:22</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章置顶排序，数字越大越靠前 --&gt;</span></span><br><span class="line"><span class="emphasis">sticky: 100</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><h3 id="Hexo博客管理相关链接"><a href="#Hexo博客管理相关链接" class="headerlink" title="Hexo博客管理相关链接"></a>Hexo博客管理相关链接</h3><ul><li><a href="https://vercel.com/makuning/hexo-gitee-blog-waline">vercel管理</a></li><li><a href="https://hexo-gitee-blog-waline.19marken.top/ui">vercel代理管理</a></li><li><a href="https://hexo-gitee-blog-waline-mpolgjsxt-makuning.vercel.app/ui">waline管理端</a></li><li><a href="https://butterfly.js.org/">hexo-theme-butterfly官方</a></li><li><a href="https://hexo.io/zh-cn/">hexo官方</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序运行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
